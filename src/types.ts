/**
 * This file is auto-generated by [GraphQL code generator](https://graphql-code-generator.com).
 * via the `generate` script in `package.json`. Do not edit this file, as it gets
 * overwritten before every build.
 * See `codegen.json` in the project root.
 */
import { GraphQLClient } from 'graphql-request';
import { print } from 'graphql';
import gql from 'graphql-tag';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  _int4: number;
  bigint: any;
  numeric: number;
  point: [number, number];
  timestamp: any;
};

/** expression to compare columns of type Boolean. All fields are combined with logical 'AND'. */
export type Boolean_Comparison_Exp = {
  _eq?: Maybe<Scalars['Boolean']>;
  _gt?: Maybe<Scalars['Boolean']>;
  _gte?: Maybe<Scalars['Boolean']>;
  _in?: Maybe<Array<Scalars['Boolean']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['Boolean']>;
  _lte?: Maybe<Scalars['Boolean']>;
  _neq?: Maybe<Scalars['Boolean']>;
  _nin?: Maybe<Array<Scalars['Boolean']>>;
};

/** expression to compare columns of type Int. All fields are combined with logical 'AND'. */
export type Int_Comparison_Exp = {
  _eq?: Maybe<Scalars['Int']>;
  _gt?: Maybe<Scalars['Int']>;
  _gte?: Maybe<Scalars['Int']>;
  _in?: Maybe<Array<Scalars['Int']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['Int']>;
  _lte?: Maybe<Scalars['Int']>;
  _neq?: Maybe<Scalars['Int']>;
  _nin?: Maybe<Array<Scalars['Int']>>;
};

/** expression to compare columns of type String. All fields are combined with logical 'AND'. */
export type String_Comparison_Exp = {
  _eq?: Maybe<Scalars['String']>;
  _gt?: Maybe<Scalars['String']>;
  _gte?: Maybe<Scalars['String']>;
  _ilike?: Maybe<Scalars['String']>;
  _in?: Maybe<Array<Scalars['String']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _like?: Maybe<Scalars['String']>;
  _lt?: Maybe<Scalars['String']>;
  _lte?: Maybe<Scalars['String']>;
  _neq?: Maybe<Scalars['String']>;
  _nilike?: Maybe<Scalars['String']>;
  _nin?: Maybe<Array<Scalars['String']>>;
  _nlike?: Maybe<Scalars['String']>;
  _nsimilar?: Maybe<Scalars['String']>;
  _similar?: Maybe<Scalars['String']>;
};


/** expression to compare columns of type _int4. All fields are combined with logical 'AND'. */
export type _Int4_Comparison_Exp = {
  _eq?: Maybe<Scalars['_int4']>;
  _gt?: Maybe<Scalars['_int4']>;
  _gte?: Maybe<Scalars['_int4']>;
  _in?: Maybe<Array<Scalars['_int4']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['_int4']>;
  _lte?: Maybe<Scalars['_int4']>;
  _neq?: Maybe<Scalars['_int4']>;
  _nin?: Maybe<Array<Scalars['_int4']>>;
};


/** expression to compare columns of type bigint. All fields are combined with logical 'AND'. */
export type Bigint_Comparison_Exp = {
  _eq?: Maybe<Scalars['bigint']>;
  _gt?: Maybe<Scalars['bigint']>;
  _gte?: Maybe<Scalars['bigint']>;
  _in?: Maybe<Array<Scalars['bigint']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['bigint']>;
  _lte?: Maybe<Scalars['bigint']>;
  _neq?: Maybe<Scalars['bigint']>;
  _nin?: Maybe<Array<Scalars['bigint']>>;
};

/** columns and relationships of "course" */
export type Course = {
  __typename?: 'course';
  /** An array relationship */
  holes: Array<Hole>;
  /** An aggregated array relationship */
  holes_aggregate: Hole_Aggregate;
  id: Scalars['Int'];
  img?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['point']>;
  name: Scalars['String'];
  /** An array relationship */
  playerRounds: Array<Player_Round>;
  /** An aggregated array relationship */
  playerRounds_aggregate: Player_Round_Aggregate;
  /** An array relationship */
  rounds: Array<Round>;
  /** An aggregated array relationship */
  rounds_aggregate: Round_Aggregate;
  /** An array relationship */
  scores: Array<Score>;
  /** An aggregated array relationship */
  scores_aggregate: Score_Aggregate;
  slug: Scalars['String'];
};


/** columns and relationships of "course" */
export type CourseHolesArgs = {
  distinct_on?: Maybe<Array<Hole_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Hole_Order_By>>;
  where?: Maybe<Hole_Bool_Exp>;
};


/** columns and relationships of "course" */
export type CourseHoles_AggregateArgs = {
  distinct_on?: Maybe<Array<Hole_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Hole_Order_By>>;
  where?: Maybe<Hole_Bool_Exp>;
};


/** columns and relationships of "course" */
export type CoursePlayerRoundsArgs = {
  distinct_on?: Maybe<Array<Player_Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Round_Order_By>>;
  where?: Maybe<Player_Round_Bool_Exp>;
};


/** columns and relationships of "course" */
export type CoursePlayerRounds_AggregateArgs = {
  distinct_on?: Maybe<Array<Player_Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Round_Order_By>>;
  where?: Maybe<Player_Round_Bool_Exp>;
};


/** columns and relationships of "course" */
export type CourseRoundsArgs = {
  distinct_on?: Maybe<Array<Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Round_Order_By>>;
  where?: Maybe<Round_Bool_Exp>;
};


/** columns and relationships of "course" */
export type CourseRounds_AggregateArgs = {
  distinct_on?: Maybe<Array<Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Round_Order_By>>;
  where?: Maybe<Round_Bool_Exp>;
};


/** columns and relationships of "course" */
export type CourseScoresArgs = {
  distinct_on?: Maybe<Array<Score_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Score_Order_By>>;
  where?: Maybe<Score_Bool_Exp>;
};


/** columns and relationships of "course" */
export type CourseScores_AggregateArgs = {
  distinct_on?: Maybe<Array<Score_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Score_Order_By>>;
  where?: Maybe<Score_Bool_Exp>;
};

/** aggregated selection of "course" */
export type Course_Aggregate = {
  __typename?: 'course_aggregate';
  aggregate?: Maybe<Course_Aggregate_Fields>;
  nodes: Array<Course>;
};

/** aggregate fields of "course" */
export type Course_Aggregate_Fields = {
  __typename?: 'course_aggregate_fields';
  avg?: Maybe<Course_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Course_Max_Fields>;
  min?: Maybe<Course_Min_Fields>;
  stddev?: Maybe<Course_Stddev_Fields>;
  stddev_pop?: Maybe<Course_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Course_Stddev_Samp_Fields>;
  sum?: Maybe<Course_Sum_Fields>;
  var_pop?: Maybe<Course_Var_Pop_Fields>;
  var_samp?: Maybe<Course_Var_Samp_Fields>;
  variance?: Maybe<Course_Variance_Fields>;
};


/** aggregate fields of "course" */
export type Course_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Course_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "course" */
export type Course_Aggregate_Order_By = {
  avg?: Maybe<Course_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Course_Max_Order_By>;
  min?: Maybe<Course_Min_Order_By>;
  stddev?: Maybe<Course_Stddev_Order_By>;
  stddev_pop?: Maybe<Course_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Course_Stddev_Samp_Order_By>;
  sum?: Maybe<Course_Sum_Order_By>;
  var_pop?: Maybe<Course_Var_Pop_Order_By>;
  var_samp?: Maybe<Course_Var_Samp_Order_By>;
  variance?: Maybe<Course_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "course" */
export type Course_Arr_Rel_Insert_Input = {
  data: Array<Course_Insert_Input>;
  on_conflict?: Maybe<Course_On_Conflict>;
};

/** aggregate avg on columns */
export type Course_Avg_Fields = {
  __typename?: 'course_avg_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "course" */
export type Course_Avg_Order_By = {
  id?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "course". All fields are combined with a logical 'AND'. */
export type Course_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Course_Bool_Exp>>>;
  _not?: Maybe<Course_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Course_Bool_Exp>>>;
  holes?: Maybe<Hole_Bool_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  img?: Maybe<String_Comparison_Exp>;
  location?: Maybe<Point_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  playerRounds?: Maybe<Player_Round_Bool_Exp>;
  rounds?: Maybe<Round_Bool_Exp>;
  scores?: Maybe<Score_Bool_Exp>;
  slug?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "course" */
export enum Course_Constraint {
  /** unique or primary key constraint */
  CourseSlugKey = 'course_slug_key',
  /** unique or primary key constraint */
  CoursesPkey = 'courses_pkey'
}

/** input type for incrementing integer column in table "course" */
export type Course_Inc_Input = {
  id?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "course" */
export type Course_Insert_Input = {
  holes?: Maybe<Hole_Arr_Rel_Insert_Input>;
  id?: Maybe<Scalars['Int']>;
  img?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['point']>;
  name?: Maybe<Scalars['String']>;
  rounds?: Maybe<Round_Arr_Rel_Insert_Input>;
  scores?: Maybe<Score_Arr_Rel_Insert_Input>;
  slug?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Course_Max_Fields = {
  __typename?: 'course_max_fields';
  id?: Maybe<Scalars['Int']>;
  img?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "course" */
export type Course_Max_Order_By = {
  id?: Maybe<Order_By>;
  img?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  slug?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Course_Min_Fields = {
  __typename?: 'course_min_fields';
  id?: Maybe<Scalars['Int']>;
  img?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "course" */
export type Course_Min_Order_By = {
  id?: Maybe<Order_By>;
  img?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  slug?: Maybe<Order_By>;
};

/** response of any mutation on the table "course" */
export type Course_Mutation_Response = {
  __typename?: 'course_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Course>;
};

/** input type for inserting object relation for remote table "course" */
export type Course_Obj_Rel_Insert_Input = {
  data: Course_Insert_Input;
  on_conflict?: Maybe<Course_On_Conflict>;
};

/** on conflict condition type for table "course" */
export type Course_On_Conflict = {
  constraint: Course_Constraint;
  update_columns: Array<Course_Update_Column>;
  where?: Maybe<Course_Bool_Exp>;
};

/** ordering options when selecting data from "course" */
export type Course_Order_By = {
  holes_aggregate?: Maybe<Hole_Aggregate_Order_By>;
  id?: Maybe<Order_By>;
  img?: Maybe<Order_By>;
  location?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  playerRounds_aggregate?: Maybe<Player_Round_Aggregate_Order_By>;
  rounds_aggregate?: Maybe<Round_Aggregate_Order_By>;
  scores_aggregate?: Maybe<Score_Aggregate_Order_By>;
  slug?: Maybe<Order_By>;
};

/** primary key columns input for table: "course" */
export type Course_Pk_Columns_Input = {
  id: Scalars['Int'];
};

/** select columns of table "course" */
export enum Course_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Img = 'img',
  /** column name */
  Location = 'location',
  /** column name */
  Name = 'name',
  /** column name */
  Slug = 'slug'
}

/** input type for updating data in table "course" */
export type Course_Set_Input = {
  id?: Maybe<Scalars['Int']>;
  img?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['point']>;
  name?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Course_Stddev_Fields = {
  __typename?: 'course_stddev_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "course" */
export type Course_Stddev_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Course_Stddev_Pop_Fields = {
  __typename?: 'course_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "course" */
export type Course_Stddev_Pop_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Course_Stddev_Samp_Fields = {
  __typename?: 'course_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "course" */
export type Course_Stddev_Samp_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Course_Sum_Fields = {
  __typename?: 'course_sum_fields';
  id?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "course" */
export type Course_Sum_Order_By = {
  id?: Maybe<Order_By>;
};

/** update columns of table "course" */
export enum Course_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Img = 'img',
  /** column name */
  Location = 'location',
  /** column name */
  Name = 'name',
  /** column name */
  Slug = 'slug'
}

/** aggregate var_pop on columns */
export type Course_Var_Pop_Fields = {
  __typename?: 'course_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "course" */
export type Course_Var_Pop_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Course_Var_Samp_Fields = {
  __typename?: 'course_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "course" */
export type Course_Var_Samp_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Course_Variance_Fields = {
  __typename?: 'course_variance_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "course" */
export type Course_Variance_Order_By = {
  id?: Maybe<Order_By>;
};

/** columns and relationships of "hole" */
export type Hole = {
  __typename?: 'hole';
  /** An object relationship */
  course: Course;
  courseId: Scalars['Int'];
  nickname?: Maybe<Scalars['String']>;
  number: Scalars['Int'];
  par: Scalars['Int'];
  /** An array relationship */
  scores: Array<Score>;
  /** An aggregated array relationship */
  scores_aggregate: Score_Aggregate;
};


/** columns and relationships of "hole" */
export type HoleScoresArgs = {
  distinct_on?: Maybe<Array<Score_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Score_Order_By>>;
  where?: Maybe<Score_Bool_Exp>;
};


/** columns and relationships of "hole" */
export type HoleScores_AggregateArgs = {
  distinct_on?: Maybe<Array<Score_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Score_Order_By>>;
  where?: Maybe<Score_Bool_Exp>;
};

/** aggregated selection of "hole" */
export type Hole_Aggregate = {
  __typename?: 'hole_aggregate';
  aggregate?: Maybe<Hole_Aggregate_Fields>;
  nodes: Array<Hole>;
};

/** aggregate fields of "hole" */
export type Hole_Aggregate_Fields = {
  __typename?: 'hole_aggregate_fields';
  avg?: Maybe<Hole_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Hole_Max_Fields>;
  min?: Maybe<Hole_Min_Fields>;
  stddev?: Maybe<Hole_Stddev_Fields>;
  stddev_pop?: Maybe<Hole_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Hole_Stddev_Samp_Fields>;
  sum?: Maybe<Hole_Sum_Fields>;
  var_pop?: Maybe<Hole_Var_Pop_Fields>;
  var_samp?: Maybe<Hole_Var_Samp_Fields>;
  variance?: Maybe<Hole_Variance_Fields>;
};


/** aggregate fields of "hole" */
export type Hole_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Hole_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "hole" */
export type Hole_Aggregate_Order_By = {
  avg?: Maybe<Hole_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Hole_Max_Order_By>;
  min?: Maybe<Hole_Min_Order_By>;
  stddev?: Maybe<Hole_Stddev_Order_By>;
  stddev_pop?: Maybe<Hole_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Hole_Stddev_Samp_Order_By>;
  sum?: Maybe<Hole_Sum_Order_By>;
  var_pop?: Maybe<Hole_Var_Pop_Order_By>;
  var_samp?: Maybe<Hole_Var_Samp_Order_By>;
  variance?: Maybe<Hole_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "hole" */
export type Hole_Arr_Rel_Insert_Input = {
  data: Array<Hole_Insert_Input>;
  on_conflict?: Maybe<Hole_On_Conflict>;
};

/** aggregate avg on columns */
export type Hole_Avg_Fields = {
  __typename?: 'hole_avg_fields';
  courseId?: Maybe<Scalars['Float']>;
  number?: Maybe<Scalars['Float']>;
  par?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "hole" */
export type Hole_Avg_Order_By = {
  courseId?: Maybe<Order_By>;
  number?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "hole". All fields are combined with a logical 'AND'. */
export type Hole_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Hole_Bool_Exp>>>;
  _not?: Maybe<Hole_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Hole_Bool_Exp>>>;
  course?: Maybe<Course_Bool_Exp>;
  courseId?: Maybe<Int_Comparison_Exp>;
  nickname?: Maybe<String_Comparison_Exp>;
  number?: Maybe<Int_Comparison_Exp>;
  par?: Maybe<Int_Comparison_Exp>;
  scores?: Maybe<Score_Bool_Exp>;
};

/** unique or primary key constraints on table "hole" */
export enum Hole_Constraint {
  /** unique or primary key constraint */
  HolePkey = 'hole_pkey'
}

/** input type for incrementing integer column in table "hole" */
export type Hole_Inc_Input = {
  courseId?: Maybe<Scalars['Int']>;
  number?: Maybe<Scalars['Int']>;
  par?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "hole" */
export type Hole_Insert_Input = {
  course?: Maybe<Course_Obj_Rel_Insert_Input>;
  courseId?: Maybe<Scalars['Int']>;
  nickname?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['Int']>;
  par?: Maybe<Scalars['Int']>;
  scores?: Maybe<Score_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Hole_Max_Fields = {
  __typename?: 'hole_max_fields';
  courseId?: Maybe<Scalars['Int']>;
  nickname?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['Int']>;
  par?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "hole" */
export type Hole_Max_Order_By = {
  courseId?: Maybe<Order_By>;
  nickname?: Maybe<Order_By>;
  number?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Hole_Min_Fields = {
  __typename?: 'hole_min_fields';
  courseId?: Maybe<Scalars['Int']>;
  nickname?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['Int']>;
  par?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "hole" */
export type Hole_Min_Order_By = {
  courseId?: Maybe<Order_By>;
  nickname?: Maybe<Order_By>;
  number?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
};

/** response of any mutation on the table "hole" */
export type Hole_Mutation_Response = {
  __typename?: 'hole_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Hole>;
};

/** input type for inserting object relation for remote table "hole" */
export type Hole_Obj_Rel_Insert_Input = {
  data: Hole_Insert_Input;
  on_conflict?: Maybe<Hole_On_Conflict>;
};

/** on conflict condition type for table "hole" */
export type Hole_On_Conflict = {
  constraint: Hole_Constraint;
  update_columns: Array<Hole_Update_Column>;
  where?: Maybe<Hole_Bool_Exp>;
};

/** ordering options when selecting data from "hole" */
export type Hole_Order_By = {
  course?: Maybe<Course_Order_By>;
  courseId?: Maybe<Order_By>;
  nickname?: Maybe<Order_By>;
  number?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  scores_aggregate?: Maybe<Score_Aggregate_Order_By>;
};

/** primary key columns input for table: "hole" */
export type Hole_Pk_Columns_Input = {
  courseId: Scalars['Int'];
  number: Scalars['Int'];
};

/** select columns of table "hole" */
export enum Hole_Select_Column {
  /** column name */
  CourseId = 'courseId',
  /** column name */
  Nickname = 'nickname',
  /** column name */
  Number = 'number',
  /** column name */
  Par = 'par'
}

/** input type for updating data in table "hole" */
export type Hole_Set_Input = {
  courseId?: Maybe<Scalars['Int']>;
  nickname?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['Int']>;
  par?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type Hole_Stddev_Fields = {
  __typename?: 'hole_stddev_fields';
  courseId?: Maybe<Scalars['Float']>;
  number?: Maybe<Scalars['Float']>;
  par?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "hole" */
export type Hole_Stddev_Order_By = {
  courseId?: Maybe<Order_By>;
  number?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Hole_Stddev_Pop_Fields = {
  __typename?: 'hole_stddev_pop_fields';
  courseId?: Maybe<Scalars['Float']>;
  number?: Maybe<Scalars['Float']>;
  par?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "hole" */
export type Hole_Stddev_Pop_Order_By = {
  courseId?: Maybe<Order_By>;
  number?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Hole_Stddev_Samp_Fields = {
  __typename?: 'hole_stddev_samp_fields';
  courseId?: Maybe<Scalars['Float']>;
  number?: Maybe<Scalars['Float']>;
  par?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "hole" */
export type Hole_Stddev_Samp_Order_By = {
  courseId?: Maybe<Order_By>;
  number?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Hole_Sum_Fields = {
  __typename?: 'hole_sum_fields';
  courseId?: Maybe<Scalars['Int']>;
  number?: Maybe<Scalars['Int']>;
  par?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "hole" */
export type Hole_Sum_Order_By = {
  courseId?: Maybe<Order_By>;
  number?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
};

/** update columns of table "hole" */
export enum Hole_Update_Column {
  /** column name */
  CourseId = 'courseId',
  /** column name */
  Nickname = 'nickname',
  /** column name */
  Number = 'number',
  /** column name */
  Par = 'par'
}

/** aggregate var_pop on columns */
export type Hole_Var_Pop_Fields = {
  __typename?: 'hole_var_pop_fields';
  courseId?: Maybe<Scalars['Float']>;
  number?: Maybe<Scalars['Float']>;
  par?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "hole" */
export type Hole_Var_Pop_Order_By = {
  courseId?: Maybe<Order_By>;
  number?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Hole_Var_Samp_Fields = {
  __typename?: 'hole_var_samp_fields';
  courseId?: Maybe<Scalars['Float']>;
  number?: Maybe<Scalars['Float']>;
  par?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "hole" */
export type Hole_Var_Samp_Order_By = {
  courseId?: Maybe<Order_By>;
  number?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Hole_Variance_Fields = {
  __typename?: 'hole_variance_fields';
  courseId?: Maybe<Scalars['Float']>;
  number?: Maybe<Scalars['Float']>;
  par?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "hole" */
export type Hole_Variance_Order_By = {
  courseId?: Maybe<Order_By>;
  number?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
};

export type Leaderboard_Args = {
  course?: Maybe<Scalars['Int']>;
  player?: Maybe<Scalars['Int']>;
  rank?: Maybe<Scalars['Int']>;
  series?: Maybe<Scalars['Int']>;
};

/** mutation root */
export type Mutation_Root = {
  __typename?: 'mutation_root';
  /** delete single row from the table: "course" */
  deleteCourse?: Maybe<Course>;
  /** delete data from the table: "course" */
  deleteCourses?: Maybe<Course_Mutation_Response>;
  /** delete single row from the table: "hole" */
  deleteHole?: Maybe<Hole>;
  /** delete data from the table: "hole" */
  deleteHoles?: Maybe<Hole_Mutation_Response>;
  /** delete single row from the table: "player" */
  deletePlayer?: Maybe<Player>;
  /** delete data from the table: "player" */
  deletePlayers?: Maybe<Player_Mutation_Response>;
  /** delete single row from the table: "round" */
  deleteRound?: Maybe<Round>;
  /** delete data from the table: "round" */
  deleteRounds?: Maybe<Round_Mutation_Response>;
  /** delete single row from the table: "score" */
  deleteScore?: Maybe<Score>;
  /** delete data from the table: "score" */
  deleteScores?: Maybe<Score_Mutation_Response>;
  /** delete data from the table: "zz_leaderboard" */
  delete_zz_leaderboard?: Maybe<Zz_Leaderboard_Mutation_Response>;
  /** delete single row from the table: "zz_leaderboard" */
  delete_zz_leaderboard_by_pk?: Maybe<Zz_Leaderboard>;
  /** insert a single row into the table: "course" */
  insertCourse?: Maybe<Course>;
  /** insert data into the table: "course" */
  insertCourses?: Maybe<Course_Mutation_Response>;
  /** insert a single row into the table: "hole" */
  insertHole?: Maybe<Hole>;
  /** insert data into the table: "hole" */
  insertHoles?: Maybe<Hole_Mutation_Response>;
  /** insert a single row into the table: "player" */
  insertPlayer?: Maybe<Player>;
  /** insert data into the table: "player" */
  insertPlayers?: Maybe<Player_Mutation_Response>;
  /** insert a single row into the table: "round" */
  insertRound?: Maybe<Round>;
  /** insert data into the table: "round" */
  insertRounds?: Maybe<Round_Mutation_Response>;
  /** insert a single row into the table: "score" */
  insertScore?: Maybe<Score>;
  /** insert data into the table: "score" */
  insertScores?: Maybe<Score_Mutation_Response>;
  /** insert data into the table: "zz_leaderboard" */
  insert_zz_leaderboard?: Maybe<Zz_Leaderboard_Mutation_Response>;
  /** insert a single row into the table: "zz_leaderboard" */
  insert_zz_leaderboard_one?: Maybe<Zz_Leaderboard>;
  /** update single row of the table: "course" */
  updateCourse?: Maybe<Course>;
  /** update data of the table: "course" */
  updateCourses?: Maybe<Course_Mutation_Response>;
  /** update single row of the table: "hole" */
  updateHole?: Maybe<Hole>;
  /** update data of the table: "hole" */
  updateHoles?: Maybe<Hole_Mutation_Response>;
  /** update single row of the table: "player" */
  updatePlayer?: Maybe<Player>;
  /** update data of the table: "player" */
  updatePlayers?: Maybe<Player_Mutation_Response>;
  /** update single row of the table: "round" */
  updateRound?: Maybe<Round>;
  /** update data of the table: "round" */
  updateRounds?: Maybe<Round_Mutation_Response>;
  /** update single row of the table: "score" */
  updateScore?: Maybe<Score>;
  /** update data of the table: "score" */
  updateScores?: Maybe<Score_Mutation_Response>;
  /** update data of the table: "zz_leaderboard" */
  update_zz_leaderboard?: Maybe<Zz_Leaderboard_Mutation_Response>;
  /** update single row of the table: "zz_leaderboard" */
  update_zz_leaderboard_by_pk?: Maybe<Zz_Leaderboard>;
};


/** mutation root */
export type Mutation_RootDeleteCourseArgs = {
  id: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootDeleteCoursesArgs = {
  where: Course_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDeleteHoleArgs = {
  courseId: Scalars['Int'];
  number: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootDeleteHolesArgs = {
  where: Hole_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDeletePlayerArgs = {
  id: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootDeletePlayersArgs = {
  where: Player_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDeleteRoundArgs = {
  id: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootDeleteRoundsArgs = {
  where: Round_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDeleteScoreArgs = {
  holeNumber: Scalars['Int'];
  playerId: Scalars['Int'];
  roundId: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootDeleteScoresArgs = {
  where: Score_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Zz_LeaderboardArgs = {
  where: Zz_Leaderboard_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Zz_Leaderboard_By_PkArgs = {
  playerId: Scalars['Int'];
  roundId: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootInsertCourseArgs = {
  object: Course_Insert_Input;
  on_conflict?: Maybe<Course_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsertCoursesArgs = {
  objects: Array<Course_Insert_Input>;
  on_conflict?: Maybe<Course_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsertHoleArgs = {
  object: Hole_Insert_Input;
  on_conflict?: Maybe<Hole_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsertHolesArgs = {
  objects: Array<Hole_Insert_Input>;
  on_conflict?: Maybe<Hole_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsertPlayerArgs = {
  object: Player_Insert_Input;
  on_conflict?: Maybe<Player_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsertPlayersArgs = {
  objects: Array<Player_Insert_Input>;
  on_conflict?: Maybe<Player_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsertRoundArgs = {
  object: Round_Insert_Input;
  on_conflict?: Maybe<Round_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsertRoundsArgs = {
  objects: Array<Round_Insert_Input>;
  on_conflict?: Maybe<Round_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsertScoreArgs = {
  object: Score_Insert_Input;
  on_conflict?: Maybe<Score_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsertScoresArgs = {
  objects: Array<Score_Insert_Input>;
  on_conflict?: Maybe<Score_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Zz_LeaderboardArgs = {
  objects: Array<Zz_Leaderboard_Insert_Input>;
  on_conflict?: Maybe<Zz_Leaderboard_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Zz_Leaderboard_OneArgs = {
  object: Zz_Leaderboard_Insert_Input;
  on_conflict?: Maybe<Zz_Leaderboard_On_Conflict>;
};


/** mutation root */
export type Mutation_RootUpdateCourseArgs = {
  _inc?: Maybe<Course_Inc_Input>;
  _set?: Maybe<Course_Set_Input>;
  pk_columns: Course_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdateCoursesArgs = {
  _inc?: Maybe<Course_Inc_Input>;
  _set?: Maybe<Course_Set_Input>;
  where: Course_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdateHoleArgs = {
  _inc?: Maybe<Hole_Inc_Input>;
  _set?: Maybe<Hole_Set_Input>;
  pk_columns: Hole_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdateHolesArgs = {
  _inc?: Maybe<Hole_Inc_Input>;
  _set?: Maybe<Hole_Set_Input>;
  where: Hole_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdatePlayerArgs = {
  _inc?: Maybe<Player_Inc_Input>;
  _set?: Maybe<Player_Set_Input>;
  pk_columns: Player_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdatePlayersArgs = {
  _inc?: Maybe<Player_Inc_Input>;
  _set?: Maybe<Player_Set_Input>;
  where: Player_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdateRoundArgs = {
  _inc?: Maybe<Round_Inc_Input>;
  _set?: Maybe<Round_Set_Input>;
  pk_columns: Round_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdateRoundsArgs = {
  _inc?: Maybe<Round_Inc_Input>;
  _set?: Maybe<Round_Set_Input>;
  where: Round_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdateScoreArgs = {
  _inc?: Maybe<Score_Inc_Input>;
  _set?: Maybe<Score_Set_Input>;
  pk_columns: Score_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdateScoresArgs = {
  _inc?: Maybe<Score_Inc_Input>;
  _set?: Maybe<Score_Set_Input>;
  where: Score_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Zz_LeaderboardArgs = {
  _inc?: Maybe<Zz_Leaderboard_Inc_Input>;
  _set?: Maybe<Zz_Leaderboard_Set_Input>;
  where: Zz_Leaderboard_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Zz_Leaderboard_By_PkArgs = {
  _inc?: Maybe<Zz_Leaderboard_Inc_Input>;
  _set?: Maybe<Zz_Leaderboard_Set_Input>;
  pk_columns: Zz_Leaderboard_Pk_Columns_Input;
};


/** expression to compare columns of type numeric. All fields are combined with logical 'AND'. */
export type Numeric_Comparison_Exp = {
  _eq?: Maybe<Scalars['numeric']>;
  _gt?: Maybe<Scalars['numeric']>;
  _gte?: Maybe<Scalars['numeric']>;
  _in?: Maybe<Array<Scalars['numeric']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['numeric']>;
  _lte?: Maybe<Scalars['numeric']>;
  _neq?: Maybe<Scalars['numeric']>;
  _nin?: Maybe<Array<Scalars['numeric']>>;
};

/** column ordering options */
export enum Order_By {
  /** in the ascending order, nulls last */
  Asc = 'asc',
  /** in the ascending order, nulls first */
  AscNullsFirst = 'asc_nulls_first',
  /** in the ascending order, nulls last */
  AscNullsLast = 'asc_nulls_last',
  /** in the descending order, nulls first */
  Desc = 'desc',
  /** in the descending order, nulls first */
  DescNullsFirst = 'desc_nulls_first',
  /** in the descending order, nulls last */
  DescNullsLast = 'desc_nulls_last'
}

/** columns and relationships of "player" */
export type Player = {
  __typename?: 'player';
  email: Scalars['String'];
  firstName: Scalars['String'];
  /** A computed field, executes function "player_full_name" */
  fullName?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
  img?: Maybe<Scalars['String']>;
  lastName: Scalars['String'];
  nickname: Scalars['String'];
  /** An array relationship */
  playerRounds: Array<Player_Round>;
  /** An aggregated array relationship */
  playerRounds_aggregate: Player_Round_Aggregate;
  /** An array relationship */
  scores: Array<Score>;
  /** An aggregated array relationship */
  scores_aggregate: Score_Aggregate;
  slug: Scalars['String'];
};


/** columns and relationships of "player" */
export type PlayerPlayerRoundsArgs = {
  distinct_on?: Maybe<Array<Player_Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Round_Order_By>>;
  where?: Maybe<Player_Round_Bool_Exp>;
};


/** columns and relationships of "player" */
export type PlayerPlayerRounds_AggregateArgs = {
  distinct_on?: Maybe<Array<Player_Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Round_Order_By>>;
  where?: Maybe<Player_Round_Bool_Exp>;
};


/** columns and relationships of "player" */
export type PlayerScoresArgs = {
  distinct_on?: Maybe<Array<Score_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Score_Order_By>>;
  where?: Maybe<Score_Bool_Exp>;
};


/** columns and relationships of "player" */
export type PlayerScores_AggregateArgs = {
  distinct_on?: Maybe<Array<Score_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Score_Order_By>>;
  where?: Maybe<Score_Bool_Exp>;
};

/** aggregated selection of "player" */
export type Player_Aggregate = {
  __typename?: 'player_aggregate';
  aggregate?: Maybe<Player_Aggregate_Fields>;
  nodes: Array<Player>;
};

/** aggregate fields of "player" */
export type Player_Aggregate_Fields = {
  __typename?: 'player_aggregate_fields';
  avg?: Maybe<Player_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Player_Max_Fields>;
  min?: Maybe<Player_Min_Fields>;
  stddev?: Maybe<Player_Stddev_Fields>;
  stddev_pop?: Maybe<Player_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Player_Stddev_Samp_Fields>;
  sum?: Maybe<Player_Sum_Fields>;
  var_pop?: Maybe<Player_Var_Pop_Fields>;
  var_samp?: Maybe<Player_Var_Samp_Fields>;
  variance?: Maybe<Player_Variance_Fields>;
};


/** aggregate fields of "player" */
export type Player_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Player_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "player" */
export type Player_Aggregate_Order_By = {
  avg?: Maybe<Player_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Player_Max_Order_By>;
  min?: Maybe<Player_Min_Order_By>;
  stddev?: Maybe<Player_Stddev_Order_By>;
  stddev_pop?: Maybe<Player_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Player_Stddev_Samp_Order_By>;
  sum?: Maybe<Player_Sum_Order_By>;
  var_pop?: Maybe<Player_Var_Pop_Order_By>;
  var_samp?: Maybe<Player_Var_Samp_Order_By>;
  variance?: Maybe<Player_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "player" */
export type Player_Arr_Rel_Insert_Input = {
  data: Array<Player_Insert_Input>;
  on_conflict?: Maybe<Player_On_Conflict>;
};

/** aggregate avg on columns */
export type Player_Avg_Fields = {
  __typename?: 'player_avg_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "player" */
export type Player_Avg_Order_By = {
  id?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "player". All fields are combined with a logical 'AND'. */
export type Player_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Player_Bool_Exp>>>;
  _not?: Maybe<Player_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Player_Bool_Exp>>>;
  email?: Maybe<String_Comparison_Exp>;
  firstName?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  img?: Maybe<String_Comparison_Exp>;
  lastName?: Maybe<String_Comparison_Exp>;
  nickname?: Maybe<String_Comparison_Exp>;
  playerRounds?: Maybe<Player_Round_Bool_Exp>;
  scores?: Maybe<Score_Bool_Exp>;
  slug?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "player" */
export enum Player_Constraint {
  /** unique or primary key constraint */
  PlayersHandleKey = 'players_handle_key',
  /** unique or primary key constraint */
  PlayersIdKey = 'players_id_key',
  /** unique or primary key constraint */
  PlayersPkey = 'players_pkey'
}

/** input type for incrementing integer column in table "player" */
export type Player_Inc_Input = {
  id?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "player" */
export type Player_Insert_Input = {
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  img?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  scores?: Maybe<Score_Arr_Rel_Insert_Input>;
  slug?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Player_Max_Fields = {
  __typename?: 'player_max_fields';
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  img?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "player" */
export type Player_Max_Order_By = {
  email?: Maybe<Order_By>;
  firstName?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  img?: Maybe<Order_By>;
  lastName?: Maybe<Order_By>;
  nickname?: Maybe<Order_By>;
  slug?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Player_Min_Fields = {
  __typename?: 'player_min_fields';
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  img?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "player" */
export type Player_Min_Order_By = {
  email?: Maybe<Order_By>;
  firstName?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  img?: Maybe<Order_By>;
  lastName?: Maybe<Order_By>;
  nickname?: Maybe<Order_By>;
  slug?: Maybe<Order_By>;
};

/** response of any mutation on the table "player" */
export type Player_Mutation_Response = {
  __typename?: 'player_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Player>;
};

/** input type for inserting object relation for remote table "player" */
export type Player_Obj_Rel_Insert_Input = {
  data: Player_Insert_Input;
  on_conflict?: Maybe<Player_On_Conflict>;
};

/** on conflict condition type for table "player" */
export type Player_On_Conflict = {
  constraint: Player_Constraint;
  update_columns: Array<Player_Update_Column>;
  where?: Maybe<Player_Bool_Exp>;
};

/** ordering options when selecting data from "player" */
export type Player_Order_By = {
  email?: Maybe<Order_By>;
  firstName?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  img?: Maybe<Order_By>;
  lastName?: Maybe<Order_By>;
  nickname?: Maybe<Order_By>;
  playerRounds_aggregate?: Maybe<Player_Round_Aggregate_Order_By>;
  scores_aggregate?: Maybe<Score_Aggregate_Order_By>;
  slug?: Maybe<Order_By>;
};

/** primary key columns input for table: "player" */
export type Player_Pk_Columns_Input = {
  id: Scalars['Int'];
};

/** columns and relationships of "player_round" */
export type Player_Round = {
  __typename?: 'player_round';
  complete?: Maybe<Scalars['Boolean']>;
  /** An object relationship */
  course?: Maybe<Course>;
  courseId?: Maybe<Scalars['Int']>;
  par?: Maybe<Scalars['bigint']>;
  /** An object relationship */
  player?: Maybe<Player>;
  playerId?: Maybe<Scalars['Int']>;
  relativeScore?: Maybe<Scalars['bigint']>;
  /** An object relationship */
  round?: Maybe<Round>;
  roundBountyWinner?: Maybe<Scalars['Boolean']>;
  roundId?: Maybe<Scalars['Int']>;
  roundWinnings?: Maybe<Scalars['numeric']>;
  score?: Maybe<Scalars['bigint']>;
  /** An array relationship */
  scores: Array<Score>;
  /** An aggregated array relationship */
  scores_aggregate: Score_Aggregate;
  /** An array relationship */
  skins: Array<Skins>;
  skinsWinnings?: Maybe<Scalars['numeric']>;
  /** An aggregated array relationship */
  skins_aggregate: Skins_Aggregate;
  totalWinnings?: Maybe<Scalars['numeric']>;
};


/** columns and relationships of "player_round" */
export type Player_RoundScoresArgs = {
  distinct_on?: Maybe<Array<Score_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Score_Order_By>>;
  where?: Maybe<Score_Bool_Exp>;
};


/** columns and relationships of "player_round" */
export type Player_RoundScores_AggregateArgs = {
  distinct_on?: Maybe<Array<Score_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Score_Order_By>>;
  where?: Maybe<Score_Bool_Exp>;
};


/** columns and relationships of "player_round" */
export type Player_RoundSkinsArgs = {
  distinct_on?: Maybe<Array<Skins_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Skins_Order_By>>;
  where?: Maybe<Skins_Bool_Exp>;
};


/** columns and relationships of "player_round" */
export type Player_RoundSkins_AggregateArgs = {
  distinct_on?: Maybe<Array<Skins_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Skins_Order_By>>;
  where?: Maybe<Skins_Bool_Exp>;
};

/** aggregated selection of "player_round" */
export type Player_Round_Aggregate = {
  __typename?: 'player_round_aggregate';
  aggregate?: Maybe<Player_Round_Aggregate_Fields>;
  nodes: Array<Player_Round>;
};

/** aggregate fields of "player_round" */
export type Player_Round_Aggregate_Fields = {
  __typename?: 'player_round_aggregate_fields';
  avg?: Maybe<Player_Round_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Player_Round_Max_Fields>;
  min?: Maybe<Player_Round_Min_Fields>;
  stddev?: Maybe<Player_Round_Stddev_Fields>;
  stddev_pop?: Maybe<Player_Round_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Player_Round_Stddev_Samp_Fields>;
  sum?: Maybe<Player_Round_Sum_Fields>;
  var_pop?: Maybe<Player_Round_Var_Pop_Fields>;
  var_samp?: Maybe<Player_Round_Var_Samp_Fields>;
  variance?: Maybe<Player_Round_Variance_Fields>;
};


/** aggregate fields of "player_round" */
export type Player_Round_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Player_Round_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "player_round" */
export type Player_Round_Aggregate_Order_By = {
  avg?: Maybe<Player_Round_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Player_Round_Max_Order_By>;
  min?: Maybe<Player_Round_Min_Order_By>;
  stddev?: Maybe<Player_Round_Stddev_Order_By>;
  stddev_pop?: Maybe<Player_Round_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Player_Round_Stddev_Samp_Order_By>;
  sum?: Maybe<Player_Round_Sum_Order_By>;
  var_pop?: Maybe<Player_Round_Var_Pop_Order_By>;
  var_samp?: Maybe<Player_Round_Var_Samp_Order_By>;
  variance?: Maybe<Player_Round_Variance_Order_By>;
};

/** aggregate avg on columns */
export type Player_Round_Avg_Fields = {
  __typename?: 'player_round_avg_fields';
  courseId?: Maybe<Scalars['Float']>;
  par?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  relativeScore?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  roundWinnings?: Maybe<Scalars['Float']>;
  score?: Maybe<Scalars['Float']>;
  skinsWinnings?: Maybe<Scalars['Float']>;
  totalWinnings?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "player_round" */
export type Player_Round_Avg_Order_By = {
  courseId?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  roundWinnings?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
  skinsWinnings?: Maybe<Order_By>;
  totalWinnings?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "player_round". All fields are combined with a logical 'AND'. */
export type Player_Round_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Player_Round_Bool_Exp>>>;
  _not?: Maybe<Player_Round_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Player_Round_Bool_Exp>>>;
  complete?: Maybe<Boolean_Comparison_Exp>;
  course?: Maybe<Course_Bool_Exp>;
  courseId?: Maybe<Int_Comparison_Exp>;
  par?: Maybe<Bigint_Comparison_Exp>;
  player?: Maybe<Player_Bool_Exp>;
  playerId?: Maybe<Int_Comparison_Exp>;
  relativeScore?: Maybe<Bigint_Comparison_Exp>;
  round?: Maybe<Round_Bool_Exp>;
  roundBountyWinner?: Maybe<Boolean_Comparison_Exp>;
  roundId?: Maybe<Int_Comparison_Exp>;
  roundWinnings?: Maybe<Numeric_Comparison_Exp>;
  score?: Maybe<Bigint_Comparison_Exp>;
  scores?: Maybe<Score_Bool_Exp>;
  skins?: Maybe<Skins_Bool_Exp>;
  skinsWinnings?: Maybe<Numeric_Comparison_Exp>;
  totalWinnings?: Maybe<Numeric_Comparison_Exp>;
};

/** aggregate max on columns */
export type Player_Round_Max_Fields = {
  __typename?: 'player_round_max_fields';
  courseId?: Maybe<Scalars['Int']>;
  par?: Maybe<Scalars['bigint']>;
  playerId?: Maybe<Scalars['Int']>;
  relativeScore?: Maybe<Scalars['bigint']>;
  roundId?: Maybe<Scalars['Int']>;
  roundWinnings?: Maybe<Scalars['numeric']>;
  score?: Maybe<Scalars['bigint']>;
  skinsWinnings?: Maybe<Scalars['numeric']>;
  totalWinnings?: Maybe<Scalars['numeric']>;
};

/** order by max() on columns of table "player_round" */
export type Player_Round_Max_Order_By = {
  courseId?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  roundWinnings?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
  skinsWinnings?: Maybe<Order_By>;
  totalWinnings?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Player_Round_Min_Fields = {
  __typename?: 'player_round_min_fields';
  courseId?: Maybe<Scalars['Int']>;
  par?: Maybe<Scalars['bigint']>;
  playerId?: Maybe<Scalars['Int']>;
  relativeScore?: Maybe<Scalars['bigint']>;
  roundId?: Maybe<Scalars['Int']>;
  roundWinnings?: Maybe<Scalars['numeric']>;
  score?: Maybe<Scalars['bigint']>;
  skinsWinnings?: Maybe<Scalars['numeric']>;
  totalWinnings?: Maybe<Scalars['numeric']>;
};

/** order by min() on columns of table "player_round" */
export type Player_Round_Min_Order_By = {
  courseId?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  roundWinnings?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
  skinsWinnings?: Maybe<Order_By>;
  totalWinnings?: Maybe<Order_By>;
};

/** ordering options when selecting data from "player_round" */
export type Player_Round_Order_By = {
  complete?: Maybe<Order_By>;
  course?: Maybe<Course_Order_By>;
  courseId?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  player?: Maybe<Player_Order_By>;
  playerId?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  round?: Maybe<Round_Order_By>;
  roundBountyWinner?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  roundWinnings?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
  scores_aggregate?: Maybe<Score_Aggregate_Order_By>;
  skinsWinnings?: Maybe<Order_By>;
  skins_aggregate?: Maybe<Skins_Aggregate_Order_By>;
  totalWinnings?: Maybe<Order_By>;
};

/** select columns of table "player_round" */
export enum Player_Round_Select_Column {
  /** column name */
  Complete = 'complete',
  /** column name */
  CourseId = 'courseId',
  /** column name */
  Par = 'par',
  /** column name */
  PlayerId = 'playerId',
  /** column name */
  RelativeScore = 'relativeScore',
  /** column name */
  RoundBountyWinner = 'roundBountyWinner',
  /** column name */
  RoundId = 'roundId',
  /** column name */
  RoundWinnings = 'roundWinnings',
  /** column name */
  Score = 'score',
  /** column name */
  SkinsWinnings = 'skinsWinnings',
  /** column name */
  TotalWinnings = 'totalWinnings'
}

/** aggregate stddev on columns */
export type Player_Round_Stddev_Fields = {
  __typename?: 'player_round_stddev_fields';
  courseId?: Maybe<Scalars['Float']>;
  par?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  relativeScore?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  roundWinnings?: Maybe<Scalars['Float']>;
  score?: Maybe<Scalars['Float']>;
  skinsWinnings?: Maybe<Scalars['Float']>;
  totalWinnings?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "player_round" */
export type Player_Round_Stddev_Order_By = {
  courseId?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  roundWinnings?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
  skinsWinnings?: Maybe<Order_By>;
  totalWinnings?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Player_Round_Stddev_Pop_Fields = {
  __typename?: 'player_round_stddev_pop_fields';
  courseId?: Maybe<Scalars['Float']>;
  par?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  relativeScore?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  roundWinnings?: Maybe<Scalars['Float']>;
  score?: Maybe<Scalars['Float']>;
  skinsWinnings?: Maybe<Scalars['Float']>;
  totalWinnings?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "player_round" */
export type Player_Round_Stddev_Pop_Order_By = {
  courseId?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  roundWinnings?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
  skinsWinnings?: Maybe<Order_By>;
  totalWinnings?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Player_Round_Stddev_Samp_Fields = {
  __typename?: 'player_round_stddev_samp_fields';
  courseId?: Maybe<Scalars['Float']>;
  par?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  relativeScore?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  roundWinnings?: Maybe<Scalars['Float']>;
  score?: Maybe<Scalars['Float']>;
  skinsWinnings?: Maybe<Scalars['Float']>;
  totalWinnings?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "player_round" */
export type Player_Round_Stddev_Samp_Order_By = {
  courseId?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  roundWinnings?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
  skinsWinnings?: Maybe<Order_By>;
  totalWinnings?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Player_Round_Sum_Fields = {
  __typename?: 'player_round_sum_fields';
  courseId?: Maybe<Scalars['Int']>;
  par?: Maybe<Scalars['bigint']>;
  playerId?: Maybe<Scalars['Int']>;
  relativeScore?: Maybe<Scalars['bigint']>;
  roundId?: Maybe<Scalars['Int']>;
  roundWinnings?: Maybe<Scalars['numeric']>;
  score?: Maybe<Scalars['bigint']>;
  skinsWinnings?: Maybe<Scalars['numeric']>;
  totalWinnings?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "player_round" */
export type Player_Round_Sum_Order_By = {
  courseId?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  roundWinnings?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
  skinsWinnings?: Maybe<Order_By>;
  totalWinnings?: Maybe<Order_By>;
};

/** aggregate var_pop on columns */
export type Player_Round_Var_Pop_Fields = {
  __typename?: 'player_round_var_pop_fields';
  courseId?: Maybe<Scalars['Float']>;
  par?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  relativeScore?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  roundWinnings?: Maybe<Scalars['Float']>;
  score?: Maybe<Scalars['Float']>;
  skinsWinnings?: Maybe<Scalars['Float']>;
  totalWinnings?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "player_round" */
export type Player_Round_Var_Pop_Order_By = {
  courseId?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  roundWinnings?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
  skinsWinnings?: Maybe<Order_By>;
  totalWinnings?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Player_Round_Var_Samp_Fields = {
  __typename?: 'player_round_var_samp_fields';
  courseId?: Maybe<Scalars['Float']>;
  par?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  relativeScore?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  roundWinnings?: Maybe<Scalars['Float']>;
  score?: Maybe<Scalars['Float']>;
  skinsWinnings?: Maybe<Scalars['Float']>;
  totalWinnings?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "player_round" */
export type Player_Round_Var_Samp_Order_By = {
  courseId?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  roundWinnings?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
  skinsWinnings?: Maybe<Order_By>;
  totalWinnings?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Player_Round_Variance_Fields = {
  __typename?: 'player_round_variance_fields';
  courseId?: Maybe<Scalars['Float']>;
  par?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  relativeScore?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  roundWinnings?: Maybe<Scalars['Float']>;
  score?: Maybe<Scalars['Float']>;
  skinsWinnings?: Maybe<Scalars['Float']>;
  totalWinnings?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "player_round" */
export type Player_Round_Variance_Order_By = {
  courseId?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  roundWinnings?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
  skinsWinnings?: Maybe<Order_By>;
  totalWinnings?: Maybe<Order_By>;
};

/** select columns of table "player" */
export enum Player_Select_Column {
  /** column name */
  Email = 'email',
  /** column name */
  FirstName = 'firstName',
  /** column name */
  Id = 'id',
  /** column name */
  Img = 'img',
  /** column name */
  LastName = 'lastName',
  /** column name */
  Nickname = 'nickname',
  /** column name */
  Slug = 'slug'
}

/** input type for updating data in table "player" */
export type Player_Set_Input = {
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  img?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Player_Stddev_Fields = {
  __typename?: 'player_stddev_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "player" */
export type Player_Stddev_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Player_Stddev_Pop_Fields = {
  __typename?: 'player_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "player" */
export type Player_Stddev_Pop_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Player_Stddev_Samp_Fields = {
  __typename?: 'player_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "player" */
export type Player_Stddev_Samp_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Player_Sum_Fields = {
  __typename?: 'player_sum_fields';
  id?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "player" */
export type Player_Sum_Order_By = {
  id?: Maybe<Order_By>;
};

/** update columns of table "player" */
export enum Player_Update_Column {
  /** column name */
  Email = 'email',
  /** column name */
  FirstName = 'firstName',
  /** column name */
  Id = 'id',
  /** column name */
  Img = 'img',
  /** column name */
  LastName = 'lastName',
  /** column name */
  Nickname = 'nickname',
  /** column name */
  Slug = 'slug'
}

/** aggregate var_pop on columns */
export type Player_Var_Pop_Fields = {
  __typename?: 'player_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "player" */
export type Player_Var_Pop_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Player_Var_Samp_Fields = {
  __typename?: 'player_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "player" */
export type Player_Var_Samp_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Player_Variance_Fields = {
  __typename?: 'player_variance_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "player" */
export type Player_Variance_Order_By = {
  id?: Maybe<Order_By>;
};


/** expression to compare columns of type point. All fields are combined with logical 'AND'. */
export type Point_Comparison_Exp = {
  _eq?: Maybe<Scalars['point']>;
  _gt?: Maybe<Scalars['point']>;
  _gte?: Maybe<Scalars['point']>;
  _in?: Maybe<Array<Scalars['point']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['point']>;
  _lte?: Maybe<Scalars['point']>;
  _neq?: Maybe<Scalars['point']>;
  _nin?: Maybe<Array<Scalars['point']>>;
};

/** query root */
export type Query_Root = {
  __typename?: 'query_root';
  /** fetch data from the table: "course" using primary key columns */
  course?: Maybe<Course>;
  /** fetch aggregated fields from the table: "course" */
  courseStats: Course_Aggregate;
  /** fetch data from the table: "course" */
  courses: Array<Course>;
  /** fetch data from the table: "hole" using primary key columns */
  hole?: Maybe<Hole>;
  /** fetch aggregated fields from the table: "hole" */
  holeStats: Hole_Aggregate;
  /** fetch data from the table: "hole" */
  holes: Array<Hole>;
  /** execute function "leaderboard" which returns "zz_leaderboard" */
  leaderboard: Array<Zz_Leaderboard>;
  /** execute function "leaderboard" and query aggregates on result of table type "zz_leaderboard" */
  leaderboard_aggregate: Zz_Leaderboard_Aggregate;
  /** fetch data from the table: "player" using primary key columns */
  player?: Maybe<Player>;
  /** fetch aggregated fields from the table: "player_round" */
  playerRoundStats: Player_Round_Aggregate;
  /** fetch data from the table: "player_round" */
  playerRounds: Array<Player_Round>;
  /** fetch aggregated fields from the table: "player" */
  playerStats: Player_Aggregate;
  /** fetch data from the table: "player" */
  players: Array<Player>;
  /** fetch data from the table: "round" using primary key columns */
  round?: Maybe<Round>;
  /** fetch aggregated fields from the table: "round" */
  roundStats: Round_Aggregate;
  /** fetch data from the table: "round" */
  rounds: Array<Round>;
  /** fetch data from the table: "score" using primary key columns */
  score?: Maybe<Score>;
  /** fetch aggregated fields from the table: "score" */
  scoreStats: Score_Aggregate;
  /** fetch data from the table: "score" */
  scores: Array<Score>;
  /** fetch aggregated fields from the table: "skins" */
  skinStats: Skins_Aggregate;
  /** fetch data from the table: "skins" */
  skins: Array<Skins>;
  /** fetch data from the table: "zz_leaderboard" */
  zz_leaderboard: Array<Zz_Leaderboard>;
  /** fetch aggregated fields from the table: "zz_leaderboard" */
  zz_leaderboard_aggregate: Zz_Leaderboard_Aggregate;
  /** fetch data from the table: "zz_leaderboard" using primary key columns */
  zz_leaderboard_by_pk?: Maybe<Zz_Leaderboard>;
};


/** query root */
export type Query_RootCourseArgs = {
  id: Scalars['Int'];
};


/** query root */
export type Query_RootCourseStatsArgs = {
  distinct_on?: Maybe<Array<Course_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Course_Order_By>>;
  where?: Maybe<Course_Bool_Exp>;
};


/** query root */
export type Query_RootCoursesArgs = {
  distinct_on?: Maybe<Array<Course_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Course_Order_By>>;
  where?: Maybe<Course_Bool_Exp>;
};


/** query root */
export type Query_RootHoleArgs = {
  courseId: Scalars['Int'];
  number: Scalars['Int'];
};


/** query root */
export type Query_RootHoleStatsArgs = {
  distinct_on?: Maybe<Array<Hole_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Hole_Order_By>>;
  where?: Maybe<Hole_Bool_Exp>;
};


/** query root */
export type Query_RootHolesArgs = {
  distinct_on?: Maybe<Array<Hole_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Hole_Order_By>>;
  where?: Maybe<Hole_Bool_Exp>;
};


/** query root */
export type Query_RootLeaderboardArgs = {
  args: Leaderboard_Args;
  distinct_on?: Maybe<Array<Zz_Leaderboard_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Zz_Leaderboard_Order_By>>;
  where?: Maybe<Zz_Leaderboard_Bool_Exp>;
};


/** query root */
export type Query_RootLeaderboard_AggregateArgs = {
  args: Leaderboard_Args;
  distinct_on?: Maybe<Array<Zz_Leaderboard_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Zz_Leaderboard_Order_By>>;
  where?: Maybe<Zz_Leaderboard_Bool_Exp>;
};


/** query root */
export type Query_RootPlayerArgs = {
  id: Scalars['Int'];
};


/** query root */
export type Query_RootPlayerRoundStatsArgs = {
  distinct_on?: Maybe<Array<Player_Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Round_Order_By>>;
  where?: Maybe<Player_Round_Bool_Exp>;
};


/** query root */
export type Query_RootPlayerRoundsArgs = {
  distinct_on?: Maybe<Array<Player_Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Round_Order_By>>;
  where?: Maybe<Player_Round_Bool_Exp>;
};


/** query root */
export type Query_RootPlayerStatsArgs = {
  distinct_on?: Maybe<Array<Player_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Order_By>>;
  where?: Maybe<Player_Bool_Exp>;
};


/** query root */
export type Query_RootPlayersArgs = {
  distinct_on?: Maybe<Array<Player_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Order_By>>;
  where?: Maybe<Player_Bool_Exp>;
};


/** query root */
export type Query_RootRoundArgs = {
  id: Scalars['Int'];
};


/** query root */
export type Query_RootRoundStatsArgs = {
  distinct_on?: Maybe<Array<Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Round_Order_By>>;
  where?: Maybe<Round_Bool_Exp>;
};


/** query root */
export type Query_RootRoundsArgs = {
  distinct_on?: Maybe<Array<Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Round_Order_By>>;
  where?: Maybe<Round_Bool_Exp>;
};


/** query root */
export type Query_RootScoreArgs = {
  holeNumber: Scalars['Int'];
  playerId: Scalars['Int'];
  roundId: Scalars['Int'];
};


/** query root */
export type Query_RootScoreStatsArgs = {
  distinct_on?: Maybe<Array<Score_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Score_Order_By>>;
  where?: Maybe<Score_Bool_Exp>;
};


/** query root */
export type Query_RootScoresArgs = {
  distinct_on?: Maybe<Array<Score_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Score_Order_By>>;
  where?: Maybe<Score_Bool_Exp>;
};


/** query root */
export type Query_RootSkinStatsArgs = {
  distinct_on?: Maybe<Array<Skins_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Skins_Order_By>>;
  where?: Maybe<Skins_Bool_Exp>;
};


/** query root */
export type Query_RootSkinsArgs = {
  distinct_on?: Maybe<Array<Skins_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Skins_Order_By>>;
  where?: Maybe<Skins_Bool_Exp>;
};


/** query root */
export type Query_RootZz_LeaderboardArgs = {
  distinct_on?: Maybe<Array<Zz_Leaderboard_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Zz_Leaderboard_Order_By>>;
  where?: Maybe<Zz_Leaderboard_Bool_Exp>;
};


/** query root */
export type Query_RootZz_Leaderboard_AggregateArgs = {
  distinct_on?: Maybe<Array<Zz_Leaderboard_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Zz_Leaderboard_Order_By>>;
  where?: Maybe<Zz_Leaderboard_Bool_Exp>;
};


/** query root */
export type Query_RootZz_Leaderboard_By_PkArgs = {
  playerId: Scalars['Int'];
  roundId: Scalars['Int'];
};

/** columns and relationships of "round" */
export type Round = {
  __typename?: 'round';
  /** An object relationship */
  course: Course;
  courseId: Scalars['Int'];
  date: Scalars['timestamp'];
  id: Scalars['Int'];
  name?: Maybe<Scalars['String']>;
  /** An array relationship */
  playerRounds: Array<Player_Round>;
  /** An aggregated array relationship */
  playerRounds_aggregate: Player_Round_Aggregate;
  roundBounty?: Maybe<Scalars['numeric']>;
  roundBountyPlayerIds: Scalars['_int4'];
  roundBountyTiebreakWinnerId?: Maybe<Scalars['Int']>;
  /** An array relationship */
  scores: Array<Score>;
  /** An aggregated array relationship */
  scores_aggregate: Score_Aggregate;
  skinsHoleBounty?: Maybe<Scalars['numeric']>;
  skinsPlayerIds: Scalars['_int4'];
  /** An array relationship */
  skinsPlayers: Array<Player>;
  /** An aggregated array relationship */
  skinsPlayers_aggregate: Player_Aggregate;
  /** An object relationship */
  skinsTiebreakWinner?: Maybe<Player>;
  skinsTiebreakWinnerId?: Maybe<Scalars['Int']>;
};


/** columns and relationships of "round" */
export type RoundPlayerRoundsArgs = {
  distinct_on?: Maybe<Array<Player_Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Round_Order_By>>;
  where?: Maybe<Player_Round_Bool_Exp>;
};


/** columns and relationships of "round" */
export type RoundPlayerRounds_AggregateArgs = {
  distinct_on?: Maybe<Array<Player_Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Round_Order_By>>;
  where?: Maybe<Player_Round_Bool_Exp>;
};


/** columns and relationships of "round" */
export type RoundScoresArgs = {
  distinct_on?: Maybe<Array<Score_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Score_Order_By>>;
  where?: Maybe<Score_Bool_Exp>;
};


/** columns and relationships of "round" */
export type RoundScores_AggregateArgs = {
  distinct_on?: Maybe<Array<Score_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Score_Order_By>>;
  where?: Maybe<Score_Bool_Exp>;
};


/** columns and relationships of "round" */
export type RoundSkinsPlayersArgs = {
  distinct_on?: Maybe<Array<Player_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Order_By>>;
  where?: Maybe<Player_Bool_Exp>;
};


/** columns and relationships of "round" */
export type RoundSkinsPlayers_AggregateArgs = {
  distinct_on?: Maybe<Array<Player_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Order_By>>;
  where?: Maybe<Player_Bool_Exp>;
};

/** aggregated selection of "round" */
export type Round_Aggregate = {
  __typename?: 'round_aggregate';
  aggregate?: Maybe<Round_Aggregate_Fields>;
  nodes: Array<Round>;
};

/** aggregate fields of "round" */
export type Round_Aggregate_Fields = {
  __typename?: 'round_aggregate_fields';
  avg?: Maybe<Round_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Round_Max_Fields>;
  min?: Maybe<Round_Min_Fields>;
  stddev?: Maybe<Round_Stddev_Fields>;
  stddev_pop?: Maybe<Round_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Round_Stddev_Samp_Fields>;
  sum?: Maybe<Round_Sum_Fields>;
  var_pop?: Maybe<Round_Var_Pop_Fields>;
  var_samp?: Maybe<Round_Var_Samp_Fields>;
  variance?: Maybe<Round_Variance_Fields>;
};


/** aggregate fields of "round" */
export type Round_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Round_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "round" */
export type Round_Aggregate_Order_By = {
  avg?: Maybe<Round_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Round_Max_Order_By>;
  min?: Maybe<Round_Min_Order_By>;
  stddev?: Maybe<Round_Stddev_Order_By>;
  stddev_pop?: Maybe<Round_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Round_Stddev_Samp_Order_By>;
  sum?: Maybe<Round_Sum_Order_By>;
  var_pop?: Maybe<Round_Var_Pop_Order_By>;
  var_samp?: Maybe<Round_Var_Samp_Order_By>;
  variance?: Maybe<Round_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "round" */
export type Round_Arr_Rel_Insert_Input = {
  data: Array<Round_Insert_Input>;
  on_conflict?: Maybe<Round_On_Conflict>;
};

/** aggregate avg on columns */
export type Round_Avg_Fields = {
  __typename?: 'round_avg_fields';
  courseId?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  roundBounty?: Maybe<Scalars['Float']>;
  roundBountyTiebreakWinnerId?: Maybe<Scalars['Float']>;
  skinsHoleBounty?: Maybe<Scalars['Float']>;
  skinsTiebreakWinnerId?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "round" */
export type Round_Avg_Order_By = {
  courseId?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  roundBounty?: Maybe<Order_By>;
  roundBountyTiebreakWinnerId?: Maybe<Order_By>;
  skinsHoleBounty?: Maybe<Order_By>;
  skinsTiebreakWinnerId?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "round". All fields are combined with a logical 'AND'. */
export type Round_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Round_Bool_Exp>>>;
  _not?: Maybe<Round_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Round_Bool_Exp>>>;
  course?: Maybe<Course_Bool_Exp>;
  courseId?: Maybe<Int_Comparison_Exp>;
  date?: Maybe<Timestamp_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  playerRounds?: Maybe<Player_Round_Bool_Exp>;
  roundBounty?: Maybe<Numeric_Comparison_Exp>;
  roundBountyPlayerIds?: Maybe<_Int4_Comparison_Exp>;
  roundBountyTiebreakWinnerId?: Maybe<Int_Comparison_Exp>;
  scores?: Maybe<Score_Bool_Exp>;
  skinsHoleBounty?: Maybe<Numeric_Comparison_Exp>;
  skinsPlayerIds?: Maybe<_Int4_Comparison_Exp>;
  skinsPlayers?: Maybe<Player_Bool_Exp>;
  skinsTiebreakWinner?: Maybe<Player_Bool_Exp>;
  skinsTiebreakWinnerId?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "round" */
export enum Round_Constraint {
  /** unique or primary key constraint */
  RoundsPkey = 'Rounds_pkey'
}

/** input type for incrementing integer column in table "round" */
export type Round_Inc_Input = {
  courseId?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  roundBounty?: Maybe<Scalars['numeric']>;
  roundBountyTiebreakWinnerId?: Maybe<Scalars['Int']>;
  skinsHoleBounty?: Maybe<Scalars['numeric']>;
  skinsTiebreakWinnerId?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "round" */
export type Round_Insert_Input = {
  course?: Maybe<Course_Obj_Rel_Insert_Input>;
  courseId?: Maybe<Scalars['Int']>;
  date?: Maybe<Scalars['timestamp']>;
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  roundBounty?: Maybe<Scalars['numeric']>;
  roundBountyPlayerIds?: Maybe<Scalars['_int4']>;
  roundBountyTiebreakWinnerId?: Maybe<Scalars['Int']>;
  scores?: Maybe<Score_Arr_Rel_Insert_Input>;
  skinsHoleBounty?: Maybe<Scalars['numeric']>;
  skinsPlayerIds?: Maybe<Scalars['_int4']>;
  skinsPlayers?: Maybe<Player_Arr_Rel_Insert_Input>;
  skinsTiebreakWinner?: Maybe<Player_Obj_Rel_Insert_Input>;
  skinsTiebreakWinnerId?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type Round_Max_Fields = {
  __typename?: 'round_max_fields';
  courseId?: Maybe<Scalars['Int']>;
  date?: Maybe<Scalars['timestamp']>;
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  roundBounty?: Maybe<Scalars['numeric']>;
  roundBountyTiebreakWinnerId?: Maybe<Scalars['Int']>;
  skinsHoleBounty?: Maybe<Scalars['numeric']>;
  skinsTiebreakWinnerId?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "round" */
export type Round_Max_Order_By = {
  courseId?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  roundBounty?: Maybe<Order_By>;
  roundBountyTiebreakWinnerId?: Maybe<Order_By>;
  skinsHoleBounty?: Maybe<Order_By>;
  skinsTiebreakWinnerId?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Round_Min_Fields = {
  __typename?: 'round_min_fields';
  courseId?: Maybe<Scalars['Int']>;
  date?: Maybe<Scalars['timestamp']>;
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  roundBounty?: Maybe<Scalars['numeric']>;
  roundBountyTiebreakWinnerId?: Maybe<Scalars['Int']>;
  skinsHoleBounty?: Maybe<Scalars['numeric']>;
  skinsTiebreakWinnerId?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "round" */
export type Round_Min_Order_By = {
  courseId?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  roundBounty?: Maybe<Order_By>;
  roundBountyTiebreakWinnerId?: Maybe<Order_By>;
  skinsHoleBounty?: Maybe<Order_By>;
  skinsTiebreakWinnerId?: Maybe<Order_By>;
};

/** response of any mutation on the table "round" */
export type Round_Mutation_Response = {
  __typename?: 'round_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Round>;
};

/** input type for inserting object relation for remote table "round" */
export type Round_Obj_Rel_Insert_Input = {
  data: Round_Insert_Input;
  on_conflict?: Maybe<Round_On_Conflict>;
};

/** on conflict condition type for table "round" */
export type Round_On_Conflict = {
  constraint: Round_Constraint;
  update_columns: Array<Round_Update_Column>;
  where?: Maybe<Round_Bool_Exp>;
};

/** ordering options when selecting data from "round" */
export type Round_Order_By = {
  course?: Maybe<Course_Order_By>;
  courseId?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  playerRounds_aggregate?: Maybe<Player_Round_Aggregate_Order_By>;
  roundBounty?: Maybe<Order_By>;
  roundBountyPlayerIds?: Maybe<Order_By>;
  roundBountyTiebreakWinnerId?: Maybe<Order_By>;
  scores_aggregate?: Maybe<Score_Aggregate_Order_By>;
  skinsHoleBounty?: Maybe<Order_By>;
  skinsPlayerIds?: Maybe<Order_By>;
  skinsPlayers_aggregate?: Maybe<Player_Aggregate_Order_By>;
  skinsTiebreakWinner?: Maybe<Player_Order_By>;
  skinsTiebreakWinnerId?: Maybe<Order_By>;
};

/** primary key columns input for table: "round" */
export type Round_Pk_Columns_Input = {
  id: Scalars['Int'];
};

/** select columns of table "round" */
export enum Round_Select_Column {
  /** column name */
  CourseId = 'courseId',
  /** column name */
  Date = 'date',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  RoundBounty = 'roundBounty',
  /** column name */
  RoundBountyPlayerIds = 'roundBountyPlayerIds',
  /** column name */
  RoundBountyTiebreakWinnerId = 'roundBountyTiebreakWinnerId',
  /** column name */
  SkinsHoleBounty = 'skinsHoleBounty',
  /** column name */
  SkinsPlayerIds = 'skinsPlayerIds',
  /** column name */
  SkinsTiebreakWinnerId = 'skinsTiebreakWinnerId'
}

/** input type for updating data in table "round" */
export type Round_Set_Input = {
  courseId?: Maybe<Scalars['Int']>;
  date?: Maybe<Scalars['timestamp']>;
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  roundBounty?: Maybe<Scalars['numeric']>;
  roundBountyPlayerIds?: Maybe<Scalars['_int4']>;
  roundBountyTiebreakWinnerId?: Maybe<Scalars['Int']>;
  skinsHoleBounty?: Maybe<Scalars['numeric']>;
  skinsPlayerIds?: Maybe<Scalars['_int4']>;
  skinsTiebreakWinnerId?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type Round_Stddev_Fields = {
  __typename?: 'round_stddev_fields';
  courseId?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  roundBounty?: Maybe<Scalars['Float']>;
  roundBountyTiebreakWinnerId?: Maybe<Scalars['Float']>;
  skinsHoleBounty?: Maybe<Scalars['Float']>;
  skinsTiebreakWinnerId?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "round" */
export type Round_Stddev_Order_By = {
  courseId?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  roundBounty?: Maybe<Order_By>;
  roundBountyTiebreakWinnerId?: Maybe<Order_By>;
  skinsHoleBounty?: Maybe<Order_By>;
  skinsTiebreakWinnerId?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Round_Stddev_Pop_Fields = {
  __typename?: 'round_stddev_pop_fields';
  courseId?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  roundBounty?: Maybe<Scalars['Float']>;
  roundBountyTiebreakWinnerId?: Maybe<Scalars['Float']>;
  skinsHoleBounty?: Maybe<Scalars['Float']>;
  skinsTiebreakWinnerId?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "round" */
export type Round_Stddev_Pop_Order_By = {
  courseId?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  roundBounty?: Maybe<Order_By>;
  roundBountyTiebreakWinnerId?: Maybe<Order_By>;
  skinsHoleBounty?: Maybe<Order_By>;
  skinsTiebreakWinnerId?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Round_Stddev_Samp_Fields = {
  __typename?: 'round_stddev_samp_fields';
  courseId?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  roundBounty?: Maybe<Scalars['Float']>;
  roundBountyTiebreakWinnerId?: Maybe<Scalars['Float']>;
  skinsHoleBounty?: Maybe<Scalars['Float']>;
  skinsTiebreakWinnerId?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "round" */
export type Round_Stddev_Samp_Order_By = {
  courseId?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  roundBounty?: Maybe<Order_By>;
  roundBountyTiebreakWinnerId?: Maybe<Order_By>;
  skinsHoleBounty?: Maybe<Order_By>;
  skinsTiebreakWinnerId?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Round_Sum_Fields = {
  __typename?: 'round_sum_fields';
  courseId?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  roundBounty?: Maybe<Scalars['numeric']>;
  roundBountyTiebreakWinnerId?: Maybe<Scalars['Int']>;
  skinsHoleBounty?: Maybe<Scalars['numeric']>;
  skinsTiebreakWinnerId?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "round" */
export type Round_Sum_Order_By = {
  courseId?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  roundBounty?: Maybe<Order_By>;
  roundBountyTiebreakWinnerId?: Maybe<Order_By>;
  skinsHoleBounty?: Maybe<Order_By>;
  skinsTiebreakWinnerId?: Maybe<Order_By>;
};

/** update columns of table "round" */
export enum Round_Update_Column {
  /** column name */
  CourseId = 'courseId',
  /** column name */
  Date = 'date',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  RoundBounty = 'roundBounty',
  /** column name */
  RoundBountyPlayerIds = 'roundBountyPlayerIds',
  /** column name */
  RoundBountyTiebreakWinnerId = 'roundBountyTiebreakWinnerId',
  /** column name */
  SkinsHoleBounty = 'skinsHoleBounty',
  /** column name */
  SkinsPlayerIds = 'skinsPlayerIds',
  /** column name */
  SkinsTiebreakWinnerId = 'skinsTiebreakWinnerId'
}

/** aggregate var_pop on columns */
export type Round_Var_Pop_Fields = {
  __typename?: 'round_var_pop_fields';
  courseId?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  roundBounty?: Maybe<Scalars['Float']>;
  roundBountyTiebreakWinnerId?: Maybe<Scalars['Float']>;
  skinsHoleBounty?: Maybe<Scalars['Float']>;
  skinsTiebreakWinnerId?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "round" */
export type Round_Var_Pop_Order_By = {
  courseId?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  roundBounty?: Maybe<Order_By>;
  roundBountyTiebreakWinnerId?: Maybe<Order_By>;
  skinsHoleBounty?: Maybe<Order_By>;
  skinsTiebreakWinnerId?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Round_Var_Samp_Fields = {
  __typename?: 'round_var_samp_fields';
  courseId?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  roundBounty?: Maybe<Scalars['Float']>;
  roundBountyTiebreakWinnerId?: Maybe<Scalars['Float']>;
  skinsHoleBounty?: Maybe<Scalars['Float']>;
  skinsTiebreakWinnerId?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "round" */
export type Round_Var_Samp_Order_By = {
  courseId?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  roundBounty?: Maybe<Order_By>;
  roundBountyTiebreakWinnerId?: Maybe<Order_By>;
  skinsHoleBounty?: Maybe<Order_By>;
  skinsTiebreakWinnerId?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Round_Variance_Fields = {
  __typename?: 'round_variance_fields';
  courseId?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  roundBounty?: Maybe<Scalars['Float']>;
  roundBountyTiebreakWinnerId?: Maybe<Scalars['Float']>;
  skinsHoleBounty?: Maybe<Scalars['Float']>;
  skinsTiebreakWinnerId?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "round" */
export type Round_Variance_Order_By = {
  courseId?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  roundBounty?: Maybe<Order_By>;
  roundBountyTiebreakWinnerId?: Maybe<Order_By>;
  skinsHoleBounty?: Maybe<Order_By>;
  skinsTiebreakWinnerId?: Maybe<Order_By>;
};

/** columns and relationships of "score" */
export type Score = {
  __typename?: 'score';
  /** An object relationship */
  course: Course;
  courseId: Scalars['Int'];
  /** An object relationship */
  hole?: Maybe<Hole>;
  holeNumber: Scalars['Int'];
  /** An object relationship */
  player: Player;
  playerId: Scalars['Int'];
  putts?: Maybe<Scalars['Int']>;
  /** A computed field, executes function "relative_score_for_hole" */
  relativeScore?: Maybe<Scalars['Int']>;
  /** An object relationship */
  round: Round;
  roundId: Scalars['Int'];
  score: Scalars['Int'];
};

/** aggregated selection of "score" */
export type Score_Aggregate = {
  __typename?: 'score_aggregate';
  aggregate?: Maybe<Score_Aggregate_Fields>;
  nodes: Array<Score>;
};

/** aggregate fields of "score" */
export type Score_Aggregate_Fields = {
  __typename?: 'score_aggregate_fields';
  avg?: Maybe<Score_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Score_Max_Fields>;
  min?: Maybe<Score_Min_Fields>;
  stddev?: Maybe<Score_Stddev_Fields>;
  stddev_pop?: Maybe<Score_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Score_Stddev_Samp_Fields>;
  sum?: Maybe<Score_Sum_Fields>;
  var_pop?: Maybe<Score_Var_Pop_Fields>;
  var_samp?: Maybe<Score_Var_Samp_Fields>;
  variance?: Maybe<Score_Variance_Fields>;
};


/** aggregate fields of "score" */
export type Score_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Score_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "score" */
export type Score_Aggregate_Order_By = {
  avg?: Maybe<Score_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Score_Max_Order_By>;
  min?: Maybe<Score_Min_Order_By>;
  stddev?: Maybe<Score_Stddev_Order_By>;
  stddev_pop?: Maybe<Score_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Score_Stddev_Samp_Order_By>;
  sum?: Maybe<Score_Sum_Order_By>;
  var_pop?: Maybe<Score_Var_Pop_Order_By>;
  var_samp?: Maybe<Score_Var_Samp_Order_By>;
  variance?: Maybe<Score_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "score" */
export type Score_Arr_Rel_Insert_Input = {
  data: Array<Score_Insert_Input>;
  on_conflict?: Maybe<Score_On_Conflict>;
};

/** aggregate avg on columns */
export type Score_Avg_Fields = {
  __typename?: 'score_avg_fields';
  courseId?: Maybe<Scalars['Float']>;
  holeNumber?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  putts?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  score?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "score" */
export type Score_Avg_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  putts?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "score". All fields are combined with a logical 'AND'. */
export type Score_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Score_Bool_Exp>>>;
  _not?: Maybe<Score_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Score_Bool_Exp>>>;
  course?: Maybe<Course_Bool_Exp>;
  courseId?: Maybe<Int_Comparison_Exp>;
  hole?: Maybe<Hole_Bool_Exp>;
  holeNumber?: Maybe<Int_Comparison_Exp>;
  player?: Maybe<Player_Bool_Exp>;
  playerId?: Maybe<Int_Comparison_Exp>;
  putts?: Maybe<Int_Comparison_Exp>;
  round?: Maybe<Round_Bool_Exp>;
  roundId?: Maybe<Int_Comparison_Exp>;
  score?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "score" */
export enum Score_Constraint {
  /** unique or primary key constraint */
  ScorePkey = 'score_pkey'
}

/** input type for incrementing integer column in table "score" */
export type Score_Inc_Input = {
  courseId?: Maybe<Scalars['Int']>;
  holeNumber?: Maybe<Scalars['Int']>;
  playerId?: Maybe<Scalars['Int']>;
  putts?: Maybe<Scalars['Int']>;
  roundId?: Maybe<Scalars['Int']>;
  score?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "score" */
export type Score_Insert_Input = {
  course?: Maybe<Course_Obj_Rel_Insert_Input>;
  courseId?: Maybe<Scalars['Int']>;
  hole?: Maybe<Hole_Obj_Rel_Insert_Input>;
  holeNumber?: Maybe<Scalars['Int']>;
  player?: Maybe<Player_Obj_Rel_Insert_Input>;
  playerId?: Maybe<Scalars['Int']>;
  putts?: Maybe<Scalars['Int']>;
  round?: Maybe<Round_Obj_Rel_Insert_Input>;
  roundId?: Maybe<Scalars['Int']>;
  score?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type Score_Max_Fields = {
  __typename?: 'score_max_fields';
  courseId?: Maybe<Scalars['Int']>;
  holeNumber?: Maybe<Scalars['Int']>;
  playerId?: Maybe<Scalars['Int']>;
  putts?: Maybe<Scalars['Int']>;
  roundId?: Maybe<Scalars['Int']>;
  score?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "score" */
export type Score_Max_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  putts?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Score_Min_Fields = {
  __typename?: 'score_min_fields';
  courseId?: Maybe<Scalars['Int']>;
  holeNumber?: Maybe<Scalars['Int']>;
  playerId?: Maybe<Scalars['Int']>;
  putts?: Maybe<Scalars['Int']>;
  roundId?: Maybe<Scalars['Int']>;
  score?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "score" */
export type Score_Min_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  putts?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
};

/** response of any mutation on the table "score" */
export type Score_Mutation_Response = {
  __typename?: 'score_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Score>;
};

/** input type for inserting object relation for remote table "score" */
export type Score_Obj_Rel_Insert_Input = {
  data: Score_Insert_Input;
  on_conflict?: Maybe<Score_On_Conflict>;
};

/** on conflict condition type for table "score" */
export type Score_On_Conflict = {
  constraint: Score_Constraint;
  update_columns: Array<Score_Update_Column>;
  where?: Maybe<Score_Bool_Exp>;
};

/** ordering options when selecting data from "score" */
export type Score_Order_By = {
  course?: Maybe<Course_Order_By>;
  courseId?: Maybe<Order_By>;
  hole?: Maybe<Hole_Order_By>;
  holeNumber?: Maybe<Order_By>;
  player?: Maybe<Player_Order_By>;
  playerId?: Maybe<Order_By>;
  putts?: Maybe<Order_By>;
  round?: Maybe<Round_Order_By>;
  roundId?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
};

/** primary key columns input for table: "score" */
export type Score_Pk_Columns_Input = {
  holeNumber: Scalars['Int'];
  playerId: Scalars['Int'];
  roundId: Scalars['Int'];
};

/** select columns of table "score" */
export enum Score_Select_Column {
  /** column name */
  CourseId = 'courseId',
  /** column name */
  HoleNumber = 'holeNumber',
  /** column name */
  PlayerId = 'playerId',
  /** column name */
  Putts = 'putts',
  /** column name */
  RoundId = 'roundId',
  /** column name */
  Score = 'score'
}

/** input type for updating data in table "score" */
export type Score_Set_Input = {
  courseId?: Maybe<Scalars['Int']>;
  holeNumber?: Maybe<Scalars['Int']>;
  playerId?: Maybe<Scalars['Int']>;
  putts?: Maybe<Scalars['Int']>;
  roundId?: Maybe<Scalars['Int']>;
  score?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type Score_Stddev_Fields = {
  __typename?: 'score_stddev_fields';
  courseId?: Maybe<Scalars['Float']>;
  holeNumber?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  putts?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  score?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "score" */
export type Score_Stddev_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  putts?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Score_Stddev_Pop_Fields = {
  __typename?: 'score_stddev_pop_fields';
  courseId?: Maybe<Scalars['Float']>;
  holeNumber?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  putts?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  score?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "score" */
export type Score_Stddev_Pop_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  putts?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Score_Stddev_Samp_Fields = {
  __typename?: 'score_stddev_samp_fields';
  courseId?: Maybe<Scalars['Float']>;
  holeNumber?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  putts?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  score?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "score" */
export type Score_Stddev_Samp_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  putts?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Score_Sum_Fields = {
  __typename?: 'score_sum_fields';
  courseId?: Maybe<Scalars['Int']>;
  holeNumber?: Maybe<Scalars['Int']>;
  playerId?: Maybe<Scalars['Int']>;
  putts?: Maybe<Scalars['Int']>;
  roundId?: Maybe<Scalars['Int']>;
  score?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "score" */
export type Score_Sum_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  putts?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
};

/** update columns of table "score" */
export enum Score_Update_Column {
  /** column name */
  CourseId = 'courseId',
  /** column name */
  HoleNumber = 'holeNumber',
  /** column name */
  PlayerId = 'playerId',
  /** column name */
  Putts = 'putts',
  /** column name */
  RoundId = 'roundId',
  /** column name */
  Score = 'score'
}

/** aggregate var_pop on columns */
export type Score_Var_Pop_Fields = {
  __typename?: 'score_var_pop_fields';
  courseId?: Maybe<Scalars['Float']>;
  holeNumber?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  putts?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  score?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "score" */
export type Score_Var_Pop_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  putts?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Score_Var_Samp_Fields = {
  __typename?: 'score_var_samp_fields';
  courseId?: Maybe<Scalars['Float']>;
  holeNumber?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  putts?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  score?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "score" */
export type Score_Var_Samp_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  putts?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Score_Variance_Fields = {
  __typename?: 'score_variance_fields';
  courseId?: Maybe<Scalars['Float']>;
  holeNumber?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  putts?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  score?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "score" */
export type Score_Variance_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  putts?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
};

/** columns and relationships of "skins" */
export type Skins = {
  __typename?: 'skins';
  holeNumber?: Maybe<Scalars['Int']>;
  multiple?: Maybe<Scalars['Int']>;
  playerCount?: Maybe<Scalars['bigint']>;
  playerId?: Maybe<Scalars['Int']>;
  roundId?: Maybe<Scalars['Int']>;
  winnings?: Maybe<Scalars['numeric']>;
  won?: Maybe<Scalars['Boolean']>;
};

/** aggregated selection of "skins" */
export type Skins_Aggregate = {
  __typename?: 'skins_aggregate';
  aggregate?: Maybe<Skins_Aggregate_Fields>;
  nodes: Array<Skins>;
};

/** aggregate fields of "skins" */
export type Skins_Aggregate_Fields = {
  __typename?: 'skins_aggregate_fields';
  avg?: Maybe<Skins_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Skins_Max_Fields>;
  min?: Maybe<Skins_Min_Fields>;
  stddev?: Maybe<Skins_Stddev_Fields>;
  stddev_pop?: Maybe<Skins_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Skins_Stddev_Samp_Fields>;
  sum?: Maybe<Skins_Sum_Fields>;
  var_pop?: Maybe<Skins_Var_Pop_Fields>;
  var_samp?: Maybe<Skins_Var_Samp_Fields>;
  variance?: Maybe<Skins_Variance_Fields>;
};


/** aggregate fields of "skins" */
export type Skins_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Skins_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "skins" */
export type Skins_Aggregate_Order_By = {
  avg?: Maybe<Skins_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Skins_Max_Order_By>;
  min?: Maybe<Skins_Min_Order_By>;
  stddev?: Maybe<Skins_Stddev_Order_By>;
  stddev_pop?: Maybe<Skins_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Skins_Stddev_Samp_Order_By>;
  sum?: Maybe<Skins_Sum_Order_By>;
  var_pop?: Maybe<Skins_Var_Pop_Order_By>;
  var_samp?: Maybe<Skins_Var_Samp_Order_By>;
  variance?: Maybe<Skins_Variance_Order_By>;
};

/** aggregate avg on columns */
export type Skins_Avg_Fields = {
  __typename?: 'skins_avg_fields';
  holeNumber?: Maybe<Scalars['Float']>;
  multiple?: Maybe<Scalars['Float']>;
  playerCount?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  winnings?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "skins" */
export type Skins_Avg_Order_By = {
  holeNumber?: Maybe<Order_By>;
  multiple?: Maybe<Order_By>;
  playerCount?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  winnings?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "skins". All fields are combined with a logical 'AND'. */
export type Skins_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Skins_Bool_Exp>>>;
  _not?: Maybe<Skins_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Skins_Bool_Exp>>>;
  holeNumber?: Maybe<Int_Comparison_Exp>;
  multiple?: Maybe<Int_Comparison_Exp>;
  playerCount?: Maybe<Bigint_Comparison_Exp>;
  playerId?: Maybe<Int_Comparison_Exp>;
  roundId?: Maybe<Int_Comparison_Exp>;
  winnings?: Maybe<Numeric_Comparison_Exp>;
  won?: Maybe<Boolean_Comparison_Exp>;
};

/** aggregate max on columns */
export type Skins_Max_Fields = {
  __typename?: 'skins_max_fields';
  holeNumber?: Maybe<Scalars['Int']>;
  multiple?: Maybe<Scalars['Int']>;
  playerCount?: Maybe<Scalars['bigint']>;
  playerId?: Maybe<Scalars['Int']>;
  roundId?: Maybe<Scalars['Int']>;
  winnings?: Maybe<Scalars['numeric']>;
};

/** order by max() on columns of table "skins" */
export type Skins_Max_Order_By = {
  holeNumber?: Maybe<Order_By>;
  multiple?: Maybe<Order_By>;
  playerCount?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  winnings?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Skins_Min_Fields = {
  __typename?: 'skins_min_fields';
  holeNumber?: Maybe<Scalars['Int']>;
  multiple?: Maybe<Scalars['Int']>;
  playerCount?: Maybe<Scalars['bigint']>;
  playerId?: Maybe<Scalars['Int']>;
  roundId?: Maybe<Scalars['Int']>;
  winnings?: Maybe<Scalars['numeric']>;
};

/** order by min() on columns of table "skins" */
export type Skins_Min_Order_By = {
  holeNumber?: Maybe<Order_By>;
  multiple?: Maybe<Order_By>;
  playerCount?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  winnings?: Maybe<Order_By>;
};

/** ordering options when selecting data from "skins" */
export type Skins_Order_By = {
  holeNumber?: Maybe<Order_By>;
  multiple?: Maybe<Order_By>;
  playerCount?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  winnings?: Maybe<Order_By>;
  won?: Maybe<Order_By>;
};

/** select columns of table "skins" */
export enum Skins_Select_Column {
  /** column name */
  HoleNumber = 'holeNumber',
  /** column name */
  Multiple = 'multiple',
  /** column name */
  PlayerCount = 'playerCount',
  /** column name */
  PlayerId = 'playerId',
  /** column name */
  RoundId = 'roundId',
  /** column name */
  Winnings = 'winnings',
  /** column name */
  Won = 'won'
}

/** aggregate stddev on columns */
export type Skins_Stddev_Fields = {
  __typename?: 'skins_stddev_fields';
  holeNumber?: Maybe<Scalars['Float']>;
  multiple?: Maybe<Scalars['Float']>;
  playerCount?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  winnings?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "skins" */
export type Skins_Stddev_Order_By = {
  holeNumber?: Maybe<Order_By>;
  multiple?: Maybe<Order_By>;
  playerCount?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  winnings?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Skins_Stddev_Pop_Fields = {
  __typename?: 'skins_stddev_pop_fields';
  holeNumber?: Maybe<Scalars['Float']>;
  multiple?: Maybe<Scalars['Float']>;
  playerCount?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  winnings?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "skins" */
export type Skins_Stddev_Pop_Order_By = {
  holeNumber?: Maybe<Order_By>;
  multiple?: Maybe<Order_By>;
  playerCount?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  winnings?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Skins_Stddev_Samp_Fields = {
  __typename?: 'skins_stddev_samp_fields';
  holeNumber?: Maybe<Scalars['Float']>;
  multiple?: Maybe<Scalars['Float']>;
  playerCount?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  winnings?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "skins" */
export type Skins_Stddev_Samp_Order_By = {
  holeNumber?: Maybe<Order_By>;
  multiple?: Maybe<Order_By>;
  playerCount?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  winnings?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Skins_Sum_Fields = {
  __typename?: 'skins_sum_fields';
  holeNumber?: Maybe<Scalars['Int']>;
  multiple?: Maybe<Scalars['Int']>;
  playerCount?: Maybe<Scalars['bigint']>;
  playerId?: Maybe<Scalars['Int']>;
  roundId?: Maybe<Scalars['Int']>;
  winnings?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "skins" */
export type Skins_Sum_Order_By = {
  holeNumber?: Maybe<Order_By>;
  multiple?: Maybe<Order_By>;
  playerCount?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  winnings?: Maybe<Order_By>;
};

/** aggregate var_pop on columns */
export type Skins_Var_Pop_Fields = {
  __typename?: 'skins_var_pop_fields';
  holeNumber?: Maybe<Scalars['Float']>;
  multiple?: Maybe<Scalars['Float']>;
  playerCount?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  winnings?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "skins" */
export type Skins_Var_Pop_Order_By = {
  holeNumber?: Maybe<Order_By>;
  multiple?: Maybe<Order_By>;
  playerCount?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  winnings?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Skins_Var_Samp_Fields = {
  __typename?: 'skins_var_samp_fields';
  holeNumber?: Maybe<Scalars['Float']>;
  multiple?: Maybe<Scalars['Float']>;
  playerCount?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  winnings?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "skins" */
export type Skins_Var_Samp_Order_By = {
  holeNumber?: Maybe<Order_By>;
  multiple?: Maybe<Order_By>;
  playerCount?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  winnings?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Skins_Variance_Fields = {
  __typename?: 'skins_variance_fields';
  holeNumber?: Maybe<Scalars['Float']>;
  multiple?: Maybe<Scalars['Float']>;
  playerCount?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  winnings?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "skins" */
export type Skins_Variance_Order_By = {
  holeNumber?: Maybe<Order_By>;
  multiple?: Maybe<Order_By>;
  playerCount?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  winnings?: Maybe<Order_By>;
};

/** subscription root */
export type Subscription_Root = {
  __typename?: 'subscription_root';
  /** fetch data from the table: "course" using primary key columns */
  course?: Maybe<Course>;
  /** fetch aggregated fields from the table: "course" */
  courseStats: Course_Aggregate;
  /** fetch data from the table: "course" */
  courses: Array<Course>;
  /** fetch data from the table: "hole" using primary key columns */
  hole?: Maybe<Hole>;
  /** fetch aggregated fields from the table: "hole" */
  holeStats: Hole_Aggregate;
  /** fetch data from the table: "hole" */
  holes: Array<Hole>;
  /** execute function "leaderboard" which returns "zz_leaderboard" */
  leaderboard: Array<Zz_Leaderboard>;
  /** execute function "leaderboard" and query aggregates on result of table type "zz_leaderboard" */
  leaderboard_aggregate: Zz_Leaderboard_Aggregate;
  /** fetch data from the table: "player" using primary key columns */
  player?: Maybe<Player>;
  /** fetch aggregated fields from the table: "player_round" */
  playerRoundStats: Player_Round_Aggregate;
  /** fetch data from the table: "player_round" */
  playerRounds: Array<Player_Round>;
  /** fetch aggregated fields from the table: "player" */
  playerStats: Player_Aggregate;
  /** fetch data from the table: "player" */
  players: Array<Player>;
  /** fetch data from the table: "round" using primary key columns */
  round?: Maybe<Round>;
  /** fetch aggregated fields from the table: "round" */
  roundStats: Round_Aggregate;
  /** fetch data from the table: "round" */
  rounds: Array<Round>;
  /** fetch data from the table: "score" using primary key columns */
  score?: Maybe<Score>;
  /** fetch aggregated fields from the table: "score" */
  scoreStats: Score_Aggregate;
  /** fetch data from the table: "score" */
  scores: Array<Score>;
  /** fetch aggregated fields from the table: "skins" */
  skinStats: Skins_Aggregate;
  /** fetch data from the table: "skins" */
  skins: Array<Skins>;
  /** fetch data from the table: "zz_leaderboard" */
  zz_leaderboard: Array<Zz_Leaderboard>;
  /** fetch aggregated fields from the table: "zz_leaderboard" */
  zz_leaderboard_aggregate: Zz_Leaderboard_Aggregate;
  /** fetch data from the table: "zz_leaderboard" using primary key columns */
  zz_leaderboard_by_pk?: Maybe<Zz_Leaderboard>;
};


/** subscription root */
export type Subscription_RootCourseArgs = {
  id: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootCourseStatsArgs = {
  distinct_on?: Maybe<Array<Course_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Course_Order_By>>;
  where?: Maybe<Course_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootCoursesArgs = {
  distinct_on?: Maybe<Array<Course_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Course_Order_By>>;
  where?: Maybe<Course_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootHoleArgs = {
  courseId: Scalars['Int'];
  number: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootHoleStatsArgs = {
  distinct_on?: Maybe<Array<Hole_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Hole_Order_By>>;
  where?: Maybe<Hole_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootHolesArgs = {
  distinct_on?: Maybe<Array<Hole_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Hole_Order_By>>;
  where?: Maybe<Hole_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootLeaderboardArgs = {
  args: Leaderboard_Args;
  distinct_on?: Maybe<Array<Zz_Leaderboard_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Zz_Leaderboard_Order_By>>;
  where?: Maybe<Zz_Leaderboard_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootLeaderboard_AggregateArgs = {
  args: Leaderboard_Args;
  distinct_on?: Maybe<Array<Zz_Leaderboard_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Zz_Leaderboard_Order_By>>;
  where?: Maybe<Zz_Leaderboard_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootPlayerArgs = {
  id: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootPlayerRoundStatsArgs = {
  distinct_on?: Maybe<Array<Player_Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Round_Order_By>>;
  where?: Maybe<Player_Round_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootPlayerRoundsArgs = {
  distinct_on?: Maybe<Array<Player_Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Round_Order_By>>;
  where?: Maybe<Player_Round_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootPlayerStatsArgs = {
  distinct_on?: Maybe<Array<Player_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Order_By>>;
  where?: Maybe<Player_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootPlayersArgs = {
  distinct_on?: Maybe<Array<Player_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Order_By>>;
  where?: Maybe<Player_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRoundArgs = {
  id: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootRoundStatsArgs = {
  distinct_on?: Maybe<Array<Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Round_Order_By>>;
  where?: Maybe<Round_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRoundsArgs = {
  distinct_on?: Maybe<Array<Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Round_Order_By>>;
  where?: Maybe<Round_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootScoreArgs = {
  holeNumber: Scalars['Int'];
  playerId: Scalars['Int'];
  roundId: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootScoreStatsArgs = {
  distinct_on?: Maybe<Array<Score_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Score_Order_By>>;
  where?: Maybe<Score_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootScoresArgs = {
  distinct_on?: Maybe<Array<Score_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Score_Order_By>>;
  where?: Maybe<Score_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootSkinStatsArgs = {
  distinct_on?: Maybe<Array<Skins_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Skins_Order_By>>;
  where?: Maybe<Skins_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootSkinsArgs = {
  distinct_on?: Maybe<Array<Skins_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Skins_Order_By>>;
  where?: Maybe<Skins_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootZz_LeaderboardArgs = {
  distinct_on?: Maybe<Array<Zz_Leaderboard_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Zz_Leaderboard_Order_By>>;
  where?: Maybe<Zz_Leaderboard_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootZz_Leaderboard_AggregateArgs = {
  distinct_on?: Maybe<Array<Zz_Leaderboard_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Zz_Leaderboard_Order_By>>;
  where?: Maybe<Zz_Leaderboard_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootZz_Leaderboard_By_PkArgs = {
  playerId: Scalars['Int'];
  roundId: Scalars['Int'];
};


/** expression to compare columns of type timestamp. All fields are combined with logical 'AND'. */
export type Timestamp_Comparison_Exp = {
  _eq?: Maybe<Scalars['timestamp']>;
  _gt?: Maybe<Scalars['timestamp']>;
  _gte?: Maybe<Scalars['timestamp']>;
  _in?: Maybe<Array<Scalars['timestamp']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['timestamp']>;
  _lte?: Maybe<Scalars['timestamp']>;
  _neq?: Maybe<Scalars['timestamp']>;
  _nin?: Maybe<Array<Scalars['timestamp']>>;
};

/** columns and relationships of "zz_leaderboard" */
export type Zz_Leaderboard = {
  __typename?: 'zz_leaderboard';
  /** An object relationship */
  player: Player;
  playerId: Scalars['Int'];
  /** An object relationship */
  playerRound?: Maybe<Player_Round>;
  rank: Scalars['bigint'];
  /** An object relationship */
  round: Round;
  roundId: Scalars['Int'];
};

/** aggregated selection of "zz_leaderboard" */
export type Zz_Leaderboard_Aggregate = {
  __typename?: 'zz_leaderboard_aggregate';
  aggregate?: Maybe<Zz_Leaderboard_Aggregate_Fields>;
  nodes: Array<Zz_Leaderboard>;
};

/** aggregate fields of "zz_leaderboard" */
export type Zz_Leaderboard_Aggregate_Fields = {
  __typename?: 'zz_leaderboard_aggregate_fields';
  avg?: Maybe<Zz_Leaderboard_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Zz_Leaderboard_Max_Fields>;
  min?: Maybe<Zz_Leaderboard_Min_Fields>;
  stddev?: Maybe<Zz_Leaderboard_Stddev_Fields>;
  stddev_pop?: Maybe<Zz_Leaderboard_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Zz_Leaderboard_Stddev_Samp_Fields>;
  sum?: Maybe<Zz_Leaderboard_Sum_Fields>;
  var_pop?: Maybe<Zz_Leaderboard_Var_Pop_Fields>;
  var_samp?: Maybe<Zz_Leaderboard_Var_Samp_Fields>;
  variance?: Maybe<Zz_Leaderboard_Variance_Fields>;
};


/** aggregate fields of "zz_leaderboard" */
export type Zz_Leaderboard_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Zz_Leaderboard_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "zz_leaderboard" */
export type Zz_Leaderboard_Aggregate_Order_By = {
  avg?: Maybe<Zz_Leaderboard_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Zz_Leaderboard_Max_Order_By>;
  min?: Maybe<Zz_Leaderboard_Min_Order_By>;
  stddev?: Maybe<Zz_Leaderboard_Stddev_Order_By>;
  stddev_pop?: Maybe<Zz_Leaderboard_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Zz_Leaderboard_Stddev_Samp_Order_By>;
  sum?: Maybe<Zz_Leaderboard_Sum_Order_By>;
  var_pop?: Maybe<Zz_Leaderboard_Var_Pop_Order_By>;
  var_samp?: Maybe<Zz_Leaderboard_Var_Samp_Order_By>;
  variance?: Maybe<Zz_Leaderboard_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "zz_leaderboard" */
export type Zz_Leaderboard_Arr_Rel_Insert_Input = {
  data: Array<Zz_Leaderboard_Insert_Input>;
  on_conflict?: Maybe<Zz_Leaderboard_On_Conflict>;
};

/** aggregate avg on columns */
export type Zz_Leaderboard_Avg_Fields = {
  __typename?: 'zz_leaderboard_avg_fields';
  playerId?: Maybe<Scalars['Float']>;
  rank?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "zz_leaderboard" */
export type Zz_Leaderboard_Avg_Order_By = {
  playerId?: Maybe<Order_By>;
  rank?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "zz_leaderboard". All fields are combined with a logical 'AND'. */
export type Zz_Leaderboard_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Zz_Leaderboard_Bool_Exp>>>;
  _not?: Maybe<Zz_Leaderboard_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Zz_Leaderboard_Bool_Exp>>>;
  player?: Maybe<Player_Bool_Exp>;
  playerId?: Maybe<Int_Comparison_Exp>;
  playerRound?: Maybe<Player_Round_Bool_Exp>;
  rank?: Maybe<Bigint_Comparison_Exp>;
  round?: Maybe<Round_Bool_Exp>;
  roundId?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "zz_leaderboard" */
export enum Zz_Leaderboard_Constraint {
  /** unique or primary key constraint */
  LeaderboardPkey = '_leaderboard_pkey'
}

/** input type for incrementing integer column in table "zz_leaderboard" */
export type Zz_Leaderboard_Inc_Input = {
  playerId?: Maybe<Scalars['Int']>;
  rank?: Maybe<Scalars['bigint']>;
  roundId?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "zz_leaderboard" */
export type Zz_Leaderboard_Insert_Input = {
  player?: Maybe<Player_Obj_Rel_Insert_Input>;
  playerId?: Maybe<Scalars['Int']>;
  rank?: Maybe<Scalars['bigint']>;
  round?: Maybe<Round_Obj_Rel_Insert_Input>;
  roundId?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type Zz_Leaderboard_Max_Fields = {
  __typename?: 'zz_leaderboard_max_fields';
  playerId?: Maybe<Scalars['Int']>;
  rank?: Maybe<Scalars['bigint']>;
  roundId?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "zz_leaderboard" */
export type Zz_Leaderboard_Max_Order_By = {
  playerId?: Maybe<Order_By>;
  rank?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Zz_Leaderboard_Min_Fields = {
  __typename?: 'zz_leaderboard_min_fields';
  playerId?: Maybe<Scalars['Int']>;
  rank?: Maybe<Scalars['bigint']>;
  roundId?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "zz_leaderboard" */
export type Zz_Leaderboard_Min_Order_By = {
  playerId?: Maybe<Order_By>;
  rank?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
};

/** response of any mutation on the table "zz_leaderboard" */
export type Zz_Leaderboard_Mutation_Response = {
  __typename?: 'zz_leaderboard_mutation_response';
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Zz_Leaderboard>;
};

/** input type for inserting object relation for remote table "zz_leaderboard" */
export type Zz_Leaderboard_Obj_Rel_Insert_Input = {
  data: Zz_Leaderboard_Insert_Input;
  on_conflict?: Maybe<Zz_Leaderboard_On_Conflict>;
};

/** on conflict condition type for table "zz_leaderboard" */
export type Zz_Leaderboard_On_Conflict = {
  constraint: Zz_Leaderboard_Constraint;
  update_columns: Array<Zz_Leaderboard_Update_Column>;
  where?: Maybe<Zz_Leaderboard_Bool_Exp>;
};

/** ordering options when selecting data from "zz_leaderboard" */
export type Zz_Leaderboard_Order_By = {
  player?: Maybe<Player_Order_By>;
  playerId?: Maybe<Order_By>;
  playerRound?: Maybe<Player_Round_Order_By>;
  rank?: Maybe<Order_By>;
  round?: Maybe<Round_Order_By>;
  roundId?: Maybe<Order_By>;
};

/** primary key columns input for table: "zz_leaderboard" */
export type Zz_Leaderboard_Pk_Columns_Input = {
  playerId: Scalars['Int'];
  roundId: Scalars['Int'];
};

/** select columns of table "zz_leaderboard" */
export enum Zz_Leaderboard_Select_Column {
  /** column name */
  PlayerId = 'playerId',
  /** column name */
  Rank = 'rank',
  /** column name */
  RoundId = 'roundId'
}

/** input type for updating data in table "zz_leaderboard" */
export type Zz_Leaderboard_Set_Input = {
  playerId?: Maybe<Scalars['Int']>;
  rank?: Maybe<Scalars['bigint']>;
  roundId?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type Zz_Leaderboard_Stddev_Fields = {
  __typename?: 'zz_leaderboard_stddev_fields';
  playerId?: Maybe<Scalars['Float']>;
  rank?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "zz_leaderboard" */
export type Zz_Leaderboard_Stddev_Order_By = {
  playerId?: Maybe<Order_By>;
  rank?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Zz_Leaderboard_Stddev_Pop_Fields = {
  __typename?: 'zz_leaderboard_stddev_pop_fields';
  playerId?: Maybe<Scalars['Float']>;
  rank?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "zz_leaderboard" */
export type Zz_Leaderboard_Stddev_Pop_Order_By = {
  playerId?: Maybe<Order_By>;
  rank?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Zz_Leaderboard_Stddev_Samp_Fields = {
  __typename?: 'zz_leaderboard_stddev_samp_fields';
  playerId?: Maybe<Scalars['Float']>;
  rank?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "zz_leaderboard" */
export type Zz_Leaderboard_Stddev_Samp_Order_By = {
  playerId?: Maybe<Order_By>;
  rank?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Zz_Leaderboard_Sum_Fields = {
  __typename?: 'zz_leaderboard_sum_fields';
  playerId?: Maybe<Scalars['Int']>;
  rank?: Maybe<Scalars['bigint']>;
  roundId?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "zz_leaderboard" */
export type Zz_Leaderboard_Sum_Order_By = {
  playerId?: Maybe<Order_By>;
  rank?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
};

/** update columns of table "zz_leaderboard" */
export enum Zz_Leaderboard_Update_Column {
  /** column name */
  PlayerId = 'playerId',
  /** column name */
  Rank = 'rank',
  /** column name */
  RoundId = 'roundId'
}

/** aggregate var_pop on columns */
export type Zz_Leaderboard_Var_Pop_Fields = {
  __typename?: 'zz_leaderboard_var_pop_fields';
  playerId?: Maybe<Scalars['Float']>;
  rank?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "zz_leaderboard" */
export type Zz_Leaderboard_Var_Pop_Order_By = {
  playerId?: Maybe<Order_By>;
  rank?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Zz_Leaderboard_Var_Samp_Fields = {
  __typename?: 'zz_leaderboard_var_samp_fields';
  playerId?: Maybe<Scalars['Float']>;
  rank?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "zz_leaderboard" */
export type Zz_Leaderboard_Var_Samp_Order_By = {
  playerId?: Maybe<Order_By>;
  rank?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Zz_Leaderboard_Variance_Fields = {
  __typename?: 'zz_leaderboard_variance_fields';
  playerId?: Maybe<Scalars['Float']>;
  rank?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "zz_leaderboard" */
export type Zz_Leaderboard_Variance_Order_By = {
  playerId?: Maybe<Order_By>;
  rank?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
};

export type PlayerRoundForChartFragment = (
  { __typename?: 'player_round' }
  & Pick<Player_Round, 'relativeScore'>
  & { player?: Maybe<(
    { __typename?: 'player' }
    & Pick<Player, 'nickname' | 'id' | 'img'>
  )>, round?: Maybe<(
    { __typename?: 'round' }
    & Pick<Round, 'date' | 'id'>
  )> }
);

export type EntryForLeaderboardFragment = (
  { __typename?: 'zz_leaderboard' }
  & Pick<Zz_Leaderboard, 'rank'>
  & { playerRound?: Maybe<(
    { __typename?: 'player_round' }
    & Pick<Player_Round, 'relativeScore'>
    & { player?: Maybe<(
      { __typename?: 'player' }
      & Pick<Player, 'nickname' | 'slug'>
    )>, round?: Maybe<(
      { __typename?: 'round' }
      & Pick<Round, 'id'>
    )> }
  )> }
);

export type RoundForTableFragment = (
  { __typename?: 'round' }
  & Pick<Round, 'id' | 'date' | 'name' | 'roundBounty' | 'skinsHoleBounty'>
  & { course: (
    { __typename?: 'course' }
    & Pick<Course, 'name'>
    & { holes: Array<(
      { __typename?: 'hole' }
      & Pick<Hole, 'nickname' | 'number' | 'par'>
    )> }
  ), playerRounds: Array<(
    { __typename?: 'player_round' }
    & Pick<Player_Round, 'relativeScore' | 'roundBountyWinner' | 'totalWinnings'>
    & { player?: Maybe<(
      { __typename?: 'player' }
      & Pick<Player, 'nickname' | 'img' | 'id'>
    )>, skins: Array<(
      { __typename?: 'skins' }
      & Pick<Skins, 'holeNumber' | 'won'>
    )>, scores: Array<(
      { __typename?: 'score' }
      & Pick<Score, 'holeNumber' | 'score'>
    )> }
  )> }
);

export type RoundForSummaryFragment = (
  { __typename?: 'round' }
  & Pick<Round, 'date' | 'name'>
  & { course: (
    { __typename?: 'course' }
    & Pick<Course, 'name'>
  ), playerRounds: Array<(
    { __typename?: 'player_round' }
    & { player?: Maybe<(
      { __typename?: 'player' }
      & Pick<Player, 'id' | 'img'>
    )> }
  )> }
  & RoundForTableFragment
);

export type OverviewPageQueryVariables = Exact<{
  courseId: Scalars['Int'];
}>;


export type OverviewPageQuery = (
  { __typename?: 'query_root' }
  & { summaryRounds: Array<(
    { __typename?: 'round' }
    & RoundForSummaryFragment
  )>, leaderboardEntries: Array<(
    { __typename?: 'zz_leaderboard' }
    & EntryForLeaderboardFragment
  )> }
);

export type DefaultCourseRoundsPageQueryVariables = Exact<{
  courseId: Scalars['Int'];
}>;


export type DefaultCourseRoundsPageQuery = (
  { __typename?: 'query_root' }
  & { course?: Maybe<(
    { __typename?: 'course' }
    & PageCourseFragment
  )>, roundsForChart: Array<(
    { __typename?: 'player_round' }
    & PlayerRoundForChartFragment
  )>, leaderboardEntries: Array<(
    { __typename?: 'zz_leaderboard' }
    & EntryForLeaderboardFragment
  )>, roundsForTable: Array<(
    { __typename?: 'round' }
    & Pick<Round, 'id'>
    & RoundForTableFragment
  )> }
);

export type CourseSlugListingQueryVariables = Exact<{ [key: string]: never; }>;


export type CourseSlugListingQuery = (
  { __typename?: 'query_root' }
  & { courses: Array<(
    { __typename?: 'course' }
    & Pick<Course, 'slug'>
  )> }
);

export type PageCourseFragment = (
  { __typename?: 'course' }
  & Pick<Course, 'id' | 'slug' | 'name' | 'img'>
);

export type PagePlayerFragment = (
  { __typename?: 'player' }
  & Pick<Player, 'id' | 'slug'>
);

export type CourseForPageQueryVariables = Exact<{
  slug: Scalars['String'];
}>;


export type CourseForPageQuery = (
  { __typename?: 'query_root' }
  & { courses: Array<(
    { __typename?: 'course' }
    & PageCourseFragment
  )> }
);

export type PlayerForPageQueryVariables = Exact<{
  slug: Scalars['String'];
}>;


export type PlayerForPageQuery = (
  { __typename?: 'query_root' }
  & { players: Array<(
    { __typename?: 'player' }
    & PagePlayerFragment
  )> }
);

export const PlayerRoundForChartFragmentDoc = gql`
    fragment playerRoundForChart on player_round {
  relativeScore
  player {
    nickname
    id
    img
  }
  round {
    date
    id
  }
}
    `;
export const EntryForLeaderboardFragmentDoc = gql`
    fragment entryForLeaderboard on zz_leaderboard {
  rank
  playerRound {
    player {
      nickname
      slug
    }
    relativeScore
    round {
      id
    }
  }
}
    `;
export const RoundForTableFragmentDoc = gql`
    fragment roundForTable on round {
  id
  date
  name
  roundBounty
  skinsHoleBounty
  course {
    name
    holes(order_by: {number: asc}) {
      nickname
      number
      par
    }
  }
  playerRounds(order_by: {relativeScore: asc}) {
    relativeScore
    roundBountyWinner
    totalWinnings
    player {
      nickname
      img
      id
    }
    skins {
      holeNumber
      won
    }
    scores {
      holeNumber
      score
    }
  }
}
    `;
export const RoundForSummaryFragmentDoc = gql`
    fragment roundForSummary on round {
  ...roundForTable
  date
  name
  course {
    name
  }
  playerRounds(order_by: {relativeScore: asc}) {
    player {
      id
      img
    }
  }
}
    ${RoundForTableFragmentDoc}`;
export const PageCourseFragmentDoc = gql`
    fragment pageCourse on course {
  id
  slug
  name
  img
}
    `;
export const PagePlayerFragmentDoc = gql`
    fragment pagePlayer on player {
  id
  slug
}
    `;
export const OverviewPageDocument = gql`
    query overviewPage($courseId: Int!) {
  summaryRounds: rounds(
    where: {courseId: {_eq: $courseId}}
    order_by: {date: desc}
    limit: 5
  ) {
    ...roundForSummary
  }
  leaderboardEntries: leaderboard(args: {course: $courseId, rank: 10}) {
    ...entryForLeaderboard
  }
}
    ${RoundForSummaryFragmentDoc}
${EntryForLeaderboardFragmentDoc}`;
export const DefaultCourseRoundsPageDocument = gql`
    query defaultCourseRoundsPage($courseId: Int!) {
  course(id: $courseId) {
    ...pageCourse
  }
  roundsForChart: playerRounds(
    where: {courseId: {_eq: $courseId}, complete: {_eq: true}}
  ) {
    ...playerRoundForChart
  }
  leaderboardEntries: leaderboard(args: {course: $courseId, rank: 10}) {
    ...entryForLeaderboard
  }
  roundsForTable: rounds(
    where: {courseId: {_eq: $courseId}}
    order_by: {date: desc}
  ) {
    id
    ...roundForTable
  }
}
    ${PageCourseFragmentDoc}
${PlayerRoundForChartFragmentDoc}
${EntryForLeaderboardFragmentDoc}
${RoundForTableFragmentDoc}`;
export const CourseSlugListingDocument = gql`
    query courseSlugListing {
  courses {
    slug
  }
}
    `;
export const CourseForPageDocument = gql`
    query courseForPage($slug: String!) {
  courses(where: {slug: {_eq: $slug}}) {
    ...pageCourse
  }
}
    ${PageCourseFragmentDoc}`;
export const PlayerForPageDocument = gql`
    query playerForPage($slug: String!) {
  players(where: {slug: {_eq: $slug}}) {
    ...pagePlayer
  }
}
    ${PagePlayerFragmentDoc}`;

export type SdkFunctionWrapper = <T>(action: () => Promise<T>) => Promise<T>;


const defaultWrapper: SdkFunctionWrapper = sdkFunction => sdkFunction();
export function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {
  return {
    overviewPage(variables: OverviewPageQueryVariables): Promise<OverviewPageQuery> {
      return withWrapper(() => client.request<OverviewPageQuery>(print(OverviewPageDocument), variables));
    },
    defaultCourseRoundsPage(variables: DefaultCourseRoundsPageQueryVariables): Promise<DefaultCourseRoundsPageQuery> {
      return withWrapper(() => client.request<DefaultCourseRoundsPageQuery>(print(DefaultCourseRoundsPageDocument), variables));
    },
    courseSlugListing(variables?: CourseSlugListingQueryVariables): Promise<CourseSlugListingQuery> {
      return withWrapper(() => client.request<CourseSlugListingQuery>(print(CourseSlugListingDocument), variables));
    },
    courseForPage(variables: CourseForPageQueryVariables): Promise<CourseForPageQuery> {
      return withWrapper(() => client.request<CourseForPageQuery>(print(CourseForPageDocument), variables));
    },
    playerForPage(variables: PlayerForPageQueryVariables): Promise<PlayerForPageQuery> {
      return withWrapper(() => client.request<PlayerForPageQuery>(print(PlayerForPageDocument), variables));
    }
  };
}
export type Sdk = ReturnType<typeof getSdk>;