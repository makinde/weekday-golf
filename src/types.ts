/**
 * This file is auto-generated by [GraphQL code generator](https://graphql-code-generator.com).
 * via the `generate` script in `package.json`. Do not edit this file, as it gets
 * overwritten before every build.
 * See `codegen.json` in the project root.
 */
import { GraphQLClient } from 'graphql-request';
import { print } from 'graphql';
import gql from 'graphql-tag';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  _int4: number;
  bigint: any;
  numeric: number;
  point: [number, number];
  timestamp: string;
};

/** expression to compare columns of type Boolean. All fields are combined with logical 'AND'. */
export type Boolean_Comparison_Exp = {
  _eq?: Maybe<Scalars['Boolean']>;
  _gt?: Maybe<Scalars['Boolean']>;
  _gte?: Maybe<Scalars['Boolean']>;
  _in?: Maybe<Array<Scalars['Boolean']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['Boolean']>;
  _lte?: Maybe<Scalars['Boolean']>;
  _neq?: Maybe<Scalars['Boolean']>;
  _nin?: Maybe<Array<Scalars['Boolean']>>;
};

/** expression to compare columns of type Int. All fields are combined with logical 'AND'. */
export type Int_Comparison_Exp = {
  _eq?: Maybe<Scalars['Int']>;
  _gt?: Maybe<Scalars['Int']>;
  _gte?: Maybe<Scalars['Int']>;
  _in?: Maybe<Array<Scalars['Int']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['Int']>;
  _lte?: Maybe<Scalars['Int']>;
  _neq?: Maybe<Scalars['Int']>;
  _nin?: Maybe<Array<Scalars['Int']>>;
};

/** expression to compare columns of type String. All fields are combined with logical 'AND'. */
export type String_Comparison_Exp = {
  _eq?: Maybe<Scalars['String']>;
  _gt?: Maybe<Scalars['String']>;
  _gte?: Maybe<Scalars['String']>;
  _ilike?: Maybe<Scalars['String']>;
  _in?: Maybe<Array<Scalars['String']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _like?: Maybe<Scalars['String']>;
  _lt?: Maybe<Scalars['String']>;
  _lte?: Maybe<Scalars['String']>;
  _neq?: Maybe<Scalars['String']>;
  _nilike?: Maybe<Scalars['String']>;
  _nin?: Maybe<Array<Scalars['String']>>;
  _nlike?: Maybe<Scalars['String']>;
  _nsimilar?: Maybe<Scalars['String']>;
  _similar?: Maybe<Scalars['String']>;
};


/** expression to compare columns of type _int4. All fields are combined with logical 'AND'. */
export type _Int4_Comparison_Exp = {
  _eq?: Maybe<Scalars['_int4']>;
  _gt?: Maybe<Scalars['_int4']>;
  _gte?: Maybe<Scalars['_int4']>;
  _in?: Maybe<Array<Scalars['_int4']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['_int4']>;
  _lte?: Maybe<Scalars['_int4']>;
  _neq?: Maybe<Scalars['_int4']>;
  _nin?: Maybe<Array<Scalars['_int4']>>;
};


/** expression to compare columns of type bigint. All fields are combined with logical 'AND'. */
export type Bigint_Comparison_Exp = {
  _eq?: Maybe<Scalars['bigint']>;
  _gt?: Maybe<Scalars['bigint']>;
  _gte?: Maybe<Scalars['bigint']>;
  _in?: Maybe<Array<Scalars['bigint']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['bigint']>;
  _lte?: Maybe<Scalars['bigint']>;
  _neq?: Maybe<Scalars['bigint']>;
  _nin?: Maybe<Array<Scalars['bigint']>>;
};

/** columns and relationships of "course" */
export type Course = {
  /** An array relationship */
  coursePlayers: Array<Course_Player>;
  /** An aggregated array relationship */
  coursePlayers_aggregate: Course_Player_Aggregate;
  /** An array relationship */
  holes: Array<Hole>;
  /** An aggregated array relationship */
  holes_aggregate: Hole_Aggregate;
  id: Scalars['Int'];
  img?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['point']>;
  name: Scalars['String'];
  /** An array relationship */
  playerRounds: Array<Player_Round>;
  /** An aggregated array relationship */
  playerRounds_aggregate: Player_Round_Aggregate;
  /** An array relationship */
  rounds: Array<Round>;
  /** An aggregated array relationship */
  rounds_aggregate: Round_Aggregate;
  /** An array relationship */
  scores: Array<Score>;
  /** An aggregated array relationship */
  scores_aggregate: Score_Aggregate;
  /** An array relationship */
  scoringInfo: Array<Scoring_Info>;
  /** An aggregated array relationship */
  scoringInfo_aggregate: Scoring_Info_Aggregate;
  slug: Scalars['String'];
};


/** columns and relationships of "course" */
export type CourseCoursePlayersArgs = {
  distinct_on?: Maybe<Array<Course_Player_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Course_Player_Order_By>>;
  where?: Maybe<Course_Player_Bool_Exp>;
};


/** columns and relationships of "course" */
export type CourseCoursePlayers_AggregateArgs = {
  distinct_on?: Maybe<Array<Course_Player_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Course_Player_Order_By>>;
  where?: Maybe<Course_Player_Bool_Exp>;
};


/** columns and relationships of "course" */
export type CourseHolesArgs = {
  distinct_on?: Maybe<Array<Hole_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Hole_Order_By>>;
  where?: Maybe<Hole_Bool_Exp>;
};


/** columns and relationships of "course" */
export type CourseHoles_AggregateArgs = {
  distinct_on?: Maybe<Array<Hole_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Hole_Order_By>>;
  where?: Maybe<Hole_Bool_Exp>;
};


/** columns and relationships of "course" */
export type CoursePlayerRoundsArgs = {
  distinct_on?: Maybe<Array<Player_Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Round_Order_By>>;
  where?: Maybe<Player_Round_Bool_Exp>;
};


/** columns and relationships of "course" */
export type CoursePlayerRounds_AggregateArgs = {
  distinct_on?: Maybe<Array<Player_Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Round_Order_By>>;
  where?: Maybe<Player_Round_Bool_Exp>;
};


/** columns and relationships of "course" */
export type CourseRoundsArgs = {
  distinct_on?: Maybe<Array<Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Round_Order_By>>;
  where?: Maybe<Round_Bool_Exp>;
};


/** columns and relationships of "course" */
export type CourseRounds_AggregateArgs = {
  distinct_on?: Maybe<Array<Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Round_Order_By>>;
  where?: Maybe<Round_Bool_Exp>;
};


/** columns and relationships of "course" */
export type CourseScoresArgs = {
  distinct_on?: Maybe<Array<Score_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Score_Order_By>>;
  where?: Maybe<Score_Bool_Exp>;
};


/** columns and relationships of "course" */
export type CourseScores_AggregateArgs = {
  distinct_on?: Maybe<Array<Score_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Score_Order_By>>;
  where?: Maybe<Score_Bool_Exp>;
};


/** columns and relationships of "course" */
export type CourseScoringInfoArgs = {
  distinct_on?: Maybe<Array<Scoring_Info_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Scoring_Info_Order_By>>;
  where?: Maybe<Scoring_Info_Bool_Exp>;
};


/** columns and relationships of "course" */
export type CourseScoringInfo_AggregateArgs = {
  distinct_on?: Maybe<Array<Scoring_Info_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Scoring_Info_Order_By>>;
  where?: Maybe<Scoring_Info_Bool_Exp>;
};

/** aggregated selection of "course" */
export type Course_Aggregate = {
  aggregate?: Maybe<Course_Aggregate_Fields>;
  nodes: Array<Course>;
};

/** aggregate fields of "course" */
export type Course_Aggregate_Fields = {
  avg?: Maybe<Course_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Course_Max_Fields>;
  min?: Maybe<Course_Min_Fields>;
  stddev?: Maybe<Course_Stddev_Fields>;
  stddev_pop?: Maybe<Course_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Course_Stddev_Samp_Fields>;
  sum?: Maybe<Course_Sum_Fields>;
  var_pop?: Maybe<Course_Var_Pop_Fields>;
  var_samp?: Maybe<Course_Var_Samp_Fields>;
  variance?: Maybe<Course_Variance_Fields>;
};


/** aggregate fields of "course" */
export type Course_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Course_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "course" */
export type Course_Aggregate_Order_By = {
  avg?: Maybe<Course_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Course_Max_Order_By>;
  min?: Maybe<Course_Min_Order_By>;
  stddev?: Maybe<Course_Stddev_Order_By>;
  stddev_pop?: Maybe<Course_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Course_Stddev_Samp_Order_By>;
  sum?: Maybe<Course_Sum_Order_By>;
  var_pop?: Maybe<Course_Var_Pop_Order_By>;
  var_samp?: Maybe<Course_Var_Samp_Order_By>;
  variance?: Maybe<Course_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "course" */
export type Course_Arr_Rel_Insert_Input = {
  data: Array<Course_Insert_Input>;
  on_conflict?: Maybe<Course_On_Conflict>;
};

/** aggregate avg on columns */
export type Course_Avg_Fields = {
  id?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "course" */
export type Course_Avg_Order_By = {
  id?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "course". All fields are combined with a logical 'AND'. */
export type Course_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Course_Bool_Exp>>>;
  _not?: Maybe<Course_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Course_Bool_Exp>>>;
  coursePlayers?: Maybe<Course_Player_Bool_Exp>;
  holes?: Maybe<Hole_Bool_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  img?: Maybe<String_Comparison_Exp>;
  location?: Maybe<Point_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  playerRounds?: Maybe<Player_Round_Bool_Exp>;
  rounds?: Maybe<Round_Bool_Exp>;
  scores?: Maybe<Score_Bool_Exp>;
  scoringInfo?: Maybe<Scoring_Info_Bool_Exp>;
  slug?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "course" */
export enum Course_Constraint {
  /** unique or primary key constraint */
  CourseSlugKey = 'course_slug_key',
  /** unique or primary key constraint */
  CoursesPkey = 'courses_pkey'
}

/** input type for incrementing integer column in table "course" */
export type Course_Inc_Input = {
  id?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "course" */
export type Course_Insert_Input = {
  holes?: Maybe<Hole_Arr_Rel_Insert_Input>;
  id?: Maybe<Scalars['Int']>;
  img?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['point']>;
  name?: Maybe<Scalars['String']>;
  rounds?: Maybe<Round_Arr_Rel_Insert_Input>;
  scores?: Maybe<Score_Arr_Rel_Insert_Input>;
  slug?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Course_Max_Fields = {
  id?: Maybe<Scalars['Int']>;
  img?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "course" */
export type Course_Max_Order_By = {
  id?: Maybe<Order_By>;
  img?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  slug?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Course_Min_Fields = {
  id?: Maybe<Scalars['Int']>;
  img?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "course" */
export type Course_Min_Order_By = {
  id?: Maybe<Order_By>;
  img?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  slug?: Maybe<Order_By>;
};

/** response of any mutation on the table "course" */
export type Course_Mutation_Response = {
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Course>;
};

/** input type for inserting object relation for remote table "course" */
export type Course_Obj_Rel_Insert_Input = {
  data: Course_Insert_Input;
  on_conflict?: Maybe<Course_On_Conflict>;
};

/** on conflict condition type for table "course" */
export type Course_On_Conflict = {
  constraint: Course_Constraint;
  update_columns: Array<Course_Update_Column>;
  where?: Maybe<Course_Bool_Exp>;
};

/** ordering options when selecting data from "course" */
export type Course_Order_By = {
  coursePlayers_aggregate?: Maybe<Course_Player_Aggregate_Order_By>;
  holes_aggregate?: Maybe<Hole_Aggregate_Order_By>;
  id?: Maybe<Order_By>;
  img?: Maybe<Order_By>;
  location?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  playerRounds_aggregate?: Maybe<Player_Round_Aggregate_Order_By>;
  rounds_aggregate?: Maybe<Round_Aggregate_Order_By>;
  scores_aggregate?: Maybe<Score_Aggregate_Order_By>;
  scoringInfo_aggregate?: Maybe<Scoring_Info_Aggregate_Order_By>;
  slug?: Maybe<Order_By>;
};

/** primary key columns input for table: "course" */
export type Course_Pk_Columns_Input = {
  id: Scalars['Int'];
};

/** columns and relationships of "course_player" */
export type Course_Player = {
  /** An object relationship */
  course?: Maybe<Course>;
  courseId?: Maybe<Scalars['Int']>;
  /** An object relationship */
  player?: Maybe<Player>;
  playerId?: Maybe<Scalars['Int']>;
  /** An array relationship */
  playerRounds: Array<Player_Round>;
  /** An aggregated array relationship */
  playerRounds_aggregate: Player_Round_Aggregate;
  /** An array relationship */
  scores: Array<Score>;
  /** An aggregated array relationship */
  scores_aggregate: Score_Aggregate;
  /** An array relationship */
  scoringInfo: Array<Scoring_Info>;
  /** An aggregated array relationship */
  scoringInfo_aggregate: Scoring_Info_Aggregate;
  /** An array relationship */
  skins: Array<Skins>;
  /** An aggregated array relationship */
  skins_aggregate: Skins_Aggregate;
};


/** columns and relationships of "course_player" */
export type Course_PlayerPlayerRoundsArgs = {
  distinct_on?: Maybe<Array<Player_Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Round_Order_By>>;
  where?: Maybe<Player_Round_Bool_Exp>;
};


/** columns and relationships of "course_player" */
export type Course_PlayerPlayerRounds_AggregateArgs = {
  distinct_on?: Maybe<Array<Player_Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Round_Order_By>>;
  where?: Maybe<Player_Round_Bool_Exp>;
};


/** columns and relationships of "course_player" */
export type Course_PlayerScoresArgs = {
  distinct_on?: Maybe<Array<Score_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Score_Order_By>>;
  where?: Maybe<Score_Bool_Exp>;
};


/** columns and relationships of "course_player" */
export type Course_PlayerScores_AggregateArgs = {
  distinct_on?: Maybe<Array<Score_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Score_Order_By>>;
  where?: Maybe<Score_Bool_Exp>;
};


/** columns and relationships of "course_player" */
export type Course_PlayerScoringInfoArgs = {
  distinct_on?: Maybe<Array<Scoring_Info_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Scoring_Info_Order_By>>;
  where?: Maybe<Scoring_Info_Bool_Exp>;
};


/** columns and relationships of "course_player" */
export type Course_PlayerScoringInfo_AggregateArgs = {
  distinct_on?: Maybe<Array<Scoring_Info_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Scoring_Info_Order_By>>;
  where?: Maybe<Scoring_Info_Bool_Exp>;
};


/** columns and relationships of "course_player" */
export type Course_PlayerSkinsArgs = {
  distinct_on?: Maybe<Array<Skins_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Skins_Order_By>>;
  where?: Maybe<Skins_Bool_Exp>;
};


/** columns and relationships of "course_player" */
export type Course_PlayerSkins_AggregateArgs = {
  distinct_on?: Maybe<Array<Skins_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Skins_Order_By>>;
  where?: Maybe<Skins_Bool_Exp>;
};

/** aggregated selection of "course_player" */
export type Course_Player_Aggregate = {
  aggregate?: Maybe<Course_Player_Aggregate_Fields>;
  nodes: Array<Course_Player>;
};

/** aggregate fields of "course_player" */
export type Course_Player_Aggregate_Fields = {
  avg?: Maybe<Course_Player_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Course_Player_Max_Fields>;
  min?: Maybe<Course_Player_Min_Fields>;
  stddev?: Maybe<Course_Player_Stddev_Fields>;
  stddev_pop?: Maybe<Course_Player_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Course_Player_Stddev_Samp_Fields>;
  sum?: Maybe<Course_Player_Sum_Fields>;
  var_pop?: Maybe<Course_Player_Var_Pop_Fields>;
  var_samp?: Maybe<Course_Player_Var_Samp_Fields>;
  variance?: Maybe<Course_Player_Variance_Fields>;
};


/** aggregate fields of "course_player" */
export type Course_Player_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Course_Player_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "course_player" */
export type Course_Player_Aggregate_Order_By = {
  avg?: Maybe<Course_Player_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Course_Player_Max_Order_By>;
  min?: Maybe<Course_Player_Min_Order_By>;
  stddev?: Maybe<Course_Player_Stddev_Order_By>;
  stddev_pop?: Maybe<Course_Player_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Course_Player_Stddev_Samp_Order_By>;
  sum?: Maybe<Course_Player_Sum_Order_By>;
  var_pop?: Maybe<Course_Player_Var_Pop_Order_By>;
  var_samp?: Maybe<Course_Player_Var_Samp_Order_By>;
  variance?: Maybe<Course_Player_Variance_Order_By>;
};

/** aggregate avg on columns */
export type Course_Player_Avg_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "course_player" */
export type Course_Player_Avg_Order_By = {
  courseId?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "course_player". All fields are combined with a logical 'AND'. */
export type Course_Player_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Course_Player_Bool_Exp>>>;
  _not?: Maybe<Course_Player_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Course_Player_Bool_Exp>>>;
  course?: Maybe<Course_Bool_Exp>;
  courseId?: Maybe<Int_Comparison_Exp>;
  player?: Maybe<Player_Bool_Exp>;
  playerId?: Maybe<Int_Comparison_Exp>;
  playerRounds?: Maybe<Player_Round_Bool_Exp>;
  scores?: Maybe<Score_Bool_Exp>;
  scoringInfo?: Maybe<Scoring_Info_Bool_Exp>;
  skins?: Maybe<Skins_Bool_Exp>;
};

/** aggregate max on columns */
export type Course_Player_Max_Fields = {
  courseId?: Maybe<Scalars['Int']>;
  playerId?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "course_player" */
export type Course_Player_Max_Order_By = {
  courseId?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Course_Player_Min_Fields = {
  courseId?: Maybe<Scalars['Int']>;
  playerId?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "course_player" */
export type Course_Player_Min_Order_By = {
  courseId?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
};

/** ordering options when selecting data from "course_player" */
export type Course_Player_Order_By = {
  course?: Maybe<Course_Order_By>;
  courseId?: Maybe<Order_By>;
  player?: Maybe<Player_Order_By>;
  playerId?: Maybe<Order_By>;
  playerRounds_aggregate?: Maybe<Player_Round_Aggregate_Order_By>;
  scores_aggregate?: Maybe<Score_Aggregate_Order_By>;
  scoringInfo_aggregate?: Maybe<Scoring_Info_Aggregate_Order_By>;
  skins_aggregate?: Maybe<Skins_Aggregate_Order_By>;
};

/** select columns of table "course_player" */
export enum Course_Player_Select_Column {
  /** column name */
  CourseId = 'courseId',
  /** column name */
  PlayerId = 'playerId'
}

/** aggregate stddev on columns */
export type Course_Player_Stddev_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "course_player" */
export type Course_Player_Stddev_Order_By = {
  courseId?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Course_Player_Stddev_Pop_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "course_player" */
export type Course_Player_Stddev_Pop_Order_By = {
  courseId?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Course_Player_Stddev_Samp_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "course_player" */
export type Course_Player_Stddev_Samp_Order_By = {
  courseId?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Course_Player_Sum_Fields = {
  courseId?: Maybe<Scalars['Int']>;
  playerId?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "course_player" */
export type Course_Player_Sum_Order_By = {
  courseId?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
};

/** aggregate var_pop on columns */
export type Course_Player_Var_Pop_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "course_player" */
export type Course_Player_Var_Pop_Order_By = {
  courseId?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Course_Player_Var_Samp_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "course_player" */
export type Course_Player_Var_Samp_Order_By = {
  courseId?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Course_Player_Variance_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "course_player" */
export type Course_Player_Variance_Order_By = {
  courseId?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
};

/** select columns of table "course" */
export enum Course_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Img = 'img',
  /** column name */
  Location = 'location',
  /** column name */
  Name = 'name',
  /** column name */
  Slug = 'slug'
}

/** input type for updating data in table "course" */
export type Course_Set_Input = {
  id?: Maybe<Scalars['Int']>;
  img?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['point']>;
  name?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Course_Stddev_Fields = {
  id?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "course" */
export type Course_Stddev_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Course_Stddev_Pop_Fields = {
  id?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "course" */
export type Course_Stddev_Pop_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Course_Stddev_Samp_Fields = {
  id?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "course" */
export type Course_Stddev_Samp_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Course_Sum_Fields = {
  id?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "course" */
export type Course_Sum_Order_By = {
  id?: Maybe<Order_By>;
};

/** update columns of table "course" */
export enum Course_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Img = 'img',
  /** column name */
  Location = 'location',
  /** column name */
  Name = 'name',
  /** column name */
  Slug = 'slug'
}

/** aggregate var_pop on columns */
export type Course_Var_Pop_Fields = {
  id?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "course" */
export type Course_Var_Pop_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Course_Var_Samp_Fields = {
  id?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "course" */
export type Course_Var_Samp_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Course_Variance_Fields = {
  id?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "course" */
export type Course_Variance_Order_By = {
  id?: Maybe<Order_By>;
};

/** columns and relationships of "hole" */
export type Hole = {
  /** An object relationship */
  course: Course;
  courseId: Scalars['Int'];
  handicap?: Maybe<Scalars['Int']>;
  nickname?: Maybe<Scalars['String']>;
  number: Scalars['Int'];
  par: Scalars['Int'];
  /** An array relationship */
  scores: Array<Score>;
  /** An aggregated array relationship */
  scores_aggregate: Score_Aggregate;
  /** An array relationship */
  scoringInfo: Array<Scoring_Info>;
  /** An aggregated array relationship */
  scoringInfo_aggregate: Scoring_Info_Aggregate;
  yards?: Maybe<Scalars['Int']>;
};


/** columns and relationships of "hole" */
export type HoleScoresArgs = {
  distinct_on?: Maybe<Array<Score_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Score_Order_By>>;
  where?: Maybe<Score_Bool_Exp>;
};


/** columns and relationships of "hole" */
export type HoleScores_AggregateArgs = {
  distinct_on?: Maybe<Array<Score_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Score_Order_By>>;
  where?: Maybe<Score_Bool_Exp>;
};


/** columns and relationships of "hole" */
export type HoleScoringInfoArgs = {
  distinct_on?: Maybe<Array<Scoring_Info_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Scoring_Info_Order_By>>;
  where?: Maybe<Scoring_Info_Bool_Exp>;
};


/** columns and relationships of "hole" */
export type HoleScoringInfo_AggregateArgs = {
  distinct_on?: Maybe<Array<Scoring_Info_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Scoring_Info_Order_By>>;
  where?: Maybe<Scoring_Info_Bool_Exp>;
};

/** aggregated selection of "hole" */
export type Hole_Aggregate = {
  aggregate?: Maybe<Hole_Aggregate_Fields>;
  nodes: Array<Hole>;
};

/** aggregate fields of "hole" */
export type Hole_Aggregate_Fields = {
  avg?: Maybe<Hole_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Hole_Max_Fields>;
  min?: Maybe<Hole_Min_Fields>;
  stddev?: Maybe<Hole_Stddev_Fields>;
  stddev_pop?: Maybe<Hole_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Hole_Stddev_Samp_Fields>;
  sum?: Maybe<Hole_Sum_Fields>;
  var_pop?: Maybe<Hole_Var_Pop_Fields>;
  var_samp?: Maybe<Hole_Var_Samp_Fields>;
  variance?: Maybe<Hole_Variance_Fields>;
};


/** aggregate fields of "hole" */
export type Hole_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Hole_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "hole" */
export type Hole_Aggregate_Order_By = {
  avg?: Maybe<Hole_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Hole_Max_Order_By>;
  min?: Maybe<Hole_Min_Order_By>;
  stddev?: Maybe<Hole_Stddev_Order_By>;
  stddev_pop?: Maybe<Hole_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Hole_Stddev_Samp_Order_By>;
  sum?: Maybe<Hole_Sum_Order_By>;
  var_pop?: Maybe<Hole_Var_Pop_Order_By>;
  var_samp?: Maybe<Hole_Var_Samp_Order_By>;
  variance?: Maybe<Hole_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "hole" */
export type Hole_Arr_Rel_Insert_Input = {
  data: Array<Hole_Insert_Input>;
  on_conflict?: Maybe<Hole_On_Conflict>;
};

/** aggregate avg on columns */
export type Hole_Avg_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  handicap?: Maybe<Scalars['Float']>;
  number?: Maybe<Scalars['Float']>;
  par?: Maybe<Scalars['Float']>;
  yards?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "hole" */
export type Hole_Avg_Order_By = {
  courseId?: Maybe<Order_By>;
  handicap?: Maybe<Order_By>;
  number?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  yards?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "hole". All fields are combined with a logical 'AND'. */
export type Hole_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Hole_Bool_Exp>>>;
  _not?: Maybe<Hole_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Hole_Bool_Exp>>>;
  course?: Maybe<Course_Bool_Exp>;
  courseId?: Maybe<Int_Comparison_Exp>;
  handicap?: Maybe<Int_Comparison_Exp>;
  nickname?: Maybe<String_Comparison_Exp>;
  number?: Maybe<Int_Comparison_Exp>;
  par?: Maybe<Int_Comparison_Exp>;
  scores?: Maybe<Score_Bool_Exp>;
  scoringInfo?: Maybe<Scoring_Info_Bool_Exp>;
  yards?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "hole" */
export enum Hole_Constraint {
  /** unique or primary key constraint */
  HolePkey = 'hole_pkey'
}

/** input type for incrementing integer column in table "hole" */
export type Hole_Inc_Input = {
  courseId?: Maybe<Scalars['Int']>;
  handicap?: Maybe<Scalars['Int']>;
  number?: Maybe<Scalars['Int']>;
  par?: Maybe<Scalars['Int']>;
  yards?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "hole" */
export type Hole_Insert_Input = {
  course?: Maybe<Course_Obj_Rel_Insert_Input>;
  courseId?: Maybe<Scalars['Int']>;
  handicap?: Maybe<Scalars['Int']>;
  nickname?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['Int']>;
  par?: Maybe<Scalars['Int']>;
  scores?: Maybe<Score_Arr_Rel_Insert_Input>;
  yards?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type Hole_Max_Fields = {
  courseId?: Maybe<Scalars['Int']>;
  handicap?: Maybe<Scalars['Int']>;
  nickname?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['Int']>;
  par?: Maybe<Scalars['Int']>;
  yards?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "hole" */
export type Hole_Max_Order_By = {
  courseId?: Maybe<Order_By>;
  handicap?: Maybe<Order_By>;
  nickname?: Maybe<Order_By>;
  number?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  yards?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Hole_Min_Fields = {
  courseId?: Maybe<Scalars['Int']>;
  handicap?: Maybe<Scalars['Int']>;
  nickname?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['Int']>;
  par?: Maybe<Scalars['Int']>;
  yards?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "hole" */
export type Hole_Min_Order_By = {
  courseId?: Maybe<Order_By>;
  handicap?: Maybe<Order_By>;
  nickname?: Maybe<Order_By>;
  number?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  yards?: Maybe<Order_By>;
};

/** response of any mutation on the table "hole" */
export type Hole_Mutation_Response = {
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Hole>;
};

/** input type for inserting object relation for remote table "hole" */
export type Hole_Obj_Rel_Insert_Input = {
  data: Hole_Insert_Input;
  on_conflict?: Maybe<Hole_On_Conflict>;
};

/** on conflict condition type for table "hole" */
export type Hole_On_Conflict = {
  constraint: Hole_Constraint;
  update_columns: Array<Hole_Update_Column>;
  where?: Maybe<Hole_Bool_Exp>;
};

/** ordering options when selecting data from "hole" */
export type Hole_Order_By = {
  course?: Maybe<Course_Order_By>;
  courseId?: Maybe<Order_By>;
  handicap?: Maybe<Order_By>;
  nickname?: Maybe<Order_By>;
  number?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  scores_aggregate?: Maybe<Score_Aggregate_Order_By>;
  scoringInfo_aggregate?: Maybe<Scoring_Info_Aggregate_Order_By>;
  yards?: Maybe<Order_By>;
};

/** primary key columns input for table: "hole" */
export type Hole_Pk_Columns_Input = {
  courseId: Scalars['Int'];
  number: Scalars['Int'];
};

/** select columns of table "hole" */
export enum Hole_Select_Column {
  /** column name */
  CourseId = 'courseId',
  /** column name */
  Handicap = 'handicap',
  /** column name */
  Nickname = 'nickname',
  /** column name */
  Number = 'number',
  /** column name */
  Par = 'par',
  /** column name */
  Yards = 'yards'
}

/** input type for updating data in table "hole" */
export type Hole_Set_Input = {
  courseId?: Maybe<Scalars['Int']>;
  handicap?: Maybe<Scalars['Int']>;
  nickname?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['Int']>;
  par?: Maybe<Scalars['Int']>;
  yards?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type Hole_Stddev_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  handicap?: Maybe<Scalars['Float']>;
  number?: Maybe<Scalars['Float']>;
  par?: Maybe<Scalars['Float']>;
  yards?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "hole" */
export type Hole_Stddev_Order_By = {
  courseId?: Maybe<Order_By>;
  handicap?: Maybe<Order_By>;
  number?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  yards?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Hole_Stddev_Pop_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  handicap?: Maybe<Scalars['Float']>;
  number?: Maybe<Scalars['Float']>;
  par?: Maybe<Scalars['Float']>;
  yards?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "hole" */
export type Hole_Stddev_Pop_Order_By = {
  courseId?: Maybe<Order_By>;
  handicap?: Maybe<Order_By>;
  number?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  yards?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Hole_Stddev_Samp_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  handicap?: Maybe<Scalars['Float']>;
  number?: Maybe<Scalars['Float']>;
  par?: Maybe<Scalars['Float']>;
  yards?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "hole" */
export type Hole_Stddev_Samp_Order_By = {
  courseId?: Maybe<Order_By>;
  handicap?: Maybe<Order_By>;
  number?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  yards?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Hole_Sum_Fields = {
  courseId?: Maybe<Scalars['Int']>;
  handicap?: Maybe<Scalars['Int']>;
  number?: Maybe<Scalars['Int']>;
  par?: Maybe<Scalars['Int']>;
  yards?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "hole" */
export type Hole_Sum_Order_By = {
  courseId?: Maybe<Order_By>;
  handicap?: Maybe<Order_By>;
  number?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  yards?: Maybe<Order_By>;
};

/** update columns of table "hole" */
export enum Hole_Update_Column {
  /** column name */
  CourseId = 'courseId',
  /** column name */
  Handicap = 'handicap',
  /** column name */
  Nickname = 'nickname',
  /** column name */
  Number = 'number',
  /** column name */
  Par = 'par',
  /** column name */
  Yards = 'yards'
}

/** aggregate var_pop on columns */
export type Hole_Var_Pop_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  handicap?: Maybe<Scalars['Float']>;
  number?: Maybe<Scalars['Float']>;
  par?: Maybe<Scalars['Float']>;
  yards?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "hole" */
export type Hole_Var_Pop_Order_By = {
  courseId?: Maybe<Order_By>;
  handicap?: Maybe<Order_By>;
  number?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  yards?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Hole_Var_Samp_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  handicap?: Maybe<Scalars['Float']>;
  number?: Maybe<Scalars['Float']>;
  par?: Maybe<Scalars['Float']>;
  yards?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "hole" */
export type Hole_Var_Samp_Order_By = {
  courseId?: Maybe<Order_By>;
  handicap?: Maybe<Order_By>;
  number?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  yards?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Hole_Variance_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  handicap?: Maybe<Scalars['Float']>;
  number?: Maybe<Scalars['Float']>;
  par?: Maybe<Scalars['Float']>;
  yards?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "hole" */
export type Hole_Variance_Order_By = {
  courseId?: Maybe<Order_By>;
  handicap?: Maybe<Order_By>;
  number?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  yards?: Maybe<Order_By>;
};

/** mutation root */
export type Mutation_Root = {
  /** delete single row from the table: "course" */
  deleteCourse?: Maybe<Course>;
  /** delete data from the table: "course" */
  deleteCourses?: Maybe<Course_Mutation_Response>;
  /** delete single row from the table: "hole" */
  deleteHole?: Maybe<Hole>;
  /** delete data from the table: "hole" */
  deleteHoles?: Maybe<Hole_Mutation_Response>;
  /** delete single row from the table: "player" */
  deletePlayer?: Maybe<Player>;
  /** delete data from the table: "player" */
  deletePlayers?: Maybe<Player_Mutation_Response>;
  /** delete single row from the table: "round" */
  deleteRound?: Maybe<Round>;
  /** delete data from the table: "round" */
  deleteRounds?: Maybe<Round_Mutation_Response>;
  /** delete single row from the table: "score" */
  deleteScore?: Maybe<Score>;
  /** delete data from the table: "score" */
  deleteScores?: Maybe<Score_Mutation_Response>;
  /** insert a single row into the table: "course" */
  insertCourse?: Maybe<Course>;
  /** insert data into the table: "course" */
  insertCourses?: Maybe<Course_Mutation_Response>;
  /** insert a single row into the table: "hole" */
  insertHole?: Maybe<Hole>;
  /** insert data into the table: "hole" */
  insertHoles?: Maybe<Hole_Mutation_Response>;
  /** insert a single row into the table: "player" */
  insertPlayer?: Maybe<Player>;
  /** insert data into the table: "player" */
  insertPlayers?: Maybe<Player_Mutation_Response>;
  /** insert a single row into the table: "round" */
  insertRound?: Maybe<Round>;
  /** insert data into the table: "round" */
  insertRounds?: Maybe<Round_Mutation_Response>;
  /** insert a single row into the table: "score" */
  insertScore?: Maybe<Score>;
  /** insert data into the table: "score" */
  insertScores?: Maybe<Score_Mutation_Response>;
  /** update single row of the table: "course" */
  updateCourse?: Maybe<Course>;
  /** update data of the table: "course" */
  updateCourses?: Maybe<Course_Mutation_Response>;
  /** update single row of the table: "hole" */
  updateHole?: Maybe<Hole>;
  /** update data of the table: "hole" */
  updateHoles?: Maybe<Hole_Mutation_Response>;
  /** update single row of the table: "player" */
  updatePlayer?: Maybe<Player>;
  /** update data of the table: "player" */
  updatePlayers?: Maybe<Player_Mutation_Response>;
  /** update single row of the table: "round" */
  updateRound?: Maybe<Round>;
  /** update data of the table: "round" */
  updateRounds?: Maybe<Round_Mutation_Response>;
  /** update single row of the table: "score" */
  updateScore?: Maybe<Score>;
  /** update data of the table: "score" */
  updateScores?: Maybe<Score_Mutation_Response>;
};


/** mutation root */
export type Mutation_RootDeleteCourseArgs = {
  id: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootDeleteCoursesArgs = {
  where: Course_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDeleteHoleArgs = {
  courseId: Scalars['Int'];
  number: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootDeleteHolesArgs = {
  where: Hole_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDeletePlayerArgs = {
  id: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootDeletePlayersArgs = {
  where: Player_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDeleteRoundArgs = {
  id: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootDeleteRoundsArgs = {
  where: Round_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDeleteScoreArgs = {
  holeNumber: Scalars['Int'];
  playerId: Scalars['Int'];
  roundId: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootDeleteScoresArgs = {
  where: Score_Bool_Exp;
};


/** mutation root */
export type Mutation_RootInsertCourseArgs = {
  object: Course_Insert_Input;
  on_conflict?: Maybe<Course_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsertCoursesArgs = {
  objects: Array<Course_Insert_Input>;
  on_conflict?: Maybe<Course_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsertHoleArgs = {
  object: Hole_Insert_Input;
  on_conflict?: Maybe<Hole_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsertHolesArgs = {
  objects: Array<Hole_Insert_Input>;
  on_conflict?: Maybe<Hole_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsertPlayerArgs = {
  object: Player_Insert_Input;
  on_conflict?: Maybe<Player_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsertPlayersArgs = {
  objects: Array<Player_Insert_Input>;
  on_conflict?: Maybe<Player_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsertRoundArgs = {
  object: Round_Insert_Input;
  on_conflict?: Maybe<Round_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsertRoundsArgs = {
  objects: Array<Round_Insert_Input>;
  on_conflict?: Maybe<Round_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsertScoreArgs = {
  object: Score_Insert_Input;
  on_conflict?: Maybe<Score_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsertScoresArgs = {
  objects: Array<Score_Insert_Input>;
  on_conflict?: Maybe<Score_On_Conflict>;
};


/** mutation root */
export type Mutation_RootUpdateCourseArgs = {
  _inc?: Maybe<Course_Inc_Input>;
  _set?: Maybe<Course_Set_Input>;
  pk_columns: Course_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdateCoursesArgs = {
  _inc?: Maybe<Course_Inc_Input>;
  _set?: Maybe<Course_Set_Input>;
  where: Course_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdateHoleArgs = {
  _inc?: Maybe<Hole_Inc_Input>;
  _set?: Maybe<Hole_Set_Input>;
  pk_columns: Hole_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdateHolesArgs = {
  _inc?: Maybe<Hole_Inc_Input>;
  _set?: Maybe<Hole_Set_Input>;
  where: Hole_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdatePlayerArgs = {
  _inc?: Maybe<Player_Inc_Input>;
  _set?: Maybe<Player_Set_Input>;
  pk_columns: Player_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdatePlayersArgs = {
  _inc?: Maybe<Player_Inc_Input>;
  _set?: Maybe<Player_Set_Input>;
  where: Player_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdateRoundArgs = {
  _inc?: Maybe<Round_Inc_Input>;
  _set?: Maybe<Round_Set_Input>;
  pk_columns: Round_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdateRoundsArgs = {
  _inc?: Maybe<Round_Inc_Input>;
  _set?: Maybe<Round_Set_Input>;
  where: Round_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdateScoreArgs = {
  _inc?: Maybe<Score_Inc_Input>;
  _set?: Maybe<Score_Set_Input>;
  pk_columns: Score_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdateScoresArgs = {
  _inc?: Maybe<Score_Inc_Input>;
  _set?: Maybe<Score_Set_Input>;
  where: Score_Bool_Exp;
};


/** expression to compare columns of type numeric. All fields are combined with logical 'AND'. */
export type Numeric_Comparison_Exp = {
  _eq?: Maybe<Scalars['numeric']>;
  _gt?: Maybe<Scalars['numeric']>;
  _gte?: Maybe<Scalars['numeric']>;
  _in?: Maybe<Array<Scalars['numeric']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['numeric']>;
  _lte?: Maybe<Scalars['numeric']>;
  _neq?: Maybe<Scalars['numeric']>;
  _nin?: Maybe<Array<Scalars['numeric']>>;
};

/** column ordering options */
export enum Order_By {
  /** in the ascending order, nulls last */
  Asc = 'asc',
  /** in the ascending order, nulls first */
  AscNullsFirst = 'asc_nulls_first',
  /** in the ascending order, nulls last */
  AscNullsLast = 'asc_nulls_last',
  /** in the descending order, nulls first */
  Desc = 'desc',
  /** in the descending order, nulls first */
  DescNullsFirst = 'desc_nulls_first',
  /** in the descending order, nulls last */
  DescNullsLast = 'desc_nulls_last'
}

/** columns and relationships of "player" */
export type Player = {
  /** A computed field, executes function "courses_for_player" */
  courses?: Maybe<Array<Course>>;
  email: Scalars['String'];
  firstName: Scalars['String'];
  /** A computed field, executes function "player_full_name" */
  fullName?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
  img?: Maybe<Scalars['String']>;
  lastName: Scalars['String'];
  nickname: Scalars['String'];
  /** An array relationship */
  playerRounds: Array<Player_Round>;
  /** An aggregated array relationship */
  playerRounds_aggregate: Player_Round_Aggregate;
  /** A computed field, executes function "rounds_for_player" */
  rounds?: Maybe<Array<Round>>;
  /** An array relationship */
  scores: Array<Score>;
  /** An aggregated array relationship */
  scores_aggregate: Score_Aggregate;
  /** An array relationship */
  scoringInfo: Array<Scoring_Info>;
  /** An aggregated array relationship */
  scoringInfo_aggregate: Scoring_Info_Aggregate;
  slug: Scalars['String'];
};


/** columns and relationships of "player" */
export type PlayerCoursesArgs = {
  distinct_on?: Maybe<Array<Course_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Course_Order_By>>;
  where?: Maybe<Course_Bool_Exp>;
};


/** columns and relationships of "player" */
export type PlayerPlayerRoundsArgs = {
  distinct_on?: Maybe<Array<Player_Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Round_Order_By>>;
  where?: Maybe<Player_Round_Bool_Exp>;
};


/** columns and relationships of "player" */
export type PlayerPlayerRounds_AggregateArgs = {
  distinct_on?: Maybe<Array<Player_Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Round_Order_By>>;
  where?: Maybe<Player_Round_Bool_Exp>;
};


/** columns and relationships of "player" */
export type PlayerRoundsArgs = {
  distinct_on?: Maybe<Array<Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Round_Order_By>>;
  where?: Maybe<Round_Bool_Exp>;
};


/** columns and relationships of "player" */
export type PlayerScoresArgs = {
  distinct_on?: Maybe<Array<Score_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Score_Order_By>>;
  where?: Maybe<Score_Bool_Exp>;
};


/** columns and relationships of "player" */
export type PlayerScores_AggregateArgs = {
  distinct_on?: Maybe<Array<Score_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Score_Order_By>>;
  where?: Maybe<Score_Bool_Exp>;
};


/** columns and relationships of "player" */
export type PlayerScoringInfoArgs = {
  distinct_on?: Maybe<Array<Scoring_Info_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Scoring_Info_Order_By>>;
  where?: Maybe<Scoring_Info_Bool_Exp>;
};


/** columns and relationships of "player" */
export type PlayerScoringInfo_AggregateArgs = {
  distinct_on?: Maybe<Array<Scoring_Info_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Scoring_Info_Order_By>>;
  where?: Maybe<Scoring_Info_Bool_Exp>;
};

/** aggregated selection of "player" */
export type Player_Aggregate = {
  aggregate?: Maybe<Player_Aggregate_Fields>;
  nodes: Array<Player>;
};

/** aggregate fields of "player" */
export type Player_Aggregate_Fields = {
  avg?: Maybe<Player_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Player_Max_Fields>;
  min?: Maybe<Player_Min_Fields>;
  stddev?: Maybe<Player_Stddev_Fields>;
  stddev_pop?: Maybe<Player_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Player_Stddev_Samp_Fields>;
  sum?: Maybe<Player_Sum_Fields>;
  var_pop?: Maybe<Player_Var_Pop_Fields>;
  var_samp?: Maybe<Player_Var_Samp_Fields>;
  variance?: Maybe<Player_Variance_Fields>;
};


/** aggregate fields of "player" */
export type Player_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Player_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "player" */
export type Player_Aggregate_Order_By = {
  avg?: Maybe<Player_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Player_Max_Order_By>;
  min?: Maybe<Player_Min_Order_By>;
  stddev?: Maybe<Player_Stddev_Order_By>;
  stddev_pop?: Maybe<Player_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Player_Stddev_Samp_Order_By>;
  sum?: Maybe<Player_Sum_Order_By>;
  var_pop?: Maybe<Player_Var_Pop_Order_By>;
  var_samp?: Maybe<Player_Var_Samp_Order_By>;
  variance?: Maybe<Player_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "player" */
export type Player_Arr_Rel_Insert_Input = {
  data: Array<Player_Insert_Input>;
  on_conflict?: Maybe<Player_On_Conflict>;
};

/** aggregate avg on columns */
export type Player_Avg_Fields = {
  id?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "player" */
export type Player_Avg_Order_By = {
  id?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "player". All fields are combined with a logical 'AND'. */
export type Player_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Player_Bool_Exp>>>;
  _not?: Maybe<Player_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Player_Bool_Exp>>>;
  email?: Maybe<String_Comparison_Exp>;
  firstName?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  img?: Maybe<String_Comparison_Exp>;
  lastName?: Maybe<String_Comparison_Exp>;
  nickname?: Maybe<String_Comparison_Exp>;
  playerRounds?: Maybe<Player_Round_Bool_Exp>;
  scores?: Maybe<Score_Bool_Exp>;
  scoringInfo?: Maybe<Scoring_Info_Bool_Exp>;
  slug?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "player" */
export enum Player_Constraint {
  /** unique or primary key constraint */
  PlayersHandleKey = 'players_handle_key',
  /** unique or primary key constraint */
  PlayersIdKey = 'players_id_key',
  /** unique or primary key constraint */
  PlayersPkey = 'players_pkey'
}

/** input type for incrementing integer column in table "player" */
export type Player_Inc_Input = {
  id?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "player" */
export type Player_Insert_Input = {
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  img?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  scores?: Maybe<Score_Arr_Rel_Insert_Input>;
  slug?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Player_Max_Fields = {
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  img?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "player" */
export type Player_Max_Order_By = {
  email?: Maybe<Order_By>;
  firstName?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  img?: Maybe<Order_By>;
  lastName?: Maybe<Order_By>;
  nickname?: Maybe<Order_By>;
  slug?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Player_Min_Fields = {
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  img?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "player" */
export type Player_Min_Order_By = {
  email?: Maybe<Order_By>;
  firstName?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  img?: Maybe<Order_By>;
  lastName?: Maybe<Order_By>;
  nickname?: Maybe<Order_By>;
  slug?: Maybe<Order_By>;
};

/** response of any mutation on the table "player" */
export type Player_Mutation_Response = {
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Player>;
};

/** input type for inserting object relation for remote table "player" */
export type Player_Obj_Rel_Insert_Input = {
  data: Player_Insert_Input;
  on_conflict?: Maybe<Player_On_Conflict>;
};

/** on conflict condition type for table "player" */
export type Player_On_Conflict = {
  constraint: Player_Constraint;
  update_columns: Array<Player_Update_Column>;
  where?: Maybe<Player_Bool_Exp>;
};

/** ordering options when selecting data from "player" */
export type Player_Order_By = {
  email?: Maybe<Order_By>;
  firstName?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  img?: Maybe<Order_By>;
  lastName?: Maybe<Order_By>;
  nickname?: Maybe<Order_By>;
  playerRounds_aggregate?: Maybe<Player_Round_Aggregate_Order_By>;
  scores_aggregate?: Maybe<Score_Aggregate_Order_By>;
  scoringInfo_aggregate?: Maybe<Scoring_Info_Aggregate_Order_By>;
  slug?: Maybe<Order_By>;
};

/** primary key columns input for table: "player" */
export type Player_Pk_Columns_Input = {
  id: Scalars['Int'];
};

/** columns and relationships of "player_round" */
export type Player_Round = {
  complete?: Maybe<Scalars['Boolean']>;
  /** An object relationship */
  course?: Maybe<Course>;
  courseId?: Maybe<Scalars['Int']>;
  courseRank?: Maybe<Scalars['bigint']>;
  par?: Maybe<Scalars['bigint']>;
  /** An object relationship */
  player?: Maybe<Player>;
  playerCourseRank?: Maybe<Scalars['bigint']>;
  playerId?: Maybe<Scalars['Int']>;
  relativeScore?: Maybe<Scalars['bigint']>;
  /** An object relationship */
  round?: Maybe<Round>;
  roundBountyWinner?: Maybe<Scalars['Boolean']>;
  roundId?: Maybe<Scalars['Int']>;
  roundWinnings?: Maybe<Scalars['numeric']>;
  score?: Maybe<Scalars['bigint']>;
  /** An array relationship */
  scores: Array<Score>;
  /** An aggregated array relationship */
  scores_aggregate: Score_Aggregate;
  /** An array relationship */
  skins: Array<Skins>;
  skinsWinnings?: Maybe<Scalars['numeric']>;
  /** An aggregated array relationship */
  skins_aggregate: Skins_Aggregate;
  totalWinnings?: Maybe<Scalars['numeric']>;
  winner?: Maybe<Scalars['Boolean']>;
};


/** columns and relationships of "player_round" */
export type Player_RoundScoresArgs = {
  distinct_on?: Maybe<Array<Score_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Score_Order_By>>;
  where?: Maybe<Score_Bool_Exp>;
};


/** columns and relationships of "player_round" */
export type Player_RoundScores_AggregateArgs = {
  distinct_on?: Maybe<Array<Score_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Score_Order_By>>;
  where?: Maybe<Score_Bool_Exp>;
};


/** columns and relationships of "player_round" */
export type Player_RoundSkinsArgs = {
  distinct_on?: Maybe<Array<Skins_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Skins_Order_By>>;
  where?: Maybe<Skins_Bool_Exp>;
};


/** columns and relationships of "player_round" */
export type Player_RoundSkins_AggregateArgs = {
  distinct_on?: Maybe<Array<Skins_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Skins_Order_By>>;
  where?: Maybe<Skins_Bool_Exp>;
};

/** aggregated selection of "player_round" */
export type Player_Round_Aggregate = {
  aggregate?: Maybe<Player_Round_Aggregate_Fields>;
  nodes: Array<Player_Round>;
};

/** aggregate fields of "player_round" */
export type Player_Round_Aggregate_Fields = {
  avg?: Maybe<Player_Round_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Player_Round_Max_Fields>;
  min?: Maybe<Player_Round_Min_Fields>;
  stddev?: Maybe<Player_Round_Stddev_Fields>;
  stddev_pop?: Maybe<Player_Round_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Player_Round_Stddev_Samp_Fields>;
  sum?: Maybe<Player_Round_Sum_Fields>;
  var_pop?: Maybe<Player_Round_Var_Pop_Fields>;
  var_samp?: Maybe<Player_Round_Var_Samp_Fields>;
  variance?: Maybe<Player_Round_Variance_Fields>;
};


/** aggregate fields of "player_round" */
export type Player_Round_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Player_Round_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "player_round" */
export type Player_Round_Aggregate_Order_By = {
  avg?: Maybe<Player_Round_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Player_Round_Max_Order_By>;
  min?: Maybe<Player_Round_Min_Order_By>;
  stddev?: Maybe<Player_Round_Stddev_Order_By>;
  stddev_pop?: Maybe<Player_Round_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Player_Round_Stddev_Samp_Order_By>;
  sum?: Maybe<Player_Round_Sum_Order_By>;
  var_pop?: Maybe<Player_Round_Var_Pop_Order_By>;
  var_samp?: Maybe<Player_Round_Var_Samp_Order_By>;
  variance?: Maybe<Player_Round_Variance_Order_By>;
};

/** aggregate avg on columns */
export type Player_Round_Avg_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  courseRank?: Maybe<Scalars['Float']>;
  par?: Maybe<Scalars['Float']>;
  playerCourseRank?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  relativeScore?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  roundWinnings?: Maybe<Scalars['Float']>;
  score?: Maybe<Scalars['Float']>;
  skinsWinnings?: Maybe<Scalars['Float']>;
  totalWinnings?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "player_round" */
export type Player_Round_Avg_Order_By = {
  courseId?: Maybe<Order_By>;
  courseRank?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  playerCourseRank?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  roundWinnings?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
  skinsWinnings?: Maybe<Order_By>;
  totalWinnings?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "player_round". All fields are combined with a logical 'AND'. */
export type Player_Round_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Player_Round_Bool_Exp>>>;
  _not?: Maybe<Player_Round_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Player_Round_Bool_Exp>>>;
  complete?: Maybe<Boolean_Comparison_Exp>;
  course?: Maybe<Course_Bool_Exp>;
  courseId?: Maybe<Int_Comparison_Exp>;
  courseRank?: Maybe<Bigint_Comparison_Exp>;
  par?: Maybe<Bigint_Comparison_Exp>;
  player?: Maybe<Player_Bool_Exp>;
  playerCourseRank?: Maybe<Bigint_Comparison_Exp>;
  playerId?: Maybe<Int_Comparison_Exp>;
  relativeScore?: Maybe<Bigint_Comparison_Exp>;
  round?: Maybe<Round_Bool_Exp>;
  roundBountyWinner?: Maybe<Boolean_Comparison_Exp>;
  roundId?: Maybe<Int_Comparison_Exp>;
  roundWinnings?: Maybe<Numeric_Comparison_Exp>;
  score?: Maybe<Bigint_Comparison_Exp>;
  scores?: Maybe<Score_Bool_Exp>;
  skins?: Maybe<Skins_Bool_Exp>;
  skinsWinnings?: Maybe<Numeric_Comparison_Exp>;
  totalWinnings?: Maybe<Numeric_Comparison_Exp>;
  winner?: Maybe<Boolean_Comparison_Exp>;
};

/** aggregate max on columns */
export type Player_Round_Max_Fields = {
  courseId?: Maybe<Scalars['Int']>;
  courseRank?: Maybe<Scalars['bigint']>;
  par?: Maybe<Scalars['bigint']>;
  playerCourseRank?: Maybe<Scalars['bigint']>;
  playerId?: Maybe<Scalars['Int']>;
  relativeScore?: Maybe<Scalars['bigint']>;
  roundId?: Maybe<Scalars['Int']>;
  roundWinnings?: Maybe<Scalars['numeric']>;
  score?: Maybe<Scalars['bigint']>;
  skinsWinnings?: Maybe<Scalars['numeric']>;
  totalWinnings?: Maybe<Scalars['numeric']>;
};

/** order by max() on columns of table "player_round" */
export type Player_Round_Max_Order_By = {
  courseId?: Maybe<Order_By>;
  courseRank?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  playerCourseRank?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  roundWinnings?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
  skinsWinnings?: Maybe<Order_By>;
  totalWinnings?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Player_Round_Min_Fields = {
  courseId?: Maybe<Scalars['Int']>;
  courseRank?: Maybe<Scalars['bigint']>;
  par?: Maybe<Scalars['bigint']>;
  playerCourseRank?: Maybe<Scalars['bigint']>;
  playerId?: Maybe<Scalars['Int']>;
  relativeScore?: Maybe<Scalars['bigint']>;
  roundId?: Maybe<Scalars['Int']>;
  roundWinnings?: Maybe<Scalars['numeric']>;
  score?: Maybe<Scalars['bigint']>;
  skinsWinnings?: Maybe<Scalars['numeric']>;
  totalWinnings?: Maybe<Scalars['numeric']>;
};

/** order by min() on columns of table "player_round" */
export type Player_Round_Min_Order_By = {
  courseId?: Maybe<Order_By>;
  courseRank?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  playerCourseRank?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  roundWinnings?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
  skinsWinnings?: Maybe<Order_By>;
  totalWinnings?: Maybe<Order_By>;
};

/** ordering options when selecting data from "player_round" */
export type Player_Round_Order_By = {
  complete?: Maybe<Order_By>;
  course?: Maybe<Course_Order_By>;
  courseId?: Maybe<Order_By>;
  courseRank?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  player?: Maybe<Player_Order_By>;
  playerCourseRank?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  round?: Maybe<Round_Order_By>;
  roundBountyWinner?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  roundWinnings?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
  scores_aggregate?: Maybe<Score_Aggregate_Order_By>;
  skinsWinnings?: Maybe<Order_By>;
  skins_aggregate?: Maybe<Skins_Aggregate_Order_By>;
  totalWinnings?: Maybe<Order_By>;
  winner?: Maybe<Order_By>;
};

/** select columns of table "player_round" */
export enum Player_Round_Select_Column {
  /** column name */
  Complete = 'complete',
  /** column name */
  CourseId = 'courseId',
  /** column name */
  CourseRank = 'courseRank',
  /** column name */
  Par = 'par',
  /** column name */
  PlayerCourseRank = 'playerCourseRank',
  /** column name */
  PlayerId = 'playerId',
  /** column name */
  RelativeScore = 'relativeScore',
  /** column name */
  RoundBountyWinner = 'roundBountyWinner',
  /** column name */
  RoundId = 'roundId',
  /** column name */
  RoundWinnings = 'roundWinnings',
  /** column name */
  Score = 'score',
  /** column name */
  SkinsWinnings = 'skinsWinnings',
  /** column name */
  TotalWinnings = 'totalWinnings',
  /** column name */
  Winner = 'winner'
}

/** aggregate stddev on columns */
export type Player_Round_Stddev_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  courseRank?: Maybe<Scalars['Float']>;
  par?: Maybe<Scalars['Float']>;
  playerCourseRank?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  relativeScore?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  roundWinnings?: Maybe<Scalars['Float']>;
  score?: Maybe<Scalars['Float']>;
  skinsWinnings?: Maybe<Scalars['Float']>;
  totalWinnings?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "player_round" */
export type Player_Round_Stddev_Order_By = {
  courseId?: Maybe<Order_By>;
  courseRank?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  playerCourseRank?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  roundWinnings?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
  skinsWinnings?: Maybe<Order_By>;
  totalWinnings?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Player_Round_Stddev_Pop_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  courseRank?: Maybe<Scalars['Float']>;
  par?: Maybe<Scalars['Float']>;
  playerCourseRank?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  relativeScore?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  roundWinnings?: Maybe<Scalars['Float']>;
  score?: Maybe<Scalars['Float']>;
  skinsWinnings?: Maybe<Scalars['Float']>;
  totalWinnings?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "player_round" */
export type Player_Round_Stddev_Pop_Order_By = {
  courseId?: Maybe<Order_By>;
  courseRank?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  playerCourseRank?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  roundWinnings?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
  skinsWinnings?: Maybe<Order_By>;
  totalWinnings?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Player_Round_Stddev_Samp_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  courseRank?: Maybe<Scalars['Float']>;
  par?: Maybe<Scalars['Float']>;
  playerCourseRank?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  relativeScore?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  roundWinnings?: Maybe<Scalars['Float']>;
  score?: Maybe<Scalars['Float']>;
  skinsWinnings?: Maybe<Scalars['Float']>;
  totalWinnings?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "player_round" */
export type Player_Round_Stddev_Samp_Order_By = {
  courseId?: Maybe<Order_By>;
  courseRank?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  playerCourseRank?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  roundWinnings?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
  skinsWinnings?: Maybe<Order_By>;
  totalWinnings?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Player_Round_Sum_Fields = {
  courseId?: Maybe<Scalars['Int']>;
  courseRank?: Maybe<Scalars['bigint']>;
  par?: Maybe<Scalars['bigint']>;
  playerCourseRank?: Maybe<Scalars['bigint']>;
  playerId?: Maybe<Scalars['Int']>;
  relativeScore?: Maybe<Scalars['bigint']>;
  roundId?: Maybe<Scalars['Int']>;
  roundWinnings?: Maybe<Scalars['numeric']>;
  score?: Maybe<Scalars['bigint']>;
  skinsWinnings?: Maybe<Scalars['numeric']>;
  totalWinnings?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "player_round" */
export type Player_Round_Sum_Order_By = {
  courseId?: Maybe<Order_By>;
  courseRank?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  playerCourseRank?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  roundWinnings?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
  skinsWinnings?: Maybe<Order_By>;
  totalWinnings?: Maybe<Order_By>;
};

/** aggregate var_pop on columns */
export type Player_Round_Var_Pop_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  courseRank?: Maybe<Scalars['Float']>;
  par?: Maybe<Scalars['Float']>;
  playerCourseRank?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  relativeScore?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  roundWinnings?: Maybe<Scalars['Float']>;
  score?: Maybe<Scalars['Float']>;
  skinsWinnings?: Maybe<Scalars['Float']>;
  totalWinnings?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "player_round" */
export type Player_Round_Var_Pop_Order_By = {
  courseId?: Maybe<Order_By>;
  courseRank?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  playerCourseRank?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  roundWinnings?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
  skinsWinnings?: Maybe<Order_By>;
  totalWinnings?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Player_Round_Var_Samp_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  courseRank?: Maybe<Scalars['Float']>;
  par?: Maybe<Scalars['Float']>;
  playerCourseRank?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  relativeScore?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  roundWinnings?: Maybe<Scalars['Float']>;
  score?: Maybe<Scalars['Float']>;
  skinsWinnings?: Maybe<Scalars['Float']>;
  totalWinnings?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "player_round" */
export type Player_Round_Var_Samp_Order_By = {
  courseId?: Maybe<Order_By>;
  courseRank?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  playerCourseRank?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  roundWinnings?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
  skinsWinnings?: Maybe<Order_By>;
  totalWinnings?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Player_Round_Variance_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  courseRank?: Maybe<Scalars['Float']>;
  par?: Maybe<Scalars['Float']>;
  playerCourseRank?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  relativeScore?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  roundWinnings?: Maybe<Scalars['Float']>;
  score?: Maybe<Scalars['Float']>;
  skinsWinnings?: Maybe<Scalars['Float']>;
  totalWinnings?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "player_round" */
export type Player_Round_Variance_Order_By = {
  courseId?: Maybe<Order_By>;
  courseRank?: Maybe<Order_By>;
  par?: Maybe<Order_By>;
  playerCourseRank?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  roundWinnings?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
  skinsWinnings?: Maybe<Order_By>;
  totalWinnings?: Maybe<Order_By>;
};

/** select columns of table "player" */
export enum Player_Select_Column {
  /** column name */
  Email = 'email',
  /** column name */
  FirstName = 'firstName',
  /** column name */
  Id = 'id',
  /** column name */
  Img = 'img',
  /** column name */
  LastName = 'lastName',
  /** column name */
  Nickname = 'nickname',
  /** column name */
  Slug = 'slug'
}

/** input type for updating data in table "player" */
export type Player_Set_Input = {
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  img?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Player_Stddev_Fields = {
  id?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "player" */
export type Player_Stddev_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Player_Stddev_Pop_Fields = {
  id?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "player" */
export type Player_Stddev_Pop_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Player_Stddev_Samp_Fields = {
  id?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "player" */
export type Player_Stddev_Samp_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Player_Sum_Fields = {
  id?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "player" */
export type Player_Sum_Order_By = {
  id?: Maybe<Order_By>;
};

/** update columns of table "player" */
export enum Player_Update_Column {
  /** column name */
  Email = 'email',
  /** column name */
  FirstName = 'firstName',
  /** column name */
  Id = 'id',
  /** column name */
  Img = 'img',
  /** column name */
  LastName = 'lastName',
  /** column name */
  Nickname = 'nickname',
  /** column name */
  Slug = 'slug'
}

/** aggregate var_pop on columns */
export type Player_Var_Pop_Fields = {
  id?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "player" */
export type Player_Var_Pop_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Player_Var_Samp_Fields = {
  id?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "player" */
export type Player_Var_Samp_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Player_Variance_Fields = {
  id?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "player" */
export type Player_Variance_Order_By = {
  id?: Maybe<Order_By>;
};


/** expression to compare columns of type point. All fields are combined with logical 'AND'. */
export type Point_Comparison_Exp = {
  _eq?: Maybe<Scalars['point']>;
  _gt?: Maybe<Scalars['point']>;
  _gte?: Maybe<Scalars['point']>;
  _in?: Maybe<Array<Scalars['point']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['point']>;
  _lte?: Maybe<Scalars['point']>;
  _neq?: Maybe<Scalars['point']>;
  _nin?: Maybe<Array<Scalars['point']>>;
};

/** query root */
export type Query_Root = {
  /** fetch data from the table: "course" using primary key columns */
  course?: Maybe<Course>;
  /** fetch aggregated fields from the table: "course_player" */
  coursePlayerStats: Course_Player_Aggregate;
  /** fetch data from the table: "course_player" */
  coursePlayers: Array<Course_Player>;
  /** fetch aggregated fields from the table: "course" */
  courseStats: Course_Aggregate;
  /** fetch data from the table: "course" */
  courses: Array<Course>;
  /** fetch data from the table: "hole" using primary key columns */
  hole?: Maybe<Hole>;
  /** fetch aggregated fields from the table: "hole" */
  holeStats: Hole_Aggregate;
  /** fetch data from the table: "hole" */
  holes: Array<Hole>;
  /** fetch data from the table: "player" using primary key columns */
  player?: Maybe<Player>;
  /** fetch aggregated fields from the table: "player_round" */
  playerRoundStats: Player_Round_Aggregate;
  /** fetch data from the table: "player_round" */
  playerRounds: Array<Player_Round>;
  /** fetch aggregated fields from the table: "player" */
  playerStats: Player_Aggregate;
  /** fetch data from the table: "player" */
  players: Array<Player>;
  /** fetch data from the table: "round" using primary key columns */
  round?: Maybe<Round>;
  /** fetch aggregated fields from the table: "round" */
  roundStats: Round_Aggregate;
  /** fetch data from the table: "round" */
  rounds: Array<Round>;
  /** fetch data from the table: "score" using primary key columns */
  score?: Maybe<Score>;
  /** fetch aggregated fields from the table: "score" */
  scoreStats: Score_Aggregate;
  /** fetch data from the table: "score" */
  scores: Array<Score>;
  /** fetch data from the table: "scoring_info" */
  scoringInfo: Array<Scoring_Info>;
  /** fetch aggregated fields from the table: "scoring_info" */
  scoringStats: Scoring_Info_Aggregate;
  /** fetch aggregated fields from the table: "skins" */
  skinStats: Skins_Aggregate;
  /** fetch data from the table: "skins" */
  skins: Array<Skins>;
};


/** query root */
export type Query_RootCourseArgs = {
  id: Scalars['Int'];
};


/** query root */
export type Query_RootCoursePlayerStatsArgs = {
  distinct_on?: Maybe<Array<Course_Player_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Course_Player_Order_By>>;
  where?: Maybe<Course_Player_Bool_Exp>;
};


/** query root */
export type Query_RootCoursePlayersArgs = {
  distinct_on?: Maybe<Array<Course_Player_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Course_Player_Order_By>>;
  where?: Maybe<Course_Player_Bool_Exp>;
};


/** query root */
export type Query_RootCourseStatsArgs = {
  distinct_on?: Maybe<Array<Course_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Course_Order_By>>;
  where?: Maybe<Course_Bool_Exp>;
};


/** query root */
export type Query_RootCoursesArgs = {
  distinct_on?: Maybe<Array<Course_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Course_Order_By>>;
  where?: Maybe<Course_Bool_Exp>;
};


/** query root */
export type Query_RootHoleArgs = {
  courseId: Scalars['Int'];
  number: Scalars['Int'];
};


/** query root */
export type Query_RootHoleStatsArgs = {
  distinct_on?: Maybe<Array<Hole_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Hole_Order_By>>;
  where?: Maybe<Hole_Bool_Exp>;
};


/** query root */
export type Query_RootHolesArgs = {
  distinct_on?: Maybe<Array<Hole_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Hole_Order_By>>;
  where?: Maybe<Hole_Bool_Exp>;
};


/** query root */
export type Query_RootPlayerArgs = {
  id: Scalars['Int'];
};


/** query root */
export type Query_RootPlayerRoundStatsArgs = {
  distinct_on?: Maybe<Array<Player_Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Round_Order_By>>;
  where?: Maybe<Player_Round_Bool_Exp>;
};


/** query root */
export type Query_RootPlayerRoundsArgs = {
  distinct_on?: Maybe<Array<Player_Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Round_Order_By>>;
  where?: Maybe<Player_Round_Bool_Exp>;
};


/** query root */
export type Query_RootPlayerStatsArgs = {
  distinct_on?: Maybe<Array<Player_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Order_By>>;
  where?: Maybe<Player_Bool_Exp>;
};


/** query root */
export type Query_RootPlayersArgs = {
  distinct_on?: Maybe<Array<Player_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Order_By>>;
  where?: Maybe<Player_Bool_Exp>;
};


/** query root */
export type Query_RootRoundArgs = {
  id: Scalars['Int'];
};


/** query root */
export type Query_RootRoundStatsArgs = {
  distinct_on?: Maybe<Array<Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Round_Order_By>>;
  where?: Maybe<Round_Bool_Exp>;
};


/** query root */
export type Query_RootRoundsArgs = {
  distinct_on?: Maybe<Array<Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Round_Order_By>>;
  where?: Maybe<Round_Bool_Exp>;
};


/** query root */
export type Query_RootScoreArgs = {
  holeNumber: Scalars['Int'];
  playerId: Scalars['Int'];
  roundId: Scalars['Int'];
};


/** query root */
export type Query_RootScoreStatsArgs = {
  distinct_on?: Maybe<Array<Score_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Score_Order_By>>;
  where?: Maybe<Score_Bool_Exp>;
};


/** query root */
export type Query_RootScoresArgs = {
  distinct_on?: Maybe<Array<Score_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Score_Order_By>>;
  where?: Maybe<Score_Bool_Exp>;
};


/** query root */
export type Query_RootScoringInfoArgs = {
  distinct_on?: Maybe<Array<Scoring_Info_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Scoring_Info_Order_By>>;
  where?: Maybe<Scoring_Info_Bool_Exp>;
};


/** query root */
export type Query_RootScoringStatsArgs = {
  distinct_on?: Maybe<Array<Scoring_Info_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Scoring_Info_Order_By>>;
  where?: Maybe<Scoring_Info_Bool_Exp>;
};


/** query root */
export type Query_RootSkinStatsArgs = {
  distinct_on?: Maybe<Array<Skins_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Skins_Order_By>>;
  where?: Maybe<Skins_Bool_Exp>;
};


/** query root */
export type Query_RootSkinsArgs = {
  distinct_on?: Maybe<Array<Skins_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Skins_Order_By>>;
  where?: Maybe<Skins_Bool_Exp>;
};

/** columns and relationships of "round" */
export type Round = {
  /** An object relationship */
  course: Course;
  courseId: Scalars['Int'];
  date: Scalars['timestamp'];
  id: Scalars['Int'];
  name?: Maybe<Scalars['String']>;
  /** An array relationship */
  playerRounds: Array<Player_Round>;
  /** An aggregated array relationship */
  playerRounds_aggregate: Player_Round_Aggregate;
  roundBounty?: Maybe<Scalars['numeric']>;
  roundBountyPlayerIds: Scalars['_int4'];
  roundBountyTiebreakWinnerId?: Maybe<Scalars['Int']>;
  /** An array relationship */
  scores: Array<Score>;
  /** An aggregated array relationship */
  scores_aggregate: Score_Aggregate;
  skinsHoleBounty?: Maybe<Scalars['numeric']>;
  skinsPlayerIds: Scalars['_int4'];
  /** An array relationship */
  skinsPlayers: Array<Player>;
  /** An aggregated array relationship */
  skinsPlayers_aggregate: Player_Aggregate;
  /** An object relationship */
  skinsTiebreakWinner?: Maybe<Player>;
  skinsTiebreakWinnerId?: Maybe<Scalars['Int']>;
};


/** columns and relationships of "round" */
export type RoundPlayerRoundsArgs = {
  distinct_on?: Maybe<Array<Player_Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Round_Order_By>>;
  where?: Maybe<Player_Round_Bool_Exp>;
};


/** columns and relationships of "round" */
export type RoundPlayerRounds_AggregateArgs = {
  distinct_on?: Maybe<Array<Player_Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Round_Order_By>>;
  where?: Maybe<Player_Round_Bool_Exp>;
};


/** columns and relationships of "round" */
export type RoundScoresArgs = {
  distinct_on?: Maybe<Array<Score_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Score_Order_By>>;
  where?: Maybe<Score_Bool_Exp>;
};


/** columns and relationships of "round" */
export type RoundScores_AggregateArgs = {
  distinct_on?: Maybe<Array<Score_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Score_Order_By>>;
  where?: Maybe<Score_Bool_Exp>;
};


/** columns and relationships of "round" */
export type RoundSkinsPlayersArgs = {
  distinct_on?: Maybe<Array<Player_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Order_By>>;
  where?: Maybe<Player_Bool_Exp>;
};


/** columns and relationships of "round" */
export type RoundSkinsPlayers_AggregateArgs = {
  distinct_on?: Maybe<Array<Player_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Order_By>>;
  where?: Maybe<Player_Bool_Exp>;
};

/** aggregated selection of "round" */
export type Round_Aggregate = {
  aggregate?: Maybe<Round_Aggregate_Fields>;
  nodes: Array<Round>;
};

/** aggregate fields of "round" */
export type Round_Aggregate_Fields = {
  avg?: Maybe<Round_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Round_Max_Fields>;
  min?: Maybe<Round_Min_Fields>;
  stddev?: Maybe<Round_Stddev_Fields>;
  stddev_pop?: Maybe<Round_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Round_Stddev_Samp_Fields>;
  sum?: Maybe<Round_Sum_Fields>;
  var_pop?: Maybe<Round_Var_Pop_Fields>;
  var_samp?: Maybe<Round_Var_Samp_Fields>;
  variance?: Maybe<Round_Variance_Fields>;
};


/** aggregate fields of "round" */
export type Round_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Round_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "round" */
export type Round_Aggregate_Order_By = {
  avg?: Maybe<Round_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Round_Max_Order_By>;
  min?: Maybe<Round_Min_Order_By>;
  stddev?: Maybe<Round_Stddev_Order_By>;
  stddev_pop?: Maybe<Round_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Round_Stddev_Samp_Order_By>;
  sum?: Maybe<Round_Sum_Order_By>;
  var_pop?: Maybe<Round_Var_Pop_Order_By>;
  var_samp?: Maybe<Round_Var_Samp_Order_By>;
  variance?: Maybe<Round_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "round" */
export type Round_Arr_Rel_Insert_Input = {
  data: Array<Round_Insert_Input>;
  on_conflict?: Maybe<Round_On_Conflict>;
};

/** aggregate avg on columns */
export type Round_Avg_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  roundBounty?: Maybe<Scalars['Float']>;
  roundBountyTiebreakWinnerId?: Maybe<Scalars['Float']>;
  skinsHoleBounty?: Maybe<Scalars['Float']>;
  skinsTiebreakWinnerId?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "round" */
export type Round_Avg_Order_By = {
  courseId?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  roundBounty?: Maybe<Order_By>;
  roundBountyTiebreakWinnerId?: Maybe<Order_By>;
  skinsHoleBounty?: Maybe<Order_By>;
  skinsTiebreakWinnerId?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "round". All fields are combined with a logical 'AND'. */
export type Round_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Round_Bool_Exp>>>;
  _not?: Maybe<Round_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Round_Bool_Exp>>>;
  course?: Maybe<Course_Bool_Exp>;
  courseId?: Maybe<Int_Comparison_Exp>;
  date?: Maybe<Timestamp_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  playerRounds?: Maybe<Player_Round_Bool_Exp>;
  roundBounty?: Maybe<Numeric_Comparison_Exp>;
  roundBountyPlayerIds?: Maybe<_Int4_Comparison_Exp>;
  roundBountyTiebreakWinnerId?: Maybe<Int_Comparison_Exp>;
  scores?: Maybe<Score_Bool_Exp>;
  skinsHoleBounty?: Maybe<Numeric_Comparison_Exp>;
  skinsPlayerIds?: Maybe<_Int4_Comparison_Exp>;
  skinsPlayers?: Maybe<Player_Bool_Exp>;
  skinsTiebreakWinner?: Maybe<Player_Bool_Exp>;
  skinsTiebreakWinnerId?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "round" */
export enum Round_Constraint {
  /** unique or primary key constraint */
  RoundsPkey = 'Rounds_pkey'
}

/** input type for incrementing integer column in table "round" */
export type Round_Inc_Input = {
  courseId?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  roundBounty?: Maybe<Scalars['numeric']>;
  roundBountyTiebreakWinnerId?: Maybe<Scalars['Int']>;
  skinsHoleBounty?: Maybe<Scalars['numeric']>;
  skinsTiebreakWinnerId?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "round" */
export type Round_Insert_Input = {
  course?: Maybe<Course_Obj_Rel_Insert_Input>;
  courseId?: Maybe<Scalars['Int']>;
  date?: Maybe<Scalars['timestamp']>;
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  roundBounty?: Maybe<Scalars['numeric']>;
  roundBountyPlayerIds?: Maybe<Scalars['_int4']>;
  roundBountyTiebreakWinnerId?: Maybe<Scalars['Int']>;
  scores?: Maybe<Score_Arr_Rel_Insert_Input>;
  skinsHoleBounty?: Maybe<Scalars['numeric']>;
  skinsPlayerIds?: Maybe<Scalars['_int4']>;
  skinsPlayers?: Maybe<Player_Arr_Rel_Insert_Input>;
  skinsTiebreakWinner?: Maybe<Player_Obj_Rel_Insert_Input>;
  skinsTiebreakWinnerId?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type Round_Max_Fields = {
  courseId?: Maybe<Scalars['Int']>;
  date?: Maybe<Scalars['timestamp']>;
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  roundBounty?: Maybe<Scalars['numeric']>;
  roundBountyTiebreakWinnerId?: Maybe<Scalars['Int']>;
  skinsHoleBounty?: Maybe<Scalars['numeric']>;
  skinsTiebreakWinnerId?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "round" */
export type Round_Max_Order_By = {
  courseId?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  roundBounty?: Maybe<Order_By>;
  roundBountyTiebreakWinnerId?: Maybe<Order_By>;
  skinsHoleBounty?: Maybe<Order_By>;
  skinsTiebreakWinnerId?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Round_Min_Fields = {
  courseId?: Maybe<Scalars['Int']>;
  date?: Maybe<Scalars['timestamp']>;
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  roundBounty?: Maybe<Scalars['numeric']>;
  roundBountyTiebreakWinnerId?: Maybe<Scalars['Int']>;
  skinsHoleBounty?: Maybe<Scalars['numeric']>;
  skinsTiebreakWinnerId?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "round" */
export type Round_Min_Order_By = {
  courseId?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  roundBounty?: Maybe<Order_By>;
  roundBountyTiebreakWinnerId?: Maybe<Order_By>;
  skinsHoleBounty?: Maybe<Order_By>;
  skinsTiebreakWinnerId?: Maybe<Order_By>;
};

/** response of any mutation on the table "round" */
export type Round_Mutation_Response = {
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Round>;
};

/** input type for inserting object relation for remote table "round" */
export type Round_Obj_Rel_Insert_Input = {
  data: Round_Insert_Input;
  on_conflict?: Maybe<Round_On_Conflict>;
};

/** on conflict condition type for table "round" */
export type Round_On_Conflict = {
  constraint: Round_Constraint;
  update_columns: Array<Round_Update_Column>;
  where?: Maybe<Round_Bool_Exp>;
};

/** ordering options when selecting data from "round" */
export type Round_Order_By = {
  course?: Maybe<Course_Order_By>;
  courseId?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  playerRounds_aggregate?: Maybe<Player_Round_Aggregate_Order_By>;
  roundBounty?: Maybe<Order_By>;
  roundBountyPlayerIds?: Maybe<Order_By>;
  roundBountyTiebreakWinnerId?: Maybe<Order_By>;
  scores_aggregate?: Maybe<Score_Aggregate_Order_By>;
  skinsHoleBounty?: Maybe<Order_By>;
  skinsPlayerIds?: Maybe<Order_By>;
  skinsPlayers_aggregate?: Maybe<Player_Aggregate_Order_By>;
  skinsTiebreakWinner?: Maybe<Player_Order_By>;
  skinsTiebreakWinnerId?: Maybe<Order_By>;
};

/** primary key columns input for table: "round" */
export type Round_Pk_Columns_Input = {
  id: Scalars['Int'];
};

/** select columns of table "round" */
export enum Round_Select_Column {
  /** column name */
  CourseId = 'courseId',
  /** column name */
  Date = 'date',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  RoundBounty = 'roundBounty',
  /** column name */
  RoundBountyPlayerIds = 'roundBountyPlayerIds',
  /** column name */
  RoundBountyTiebreakWinnerId = 'roundBountyTiebreakWinnerId',
  /** column name */
  SkinsHoleBounty = 'skinsHoleBounty',
  /** column name */
  SkinsPlayerIds = 'skinsPlayerIds',
  /** column name */
  SkinsTiebreakWinnerId = 'skinsTiebreakWinnerId'
}

/** input type for updating data in table "round" */
export type Round_Set_Input = {
  courseId?: Maybe<Scalars['Int']>;
  date?: Maybe<Scalars['timestamp']>;
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  roundBounty?: Maybe<Scalars['numeric']>;
  roundBountyPlayerIds?: Maybe<Scalars['_int4']>;
  roundBountyTiebreakWinnerId?: Maybe<Scalars['Int']>;
  skinsHoleBounty?: Maybe<Scalars['numeric']>;
  skinsPlayerIds?: Maybe<Scalars['_int4']>;
  skinsTiebreakWinnerId?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type Round_Stddev_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  roundBounty?: Maybe<Scalars['Float']>;
  roundBountyTiebreakWinnerId?: Maybe<Scalars['Float']>;
  skinsHoleBounty?: Maybe<Scalars['Float']>;
  skinsTiebreakWinnerId?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "round" */
export type Round_Stddev_Order_By = {
  courseId?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  roundBounty?: Maybe<Order_By>;
  roundBountyTiebreakWinnerId?: Maybe<Order_By>;
  skinsHoleBounty?: Maybe<Order_By>;
  skinsTiebreakWinnerId?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Round_Stddev_Pop_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  roundBounty?: Maybe<Scalars['Float']>;
  roundBountyTiebreakWinnerId?: Maybe<Scalars['Float']>;
  skinsHoleBounty?: Maybe<Scalars['Float']>;
  skinsTiebreakWinnerId?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "round" */
export type Round_Stddev_Pop_Order_By = {
  courseId?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  roundBounty?: Maybe<Order_By>;
  roundBountyTiebreakWinnerId?: Maybe<Order_By>;
  skinsHoleBounty?: Maybe<Order_By>;
  skinsTiebreakWinnerId?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Round_Stddev_Samp_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  roundBounty?: Maybe<Scalars['Float']>;
  roundBountyTiebreakWinnerId?: Maybe<Scalars['Float']>;
  skinsHoleBounty?: Maybe<Scalars['Float']>;
  skinsTiebreakWinnerId?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "round" */
export type Round_Stddev_Samp_Order_By = {
  courseId?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  roundBounty?: Maybe<Order_By>;
  roundBountyTiebreakWinnerId?: Maybe<Order_By>;
  skinsHoleBounty?: Maybe<Order_By>;
  skinsTiebreakWinnerId?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Round_Sum_Fields = {
  courseId?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  roundBounty?: Maybe<Scalars['numeric']>;
  roundBountyTiebreakWinnerId?: Maybe<Scalars['Int']>;
  skinsHoleBounty?: Maybe<Scalars['numeric']>;
  skinsTiebreakWinnerId?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "round" */
export type Round_Sum_Order_By = {
  courseId?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  roundBounty?: Maybe<Order_By>;
  roundBountyTiebreakWinnerId?: Maybe<Order_By>;
  skinsHoleBounty?: Maybe<Order_By>;
  skinsTiebreakWinnerId?: Maybe<Order_By>;
};

/** update columns of table "round" */
export enum Round_Update_Column {
  /** column name */
  CourseId = 'courseId',
  /** column name */
  Date = 'date',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  RoundBounty = 'roundBounty',
  /** column name */
  RoundBountyPlayerIds = 'roundBountyPlayerIds',
  /** column name */
  RoundBountyTiebreakWinnerId = 'roundBountyTiebreakWinnerId',
  /** column name */
  SkinsHoleBounty = 'skinsHoleBounty',
  /** column name */
  SkinsPlayerIds = 'skinsPlayerIds',
  /** column name */
  SkinsTiebreakWinnerId = 'skinsTiebreakWinnerId'
}

/** aggregate var_pop on columns */
export type Round_Var_Pop_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  roundBounty?: Maybe<Scalars['Float']>;
  roundBountyTiebreakWinnerId?: Maybe<Scalars['Float']>;
  skinsHoleBounty?: Maybe<Scalars['Float']>;
  skinsTiebreakWinnerId?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "round" */
export type Round_Var_Pop_Order_By = {
  courseId?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  roundBounty?: Maybe<Order_By>;
  roundBountyTiebreakWinnerId?: Maybe<Order_By>;
  skinsHoleBounty?: Maybe<Order_By>;
  skinsTiebreakWinnerId?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Round_Var_Samp_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  roundBounty?: Maybe<Scalars['Float']>;
  roundBountyTiebreakWinnerId?: Maybe<Scalars['Float']>;
  skinsHoleBounty?: Maybe<Scalars['Float']>;
  skinsTiebreakWinnerId?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "round" */
export type Round_Var_Samp_Order_By = {
  courseId?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  roundBounty?: Maybe<Order_By>;
  roundBountyTiebreakWinnerId?: Maybe<Order_By>;
  skinsHoleBounty?: Maybe<Order_By>;
  skinsTiebreakWinnerId?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Round_Variance_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  roundBounty?: Maybe<Scalars['Float']>;
  roundBountyTiebreakWinnerId?: Maybe<Scalars['Float']>;
  skinsHoleBounty?: Maybe<Scalars['Float']>;
  skinsTiebreakWinnerId?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "round" */
export type Round_Variance_Order_By = {
  courseId?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  roundBounty?: Maybe<Order_By>;
  roundBountyTiebreakWinnerId?: Maybe<Order_By>;
  skinsHoleBounty?: Maybe<Order_By>;
  skinsTiebreakWinnerId?: Maybe<Order_By>;
};

/** columns and relationships of "score" */
export type Score = {
  /** An object relationship */
  course: Course;
  courseId: Scalars['Int'];
  /** An object relationship */
  hole?: Maybe<Hole>;
  holeNumber: Scalars['Int'];
  /** An object relationship */
  player: Player;
  playerId: Scalars['Int'];
  putts?: Maybe<Scalars['Int']>;
  /** A computed field, executes function "relative_score_for_hole" */
  relativeScore?: Maybe<Scalars['Int']>;
  /** An object relationship */
  round: Round;
  roundId: Scalars['Int'];
  score: Scalars['Int'];
};

/** aggregated selection of "score" */
export type Score_Aggregate = {
  aggregate?: Maybe<Score_Aggregate_Fields>;
  nodes: Array<Score>;
};

/** aggregate fields of "score" */
export type Score_Aggregate_Fields = {
  avg?: Maybe<Score_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Score_Max_Fields>;
  min?: Maybe<Score_Min_Fields>;
  stddev?: Maybe<Score_Stddev_Fields>;
  stddev_pop?: Maybe<Score_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Score_Stddev_Samp_Fields>;
  sum?: Maybe<Score_Sum_Fields>;
  var_pop?: Maybe<Score_Var_Pop_Fields>;
  var_samp?: Maybe<Score_Var_Samp_Fields>;
  variance?: Maybe<Score_Variance_Fields>;
};


/** aggregate fields of "score" */
export type Score_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Score_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "score" */
export type Score_Aggregate_Order_By = {
  avg?: Maybe<Score_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Score_Max_Order_By>;
  min?: Maybe<Score_Min_Order_By>;
  stddev?: Maybe<Score_Stddev_Order_By>;
  stddev_pop?: Maybe<Score_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Score_Stddev_Samp_Order_By>;
  sum?: Maybe<Score_Sum_Order_By>;
  var_pop?: Maybe<Score_Var_Pop_Order_By>;
  var_samp?: Maybe<Score_Var_Samp_Order_By>;
  variance?: Maybe<Score_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "score" */
export type Score_Arr_Rel_Insert_Input = {
  data: Array<Score_Insert_Input>;
  on_conflict?: Maybe<Score_On_Conflict>;
};

/** aggregate avg on columns */
export type Score_Avg_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  holeNumber?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  putts?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  score?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "score" */
export type Score_Avg_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  putts?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "score". All fields are combined with a logical 'AND'. */
export type Score_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Score_Bool_Exp>>>;
  _not?: Maybe<Score_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Score_Bool_Exp>>>;
  course?: Maybe<Course_Bool_Exp>;
  courseId?: Maybe<Int_Comparison_Exp>;
  hole?: Maybe<Hole_Bool_Exp>;
  holeNumber?: Maybe<Int_Comparison_Exp>;
  player?: Maybe<Player_Bool_Exp>;
  playerId?: Maybe<Int_Comparison_Exp>;
  putts?: Maybe<Int_Comparison_Exp>;
  round?: Maybe<Round_Bool_Exp>;
  roundId?: Maybe<Int_Comparison_Exp>;
  score?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "score" */
export enum Score_Constraint {
  /** unique or primary key constraint */
  ScorePkey = 'score_pkey'
}

/** input type for incrementing integer column in table "score" */
export type Score_Inc_Input = {
  courseId?: Maybe<Scalars['Int']>;
  holeNumber?: Maybe<Scalars['Int']>;
  playerId?: Maybe<Scalars['Int']>;
  putts?: Maybe<Scalars['Int']>;
  roundId?: Maybe<Scalars['Int']>;
  score?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "score" */
export type Score_Insert_Input = {
  course?: Maybe<Course_Obj_Rel_Insert_Input>;
  courseId?: Maybe<Scalars['Int']>;
  hole?: Maybe<Hole_Obj_Rel_Insert_Input>;
  holeNumber?: Maybe<Scalars['Int']>;
  player?: Maybe<Player_Obj_Rel_Insert_Input>;
  playerId?: Maybe<Scalars['Int']>;
  putts?: Maybe<Scalars['Int']>;
  round?: Maybe<Round_Obj_Rel_Insert_Input>;
  roundId?: Maybe<Scalars['Int']>;
  score?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type Score_Max_Fields = {
  courseId?: Maybe<Scalars['Int']>;
  holeNumber?: Maybe<Scalars['Int']>;
  playerId?: Maybe<Scalars['Int']>;
  putts?: Maybe<Scalars['Int']>;
  roundId?: Maybe<Scalars['Int']>;
  score?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "score" */
export type Score_Max_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  putts?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Score_Min_Fields = {
  courseId?: Maybe<Scalars['Int']>;
  holeNumber?: Maybe<Scalars['Int']>;
  playerId?: Maybe<Scalars['Int']>;
  putts?: Maybe<Scalars['Int']>;
  roundId?: Maybe<Scalars['Int']>;
  score?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "score" */
export type Score_Min_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  putts?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
};

/** response of any mutation on the table "score" */
export type Score_Mutation_Response = {
  /** number of affected rows by the mutation */
  affected_rows: Scalars['Int'];
  /** data of the affected rows by the mutation */
  returning: Array<Score>;
};

/** input type for inserting object relation for remote table "score" */
export type Score_Obj_Rel_Insert_Input = {
  data: Score_Insert_Input;
  on_conflict?: Maybe<Score_On_Conflict>;
};

/** on conflict condition type for table "score" */
export type Score_On_Conflict = {
  constraint: Score_Constraint;
  update_columns: Array<Score_Update_Column>;
  where?: Maybe<Score_Bool_Exp>;
};

/** ordering options when selecting data from "score" */
export type Score_Order_By = {
  course?: Maybe<Course_Order_By>;
  courseId?: Maybe<Order_By>;
  hole?: Maybe<Hole_Order_By>;
  holeNumber?: Maybe<Order_By>;
  player?: Maybe<Player_Order_By>;
  playerId?: Maybe<Order_By>;
  putts?: Maybe<Order_By>;
  round?: Maybe<Round_Order_By>;
  roundId?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
};

/** primary key columns input for table: "score" */
export type Score_Pk_Columns_Input = {
  holeNumber: Scalars['Int'];
  playerId: Scalars['Int'];
  roundId: Scalars['Int'];
};

/** select columns of table "score" */
export enum Score_Select_Column {
  /** column name */
  CourseId = 'courseId',
  /** column name */
  HoleNumber = 'holeNumber',
  /** column name */
  PlayerId = 'playerId',
  /** column name */
  Putts = 'putts',
  /** column name */
  RoundId = 'roundId',
  /** column name */
  Score = 'score'
}

/** input type for updating data in table "score" */
export type Score_Set_Input = {
  courseId?: Maybe<Scalars['Int']>;
  holeNumber?: Maybe<Scalars['Int']>;
  playerId?: Maybe<Scalars['Int']>;
  putts?: Maybe<Scalars['Int']>;
  roundId?: Maybe<Scalars['Int']>;
  score?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type Score_Stddev_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  holeNumber?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  putts?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  score?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "score" */
export type Score_Stddev_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  putts?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Score_Stddev_Pop_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  holeNumber?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  putts?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  score?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "score" */
export type Score_Stddev_Pop_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  putts?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Score_Stddev_Samp_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  holeNumber?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  putts?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  score?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "score" */
export type Score_Stddev_Samp_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  putts?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Score_Sum_Fields = {
  courseId?: Maybe<Scalars['Int']>;
  holeNumber?: Maybe<Scalars['Int']>;
  playerId?: Maybe<Scalars['Int']>;
  putts?: Maybe<Scalars['Int']>;
  roundId?: Maybe<Scalars['Int']>;
  score?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "score" */
export type Score_Sum_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  putts?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
};

/** update columns of table "score" */
export enum Score_Update_Column {
  /** column name */
  CourseId = 'courseId',
  /** column name */
  HoleNumber = 'holeNumber',
  /** column name */
  PlayerId = 'playerId',
  /** column name */
  Putts = 'putts',
  /** column name */
  RoundId = 'roundId',
  /** column name */
  Score = 'score'
}

/** aggregate var_pop on columns */
export type Score_Var_Pop_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  holeNumber?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  putts?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  score?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "score" */
export type Score_Var_Pop_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  putts?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Score_Var_Samp_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  holeNumber?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  putts?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  score?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "score" */
export type Score_Var_Samp_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  putts?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Score_Variance_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  holeNumber?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  putts?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  score?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "score" */
export type Score_Variance_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  putts?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  score?: Maybe<Order_By>;
};

/** columns and relationships of "scoring_info" */
export type Scoring_Info = {
  /** An object relationship */
  course?: Maybe<Course>;
  courseId?: Maybe<Scalars['Int']>;
  date?: Maybe<Scalars['timestamp']>;
  holeNumber?: Maybe<Scalars['Int']>;
  lifetimeAvgPutts?: Maybe<Scalars['numeric']>;
  lifetimeAvgScore?: Maybe<Scalars['numeric']>;
  /** An object relationship */
  player?: Maybe<Player>;
  playerId?: Maybe<Scalars['Int']>;
  puttsTrend?: Maybe<Scalars['numeric']>;
  relativeScore?: Maybe<Scalars['Int']>;
  roundId?: Maybe<Scalars['Int']>;
  scoreTrend?: Maybe<Scalars['numeric']>;
  trailingAvgPutts?: Maybe<Scalars['numeric']>;
  trailingAvgScore?: Maybe<Scalars['numeric']>;
  trailingCount?: Maybe<Scalars['bigint']>;
};

/** aggregated selection of "scoring_info" */
export type Scoring_Info_Aggregate = {
  aggregate?: Maybe<Scoring_Info_Aggregate_Fields>;
  nodes: Array<Scoring_Info>;
};

/** aggregate fields of "scoring_info" */
export type Scoring_Info_Aggregate_Fields = {
  avg?: Maybe<Scoring_Info_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Scoring_Info_Max_Fields>;
  min?: Maybe<Scoring_Info_Min_Fields>;
  stddev?: Maybe<Scoring_Info_Stddev_Fields>;
  stddev_pop?: Maybe<Scoring_Info_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Scoring_Info_Stddev_Samp_Fields>;
  sum?: Maybe<Scoring_Info_Sum_Fields>;
  var_pop?: Maybe<Scoring_Info_Var_Pop_Fields>;
  var_samp?: Maybe<Scoring_Info_Var_Samp_Fields>;
  variance?: Maybe<Scoring_Info_Variance_Fields>;
};


/** aggregate fields of "scoring_info" */
export type Scoring_Info_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Scoring_Info_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "scoring_info" */
export type Scoring_Info_Aggregate_Order_By = {
  avg?: Maybe<Scoring_Info_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Scoring_Info_Max_Order_By>;
  min?: Maybe<Scoring_Info_Min_Order_By>;
  stddev?: Maybe<Scoring_Info_Stddev_Order_By>;
  stddev_pop?: Maybe<Scoring_Info_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Scoring_Info_Stddev_Samp_Order_By>;
  sum?: Maybe<Scoring_Info_Sum_Order_By>;
  var_pop?: Maybe<Scoring_Info_Var_Pop_Order_By>;
  var_samp?: Maybe<Scoring_Info_Var_Samp_Order_By>;
  variance?: Maybe<Scoring_Info_Variance_Order_By>;
};

/** aggregate avg on columns */
export type Scoring_Info_Avg_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  holeNumber?: Maybe<Scalars['Float']>;
  lifetimeAvgPutts?: Maybe<Scalars['Float']>;
  lifetimeAvgScore?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  puttsTrend?: Maybe<Scalars['Float']>;
  relativeScore?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  scoreTrend?: Maybe<Scalars['Float']>;
  trailingAvgPutts?: Maybe<Scalars['Float']>;
  trailingAvgScore?: Maybe<Scalars['Float']>;
  trailingCount?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "scoring_info" */
export type Scoring_Info_Avg_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  lifetimeAvgPutts?: Maybe<Order_By>;
  lifetimeAvgScore?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  puttsTrend?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  scoreTrend?: Maybe<Order_By>;
  trailingAvgPutts?: Maybe<Order_By>;
  trailingAvgScore?: Maybe<Order_By>;
  trailingCount?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "scoring_info". All fields are combined with a logical 'AND'. */
export type Scoring_Info_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Scoring_Info_Bool_Exp>>>;
  _not?: Maybe<Scoring_Info_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Scoring_Info_Bool_Exp>>>;
  course?: Maybe<Course_Bool_Exp>;
  courseId?: Maybe<Int_Comparison_Exp>;
  date?: Maybe<Timestamp_Comparison_Exp>;
  holeNumber?: Maybe<Int_Comparison_Exp>;
  lifetimeAvgPutts?: Maybe<Numeric_Comparison_Exp>;
  lifetimeAvgScore?: Maybe<Numeric_Comparison_Exp>;
  player?: Maybe<Player_Bool_Exp>;
  playerId?: Maybe<Int_Comparison_Exp>;
  puttsTrend?: Maybe<Numeric_Comparison_Exp>;
  relativeScore?: Maybe<Int_Comparison_Exp>;
  roundId?: Maybe<Int_Comparison_Exp>;
  scoreTrend?: Maybe<Numeric_Comparison_Exp>;
  trailingAvgPutts?: Maybe<Numeric_Comparison_Exp>;
  trailingAvgScore?: Maybe<Numeric_Comparison_Exp>;
  trailingCount?: Maybe<Bigint_Comparison_Exp>;
};

/** aggregate max on columns */
export type Scoring_Info_Max_Fields = {
  courseId?: Maybe<Scalars['Int']>;
  date?: Maybe<Scalars['timestamp']>;
  holeNumber?: Maybe<Scalars['Int']>;
  lifetimeAvgPutts?: Maybe<Scalars['numeric']>;
  lifetimeAvgScore?: Maybe<Scalars['numeric']>;
  playerId?: Maybe<Scalars['Int']>;
  puttsTrend?: Maybe<Scalars['numeric']>;
  relativeScore?: Maybe<Scalars['Int']>;
  roundId?: Maybe<Scalars['Int']>;
  scoreTrend?: Maybe<Scalars['numeric']>;
  trailingAvgPutts?: Maybe<Scalars['numeric']>;
  trailingAvgScore?: Maybe<Scalars['numeric']>;
  trailingCount?: Maybe<Scalars['bigint']>;
};

/** order by max() on columns of table "scoring_info" */
export type Scoring_Info_Max_Order_By = {
  courseId?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  lifetimeAvgPutts?: Maybe<Order_By>;
  lifetimeAvgScore?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  puttsTrend?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  scoreTrend?: Maybe<Order_By>;
  trailingAvgPutts?: Maybe<Order_By>;
  trailingAvgScore?: Maybe<Order_By>;
  trailingCount?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Scoring_Info_Min_Fields = {
  courseId?: Maybe<Scalars['Int']>;
  date?: Maybe<Scalars['timestamp']>;
  holeNumber?: Maybe<Scalars['Int']>;
  lifetimeAvgPutts?: Maybe<Scalars['numeric']>;
  lifetimeAvgScore?: Maybe<Scalars['numeric']>;
  playerId?: Maybe<Scalars['Int']>;
  puttsTrend?: Maybe<Scalars['numeric']>;
  relativeScore?: Maybe<Scalars['Int']>;
  roundId?: Maybe<Scalars['Int']>;
  scoreTrend?: Maybe<Scalars['numeric']>;
  trailingAvgPutts?: Maybe<Scalars['numeric']>;
  trailingAvgScore?: Maybe<Scalars['numeric']>;
  trailingCount?: Maybe<Scalars['bigint']>;
};

/** order by min() on columns of table "scoring_info" */
export type Scoring_Info_Min_Order_By = {
  courseId?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  lifetimeAvgPutts?: Maybe<Order_By>;
  lifetimeAvgScore?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  puttsTrend?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  scoreTrend?: Maybe<Order_By>;
  trailingAvgPutts?: Maybe<Order_By>;
  trailingAvgScore?: Maybe<Order_By>;
  trailingCount?: Maybe<Order_By>;
};

/** ordering options when selecting data from "scoring_info" */
export type Scoring_Info_Order_By = {
  course?: Maybe<Course_Order_By>;
  courseId?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  lifetimeAvgPutts?: Maybe<Order_By>;
  lifetimeAvgScore?: Maybe<Order_By>;
  player?: Maybe<Player_Order_By>;
  playerId?: Maybe<Order_By>;
  puttsTrend?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  scoreTrend?: Maybe<Order_By>;
  trailingAvgPutts?: Maybe<Order_By>;
  trailingAvgScore?: Maybe<Order_By>;
  trailingCount?: Maybe<Order_By>;
};

/** select columns of table "scoring_info" */
export enum Scoring_Info_Select_Column {
  /** column name */
  CourseId = 'courseId',
  /** column name */
  Date = 'date',
  /** column name */
  HoleNumber = 'holeNumber',
  /** column name */
  LifetimeAvgPutts = 'lifetimeAvgPutts',
  /** column name */
  LifetimeAvgScore = 'lifetimeAvgScore',
  /** column name */
  PlayerId = 'playerId',
  /** column name */
  PuttsTrend = 'puttsTrend',
  /** column name */
  RelativeScore = 'relativeScore',
  /** column name */
  RoundId = 'roundId',
  /** column name */
  ScoreTrend = 'scoreTrend',
  /** column name */
  TrailingAvgPutts = 'trailingAvgPutts',
  /** column name */
  TrailingAvgScore = 'trailingAvgScore',
  /** column name */
  TrailingCount = 'trailingCount'
}

/** aggregate stddev on columns */
export type Scoring_Info_Stddev_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  holeNumber?: Maybe<Scalars['Float']>;
  lifetimeAvgPutts?: Maybe<Scalars['Float']>;
  lifetimeAvgScore?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  puttsTrend?: Maybe<Scalars['Float']>;
  relativeScore?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  scoreTrend?: Maybe<Scalars['Float']>;
  trailingAvgPutts?: Maybe<Scalars['Float']>;
  trailingAvgScore?: Maybe<Scalars['Float']>;
  trailingCount?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "scoring_info" */
export type Scoring_Info_Stddev_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  lifetimeAvgPutts?: Maybe<Order_By>;
  lifetimeAvgScore?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  puttsTrend?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  scoreTrend?: Maybe<Order_By>;
  trailingAvgPutts?: Maybe<Order_By>;
  trailingAvgScore?: Maybe<Order_By>;
  trailingCount?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Scoring_Info_Stddev_Pop_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  holeNumber?: Maybe<Scalars['Float']>;
  lifetimeAvgPutts?: Maybe<Scalars['Float']>;
  lifetimeAvgScore?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  puttsTrend?: Maybe<Scalars['Float']>;
  relativeScore?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  scoreTrend?: Maybe<Scalars['Float']>;
  trailingAvgPutts?: Maybe<Scalars['Float']>;
  trailingAvgScore?: Maybe<Scalars['Float']>;
  trailingCount?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "scoring_info" */
export type Scoring_Info_Stddev_Pop_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  lifetimeAvgPutts?: Maybe<Order_By>;
  lifetimeAvgScore?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  puttsTrend?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  scoreTrend?: Maybe<Order_By>;
  trailingAvgPutts?: Maybe<Order_By>;
  trailingAvgScore?: Maybe<Order_By>;
  trailingCount?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Scoring_Info_Stddev_Samp_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  holeNumber?: Maybe<Scalars['Float']>;
  lifetimeAvgPutts?: Maybe<Scalars['Float']>;
  lifetimeAvgScore?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  puttsTrend?: Maybe<Scalars['Float']>;
  relativeScore?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  scoreTrend?: Maybe<Scalars['Float']>;
  trailingAvgPutts?: Maybe<Scalars['Float']>;
  trailingAvgScore?: Maybe<Scalars['Float']>;
  trailingCount?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "scoring_info" */
export type Scoring_Info_Stddev_Samp_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  lifetimeAvgPutts?: Maybe<Order_By>;
  lifetimeAvgScore?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  puttsTrend?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  scoreTrend?: Maybe<Order_By>;
  trailingAvgPutts?: Maybe<Order_By>;
  trailingAvgScore?: Maybe<Order_By>;
  trailingCount?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Scoring_Info_Sum_Fields = {
  courseId?: Maybe<Scalars['Int']>;
  holeNumber?: Maybe<Scalars['Int']>;
  lifetimeAvgPutts?: Maybe<Scalars['numeric']>;
  lifetimeAvgScore?: Maybe<Scalars['numeric']>;
  playerId?: Maybe<Scalars['Int']>;
  puttsTrend?: Maybe<Scalars['numeric']>;
  relativeScore?: Maybe<Scalars['Int']>;
  roundId?: Maybe<Scalars['Int']>;
  scoreTrend?: Maybe<Scalars['numeric']>;
  trailingAvgPutts?: Maybe<Scalars['numeric']>;
  trailingAvgScore?: Maybe<Scalars['numeric']>;
  trailingCount?: Maybe<Scalars['bigint']>;
};

/** order by sum() on columns of table "scoring_info" */
export type Scoring_Info_Sum_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  lifetimeAvgPutts?: Maybe<Order_By>;
  lifetimeAvgScore?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  puttsTrend?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  scoreTrend?: Maybe<Order_By>;
  trailingAvgPutts?: Maybe<Order_By>;
  trailingAvgScore?: Maybe<Order_By>;
  trailingCount?: Maybe<Order_By>;
};

/** aggregate var_pop on columns */
export type Scoring_Info_Var_Pop_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  holeNumber?: Maybe<Scalars['Float']>;
  lifetimeAvgPutts?: Maybe<Scalars['Float']>;
  lifetimeAvgScore?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  puttsTrend?: Maybe<Scalars['Float']>;
  relativeScore?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  scoreTrend?: Maybe<Scalars['Float']>;
  trailingAvgPutts?: Maybe<Scalars['Float']>;
  trailingAvgScore?: Maybe<Scalars['Float']>;
  trailingCount?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "scoring_info" */
export type Scoring_Info_Var_Pop_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  lifetimeAvgPutts?: Maybe<Order_By>;
  lifetimeAvgScore?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  puttsTrend?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  scoreTrend?: Maybe<Order_By>;
  trailingAvgPutts?: Maybe<Order_By>;
  trailingAvgScore?: Maybe<Order_By>;
  trailingCount?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Scoring_Info_Var_Samp_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  holeNumber?: Maybe<Scalars['Float']>;
  lifetimeAvgPutts?: Maybe<Scalars['Float']>;
  lifetimeAvgScore?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  puttsTrend?: Maybe<Scalars['Float']>;
  relativeScore?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  scoreTrend?: Maybe<Scalars['Float']>;
  trailingAvgPutts?: Maybe<Scalars['Float']>;
  trailingAvgScore?: Maybe<Scalars['Float']>;
  trailingCount?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "scoring_info" */
export type Scoring_Info_Var_Samp_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  lifetimeAvgPutts?: Maybe<Order_By>;
  lifetimeAvgScore?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  puttsTrend?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  scoreTrend?: Maybe<Order_By>;
  trailingAvgPutts?: Maybe<Order_By>;
  trailingAvgScore?: Maybe<Order_By>;
  trailingCount?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Scoring_Info_Variance_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  holeNumber?: Maybe<Scalars['Float']>;
  lifetimeAvgPutts?: Maybe<Scalars['Float']>;
  lifetimeAvgScore?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  puttsTrend?: Maybe<Scalars['Float']>;
  relativeScore?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  scoreTrend?: Maybe<Scalars['Float']>;
  trailingAvgPutts?: Maybe<Scalars['Float']>;
  trailingAvgScore?: Maybe<Scalars['Float']>;
  trailingCount?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "scoring_info" */
export type Scoring_Info_Variance_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  lifetimeAvgPutts?: Maybe<Order_By>;
  lifetimeAvgScore?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  puttsTrend?: Maybe<Order_By>;
  relativeScore?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  scoreTrend?: Maybe<Order_By>;
  trailingAvgPutts?: Maybe<Order_By>;
  trailingAvgScore?: Maybe<Order_By>;
  trailingCount?: Maybe<Order_By>;
};

/** columns and relationships of "skins" */
export type Skins = {
  /** An object relationship */
  course?: Maybe<Course>;
  courseId?: Maybe<Scalars['Int']>;
  /** An object relationship */
  coursePlayer?: Maybe<Course_Player>;
  holeNumber?: Maybe<Scalars['Int']>;
  multiple?: Maybe<Scalars['Int']>;
  /** An object relationship */
  player?: Maybe<Player>;
  playerCount?: Maybe<Scalars['bigint']>;
  playerId?: Maybe<Scalars['Int']>;
  /** An object relationship */
  round?: Maybe<Round>;
  roundId?: Maybe<Scalars['Int']>;
  winnings?: Maybe<Scalars['numeric']>;
  won?: Maybe<Scalars['Boolean']>;
};

/** aggregated selection of "skins" */
export type Skins_Aggregate = {
  aggregate?: Maybe<Skins_Aggregate_Fields>;
  nodes: Array<Skins>;
};

/** aggregate fields of "skins" */
export type Skins_Aggregate_Fields = {
  avg?: Maybe<Skins_Avg_Fields>;
  count?: Maybe<Scalars['Int']>;
  max?: Maybe<Skins_Max_Fields>;
  min?: Maybe<Skins_Min_Fields>;
  stddev?: Maybe<Skins_Stddev_Fields>;
  stddev_pop?: Maybe<Skins_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Skins_Stddev_Samp_Fields>;
  sum?: Maybe<Skins_Sum_Fields>;
  var_pop?: Maybe<Skins_Var_Pop_Fields>;
  var_samp?: Maybe<Skins_Var_Samp_Fields>;
  variance?: Maybe<Skins_Variance_Fields>;
};


/** aggregate fields of "skins" */
export type Skins_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Skins_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "skins" */
export type Skins_Aggregate_Order_By = {
  avg?: Maybe<Skins_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Skins_Max_Order_By>;
  min?: Maybe<Skins_Min_Order_By>;
  stddev?: Maybe<Skins_Stddev_Order_By>;
  stddev_pop?: Maybe<Skins_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Skins_Stddev_Samp_Order_By>;
  sum?: Maybe<Skins_Sum_Order_By>;
  var_pop?: Maybe<Skins_Var_Pop_Order_By>;
  var_samp?: Maybe<Skins_Var_Samp_Order_By>;
  variance?: Maybe<Skins_Variance_Order_By>;
};

/** aggregate avg on columns */
export type Skins_Avg_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  holeNumber?: Maybe<Scalars['Float']>;
  multiple?: Maybe<Scalars['Float']>;
  playerCount?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  winnings?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "skins" */
export type Skins_Avg_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  multiple?: Maybe<Order_By>;
  playerCount?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  winnings?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "skins". All fields are combined with a logical 'AND'. */
export type Skins_Bool_Exp = {
  _and?: Maybe<Array<Maybe<Skins_Bool_Exp>>>;
  _not?: Maybe<Skins_Bool_Exp>;
  _or?: Maybe<Array<Maybe<Skins_Bool_Exp>>>;
  course?: Maybe<Course_Bool_Exp>;
  courseId?: Maybe<Int_Comparison_Exp>;
  coursePlayer?: Maybe<Course_Player_Bool_Exp>;
  holeNumber?: Maybe<Int_Comparison_Exp>;
  multiple?: Maybe<Int_Comparison_Exp>;
  player?: Maybe<Player_Bool_Exp>;
  playerCount?: Maybe<Bigint_Comparison_Exp>;
  playerId?: Maybe<Int_Comparison_Exp>;
  round?: Maybe<Round_Bool_Exp>;
  roundId?: Maybe<Int_Comparison_Exp>;
  winnings?: Maybe<Numeric_Comparison_Exp>;
  won?: Maybe<Boolean_Comparison_Exp>;
};

/** aggregate max on columns */
export type Skins_Max_Fields = {
  courseId?: Maybe<Scalars['Int']>;
  holeNumber?: Maybe<Scalars['Int']>;
  multiple?: Maybe<Scalars['Int']>;
  playerCount?: Maybe<Scalars['bigint']>;
  playerId?: Maybe<Scalars['Int']>;
  roundId?: Maybe<Scalars['Int']>;
  winnings?: Maybe<Scalars['numeric']>;
};

/** order by max() on columns of table "skins" */
export type Skins_Max_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  multiple?: Maybe<Order_By>;
  playerCount?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  winnings?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Skins_Min_Fields = {
  courseId?: Maybe<Scalars['Int']>;
  holeNumber?: Maybe<Scalars['Int']>;
  multiple?: Maybe<Scalars['Int']>;
  playerCount?: Maybe<Scalars['bigint']>;
  playerId?: Maybe<Scalars['Int']>;
  roundId?: Maybe<Scalars['Int']>;
  winnings?: Maybe<Scalars['numeric']>;
};

/** order by min() on columns of table "skins" */
export type Skins_Min_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  multiple?: Maybe<Order_By>;
  playerCount?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  winnings?: Maybe<Order_By>;
};

/** ordering options when selecting data from "skins" */
export type Skins_Order_By = {
  course?: Maybe<Course_Order_By>;
  courseId?: Maybe<Order_By>;
  coursePlayer?: Maybe<Course_Player_Order_By>;
  holeNumber?: Maybe<Order_By>;
  multiple?: Maybe<Order_By>;
  player?: Maybe<Player_Order_By>;
  playerCount?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  round?: Maybe<Round_Order_By>;
  roundId?: Maybe<Order_By>;
  winnings?: Maybe<Order_By>;
  won?: Maybe<Order_By>;
};

/** select columns of table "skins" */
export enum Skins_Select_Column {
  /** column name */
  CourseId = 'courseId',
  /** column name */
  HoleNumber = 'holeNumber',
  /** column name */
  Multiple = 'multiple',
  /** column name */
  PlayerCount = 'playerCount',
  /** column name */
  PlayerId = 'playerId',
  /** column name */
  RoundId = 'roundId',
  /** column name */
  Winnings = 'winnings',
  /** column name */
  Won = 'won'
}

/** aggregate stddev on columns */
export type Skins_Stddev_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  holeNumber?: Maybe<Scalars['Float']>;
  multiple?: Maybe<Scalars['Float']>;
  playerCount?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  winnings?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "skins" */
export type Skins_Stddev_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  multiple?: Maybe<Order_By>;
  playerCount?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  winnings?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Skins_Stddev_Pop_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  holeNumber?: Maybe<Scalars['Float']>;
  multiple?: Maybe<Scalars['Float']>;
  playerCount?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  winnings?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "skins" */
export type Skins_Stddev_Pop_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  multiple?: Maybe<Order_By>;
  playerCount?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  winnings?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Skins_Stddev_Samp_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  holeNumber?: Maybe<Scalars['Float']>;
  multiple?: Maybe<Scalars['Float']>;
  playerCount?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  winnings?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "skins" */
export type Skins_Stddev_Samp_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  multiple?: Maybe<Order_By>;
  playerCount?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  winnings?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Skins_Sum_Fields = {
  courseId?: Maybe<Scalars['Int']>;
  holeNumber?: Maybe<Scalars['Int']>;
  multiple?: Maybe<Scalars['Int']>;
  playerCount?: Maybe<Scalars['bigint']>;
  playerId?: Maybe<Scalars['Int']>;
  roundId?: Maybe<Scalars['Int']>;
  winnings?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "skins" */
export type Skins_Sum_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  multiple?: Maybe<Order_By>;
  playerCount?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  winnings?: Maybe<Order_By>;
};

/** aggregate var_pop on columns */
export type Skins_Var_Pop_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  holeNumber?: Maybe<Scalars['Float']>;
  multiple?: Maybe<Scalars['Float']>;
  playerCount?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  winnings?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "skins" */
export type Skins_Var_Pop_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  multiple?: Maybe<Order_By>;
  playerCount?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  winnings?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Skins_Var_Samp_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  holeNumber?: Maybe<Scalars['Float']>;
  multiple?: Maybe<Scalars['Float']>;
  playerCount?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  winnings?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "skins" */
export type Skins_Var_Samp_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  multiple?: Maybe<Order_By>;
  playerCount?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  winnings?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Skins_Variance_Fields = {
  courseId?: Maybe<Scalars['Float']>;
  holeNumber?: Maybe<Scalars['Float']>;
  multiple?: Maybe<Scalars['Float']>;
  playerCount?: Maybe<Scalars['Float']>;
  playerId?: Maybe<Scalars['Float']>;
  roundId?: Maybe<Scalars['Float']>;
  winnings?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "skins" */
export type Skins_Variance_Order_By = {
  courseId?: Maybe<Order_By>;
  holeNumber?: Maybe<Order_By>;
  multiple?: Maybe<Order_By>;
  playerCount?: Maybe<Order_By>;
  playerId?: Maybe<Order_By>;
  roundId?: Maybe<Order_By>;
  winnings?: Maybe<Order_By>;
};

/** subscription root */
export type Subscription_Root = {
  /** fetch data from the table: "course" using primary key columns */
  course?: Maybe<Course>;
  /** fetch aggregated fields from the table: "course_player" */
  coursePlayerStats: Course_Player_Aggregate;
  /** fetch data from the table: "course_player" */
  coursePlayers: Array<Course_Player>;
  /** fetch aggregated fields from the table: "course" */
  courseStats: Course_Aggregate;
  /** fetch data from the table: "course" */
  courses: Array<Course>;
  /** fetch data from the table: "hole" using primary key columns */
  hole?: Maybe<Hole>;
  /** fetch aggregated fields from the table: "hole" */
  holeStats: Hole_Aggregate;
  /** fetch data from the table: "hole" */
  holes: Array<Hole>;
  /** fetch data from the table: "player" using primary key columns */
  player?: Maybe<Player>;
  /** fetch aggregated fields from the table: "player_round" */
  playerRoundStats: Player_Round_Aggregate;
  /** fetch data from the table: "player_round" */
  playerRounds: Array<Player_Round>;
  /** fetch aggregated fields from the table: "player" */
  playerStats: Player_Aggregate;
  /** fetch data from the table: "player" */
  players: Array<Player>;
  /** fetch data from the table: "round" using primary key columns */
  round?: Maybe<Round>;
  /** fetch aggregated fields from the table: "round" */
  roundStats: Round_Aggregate;
  /** fetch data from the table: "round" */
  rounds: Array<Round>;
  /** fetch data from the table: "score" using primary key columns */
  score?: Maybe<Score>;
  /** fetch aggregated fields from the table: "score" */
  scoreStats: Score_Aggregate;
  /** fetch data from the table: "score" */
  scores: Array<Score>;
  /** fetch data from the table: "scoring_info" */
  scoringInfo: Array<Scoring_Info>;
  /** fetch aggregated fields from the table: "scoring_info" */
  scoringStats: Scoring_Info_Aggregate;
  /** fetch aggregated fields from the table: "skins" */
  skinStats: Skins_Aggregate;
  /** fetch data from the table: "skins" */
  skins: Array<Skins>;
};


/** subscription root */
export type Subscription_RootCourseArgs = {
  id: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootCoursePlayerStatsArgs = {
  distinct_on?: Maybe<Array<Course_Player_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Course_Player_Order_By>>;
  where?: Maybe<Course_Player_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootCoursePlayersArgs = {
  distinct_on?: Maybe<Array<Course_Player_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Course_Player_Order_By>>;
  where?: Maybe<Course_Player_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootCourseStatsArgs = {
  distinct_on?: Maybe<Array<Course_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Course_Order_By>>;
  where?: Maybe<Course_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootCoursesArgs = {
  distinct_on?: Maybe<Array<Course_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Course_Order_By>>;
  where?: Maybe<Course_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootHoleArgs = {
  courseId: Scalars['Int'];
  number: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootHoleStatsArgs = {
  distinct_on?: Maybe<Array<Hole_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Hole_Order_By>>;
  where?: Maybe<Hole_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootHolesArgs = {
  distinct_on?: Maybe<Array<Hole_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Hole_Order_By>>;
  where?: Maybe<Hole_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootPlayerArgs = {
  id: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootPlayerRoundStatsArgs = {
  distinct_on?: Maybe<Array<Player_Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Round_Order_By>>;
  where?: Maybe<Player_Round_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootPlayerRoundsArgs = {
  distinct_on?: Maybe<Array<Player_Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Round_Order_By>>;
  where?: Maybe<Player_Round_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootPlayerStatsArgs = {
  distinct_on?: Maybe<Array<Player_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Order_By>>;
  where?: Maybe<Player_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootPlayersArgs = {
  distinct_on?: Maybe<Array<Player_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Player_Order_By>>;
  where?: Maybe<Player_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRoundArgs = {
  id: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootRoundStatsArgs = {
  distinct_on?: Maybe<Array<Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Round_Order_By>>;
  where?: Maybe<Round_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootRoundsArgs = {
  distinct_on?: Maybe<Array<Round_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Round_Order_By>>;
  where?: Maybe<Round_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootScoreArgs = {
  holeNumber: Scalars['Int'];
  playerId: Scalars['Int'];
  roundId: Scalars['Int'];
};


/** subscription root */
export type Subscription_RootScoreStatsArgs = {
  distinct_on?: Maybe<Array<Score_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Score_Order_By>>;
  where?: Maybe<Score_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootScoresArgs = {
  distinct_on?: Maybe<Array<Score_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Score_Order_By>>;
  where?: Maybe<Score_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootScoringInfoArgs = {
  distinct_on?: Maybe<Array<Scoring_Info_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Scoring_Info_Order_By>>;
  where?: Maybe<Scoring_Info_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootScoringStatsArgs = {
  distinct_on?: Maybe<Array<Scoring_Info_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Scoring_Info_Order_By>>;
  where?: Maybe<Scoring_Info_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootSkinStatsArgs = {
  distinct_on?: Maybe<Array<Skins_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Skins_Order_By>>;
  where?: Maybe<Skins_Bool_Exp>;
};


/** subscription root */
export type Subscription_RootSkinsArgs = {
  distinct_on?: Maybe<Array<Skins_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Skins_Order_By>>;
  where?: Maybe<Skins_Bool_Exp>;
};


/** expression to compare columns of type timestamp. All fields are combined with logical 'AND'. */
export type Timestamp_Comparison_Exp = {
  _eq?: Maybe<Scalars['timestamp']>;
  _gt?: Maybe<Scalars['timestamp']>;
  _gte?: Maybe<Scalars['timestamp']>;
  _in?: Maybe<Array<Scalars['timestamp']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['timestamp']>;
  _lte?: Maybe<Scalars['timestamp']>;
  _neq?: Maybe<Scalars['timestamp']>;
  _nin?: Maybe<Array<Scalars['timestamp']>>;
};

export type PlayerRoundForChart = (
  Pick<Player_Round, 'relativeScore'>
  & { player?: Maybe<Pick<Player, 'nickname' | 'id' | 'img'>>, round?: Maybe<Pick<Round, 'date' | 'id'>> }
);

export type _LeaderboardCardCourse = Pick<Course, 'slug'>;

export type _LeaderboardCardPlayerRound = (
  Pick<Player_Round, 'playerId' | 'roundId' | 'relativeScore'>
  & { player?: Maybe<Pick<Player, 'nickname' | 'slug'>>, round?: Maybe<Pick<Round, 'date'>> }
);

export type LeaderboardCardVariables = Exact<{
  courseId: Scalars['Int'];
  rankLimit: Scalars['bigint'];
}>;


export type LeaderboardCard = { course?: Maybe<(
    { playerRounds: Array<(
      { rank: Player_Round['courseRank'] }
      & _LeaderboardCardPlayerRound
    )> }
    & _LeaderboardCardCourse
  )> };

export type LeaderboardCardForPlayerVariables = Exact<{
  courseId: Scalars['Int'];
  playerId?: Maybe<Scalars['Int']>;
  rankLimit: Scalars['bigint'];
}>;


export type LeaderboardCardForPlayer = { course?: Maybe<(
    { playerRounds: Array<(
      { rank: Player_Round['playerCourseRank'] }
      & _LeaderboardCardPlayerRound
    )> }
    & _LeaderboardCardCourse
  )> };

export type ParticipationStatsCardVariables = Exact<{
  courseId: Scalars['Int'];
}>;


export type ParticipationStatsCard = { course?: Maybe<(
    Pick<Course, 'slug'>
    & { coursePlayers: Array<{ player?: Maybe<Pick<Player, 'id' | 'slug' | 'nickname'>>, playerRoundsStats: { aggregate?: Maybe<(
          Pick<Player_Round_Aggregate_Fields, 'count'>
          & { avg?: Maybe<Pick<Player_Round_Avg_Fields, 'relativeScore'>>, sum?: Maybe<Pick<Player_Round_Sum_Fields, 'totalWinnings'>> }
        )> }, winningStats: { aggregate?: Maybe<Pick<Player_Round_Aggregate_Fields, 'count'>> } }> }
  )> };

export type RoundForRoundCard = (
  Pick<Round, 'date' | 'name' | 'skinsHoleBounty' | 'roundBounty'>
  & RoundForTable
);

export type RoundCardListVariables = Exact<{
  courseId?: Maybe<Scalars['Int']>;
  playerId?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
}>;


export type RoundCardList = { rounds: Array<(
    Pick<Round, 'id'>
    & { course: Pick<Course, 'slug'> }
    & RoundForRoundCard
  )> };

export type RoundForTable = (
  Pick<Round, 'id' | 'date' | 'name'>
  & { course: (
    Pick<Course, 'slug'>
    & { holes: Array<HoleForScoresHeader> }
  ), playerRounds: Array<(
    Pick<Player_Round, 'relativeScore' | 'roundBountyWinner' | 'totalWinnings'>
    & { player?: Maybe<Pick<Player, 'nickname' | 'id' | 'slug'>>, skins: Array<Pick<Skins, 'holeNumber' | 'won'>>, scores: Array<Pick<Score, 'holeNumber' | 'score'>> }
  )> }
);

export type HoleForScoresHeader = Pick<Hole, 'nickname' | 'number' | 'par'>;

export type ScoringStatsCardVariables = Exact<{
  courseId: Scalars['Int'];
}>;


export type ScoringStatsCard = { course?: Maybe<(
    Pick<Course, 'slug'>
    & { holes: Array<HoleForScoresHeader>, coursePlayers: Array<{ player?: Maybe<Pick<Player, 'id' | 'slug' | 'nickname'>>, scoringInfo: Array<Pick<Scoring_Info, 'holeNumber' | 'trailingCount' | 'trailingAvgScore' | 'lifetimeAvgScore' | 'scoreTrend'>> }> }
  )> };

export type AverageScoreStatCardVariables = Exact<{
  courseId?: Maybe<Scalars['Int']>;
  playerId?: Maybe<Scalars['Int']>;
}>;


export type AverageScoreStatCard = { playerRoundStats: { aggregate?: Maybe<{ avg?: Maybe<Pick<Player_Round_Avg_Fields, 'relativeScore'>> }> } };

export type RoundsPlayedStatCardVariables = Exact<{
  courseId: Scalars['Int'];
}>;


export type RoundsPlayedStatCard = { scope?: Maybe<{ roundStats: { aggregate?: Maybe<Pick<Round_Aggregate_Fields, 'count'>> } }> };

export type RoundsPlayedStatCardForPlayerVariables = Exact<{
  courseId: Scalars['Int'];
  playerId: Scalars['Int'];
}>;


export type RoundsPlayedStatCardForPlayer = { scope?: Maybe<{ roundStats: { aggregate?: Maybe<Pick<Player_Round_Aggregate_Fields, 'count'>> } }> };

export type RoundsWonStatCardVariables = Exact<{
  courseId: Scalars['Int'];
  playerId: Scalars['Int'];
}>;


export type RoundsWonStatCard = { playerRoundStats: { aggregate?: Maybe<Pick<Player_Round_Aggregate_Fields, 'count'>> } };

export type ScoreCountStatCardVariables = Exact<{
  courseId?: Maybe<Scalars['Int']>;
  playerId?: Maybe<Scalars['Int']>;
  relativeScoreCutoff?: Maybe<Scalars['Int']>;
}>;


export type ScoreCountStatCard = { scoringStats: { aggregate?: Maybe<Pick<Scoring_Info_Aggregate_Fields, 'count'>> } };

export type WinningsStatCardVariables = Exact<{
  courseId: Scalars['Int'];
  playerId: Scalars['Int'];
}>;


export type WinningsStatCard = { playerRoundStats: { aggregate?: Maybe<{ sum?: Maybe<Pick<Player_Round_Sum_Fields, 'totalWinnings'>> }> } };

export type HoleInputVariables = Exact<{
  holeNumber: Scalars['Int'];
  playerId: Scalars['Int'];
  roundId: Scalars['Int'];
}>;


export type HoleInput = { score?: Maybe<Pick<Score, 'score' | 'putts'>> };

export type HoleInputInsertVariables = Exact<{
  score: Score_Insert_Input;
}>;


export type HoleInputInsert = { insertScore?: Maybe<Pick<Score, 'roundId'>> };

export type HoleInputUpdateVariables = Exact<{
  scoreKey: Score_Pk_Columns_Input;
  scoreUpdate: Score_Set_Input;
}>;


export type HoleInputUpdate = { updateScore?: Maybe<Pick<Score, 'roundId'>> };

export type HoleInputDeleteVariables = Exact<{
  holeNumber: Scalars['Int'];
  playerId: Scalars['Int'];
  roundId: Scalars['Int'];
}>;


export type HoleInputDelete = { deleteScore?: Maybe<Pick<Score, 'roundId'>> };

export type NewRoundButtonInsertVariables = Exact<{
  courseId: Scalars['Int'];
  date: Scalars['timestamp'];
}>;


export type NewRoundButtonInsert = { insertRound?: Maybe<{ roundId: Round['id'] }> };

export type ScorecardPlayerInfoVariables = Exact<{
  courseId: Scalars['Int'];
  playerId: Scalars['Int'];
}>;


export type ScorecardPlayerInfo = { player?: Maybe<(
    Pick<Player, 'id' | 'img' | 'firstName' | 'lastName' | 'fullName'>
    & { scoringInfo: Array<Pick<Scoring_Info, 'trailingAvgScore' | 'lifetimeAvgScore' | 'scoreTrend' | 'holeNumber'>> }
  )> };

export type CourseForScorecardPlayerList = (
  Pick<Course, 'id'>
  & { holes: Array<Pick<Hole, 'number' | 'par'>> }
);

export type OfflineRoundScoresVariables = Exact<{
  roundId: Scalars['Int'];
}>;


export type OfflineRoundScores = { scores: Array<Pick<Score, 'playerId' | 'holeNumber' | 'roundId' | 'score' | 'putts'>> };

export type OfflineRoundScoresInsertVariables = Exact<{
  score: Score_Insert_Input;
}>;


export type OfflineRoundScoresInsert = { insertScore?: Maybe<Pick<Score, 'roundId'>> };

export type OfflineRoundScoresUpdateVariables = Exact<{
  scoreKey: Score_Pk_Columns_Input;
  scoreUpdate: Score_Set_Input;
}>;


export type OfflineRoundScoresUpdate = { updateScore?: Maybe<Pick<Score, 'roundId'>> };

export type OfflineRoundScoresDeleteVariables = Exact<{
  holeNumber: Scalars['Int'];
  playerId: Scalars['Int'];
  roundId: Scalars['Int'];
}>;


export type OfflineRoundScoresDelete = { deleteScore?: Maybe<Pick<Score, 'roundId'>> };

export type LayoutVariables = Exact<{ [key: string]: never; }>;


export type Layout = { courses: Array<(
    Pick<Course, 'id' | 'name' | 'slug'>
    & { coursePlayers: Array<{ player?: Maybe<Pick<Player, 'id' | 'fullName' | 'img' | 'slug'>> }> }
  )> };

export type CoursePlayerForPlayerPage = (
  Pick<Course_Player, 'courseId' | 'playerId'>
  & { player?: Maybe<Pick<Player, 'fullName' | 'img'>>, course?: Maybe<Pick<Course, 'name'>> }
);

export type CoursePlayerPageVariables = Exact<{
  courseSlug: Scalars['String'];
  playerSlug: Scalars['String'];
}>;


export type CoursePlayerPage = { coursePlayers: Array<CoursePlayerForPlayerPage> };

export type CoursePlayerStaticListingVariables = Exact<{ [key: string]: never; }>;


export type CoursePlayerStaticListing = { coursePlayers: Array<{ course?: Maybe<Pick<Course, 'slug'>>, player?: Maybe<Pick<Player, 'slug'>> }> };

export type CourseForIndexPage = Pick<Course, 'id' | 'name' | 'img'>;

export type CourseIndexPageVariables = Exact<{
  slug: Scalars['String'];
}>;


export type CourseIndexPage = { courses: Array<CourseForIndexPage> };

export type CourseSlugStaticListingVariables = Exact<{ [key: string]: never; }>;


export type CourseSlugStaticListing = { courses: Array<Pick<Course, 'slug'>> };

export type CourseForRoundsPage = Pick<Course, 'id' | 'slug' | 'name' | 'img'>;

export type CourseRoundsPageVariables = Exact<{
  slug: Scalars['String'];
}>;


export type CourseRoundsPage = { courses: Array<CourseForRoundsPage> };

export type CourseRoundsPagePathsVariables = Exact<{ [key: string]: never; }>;


export type CourseRoundsPagePaths = { courses: Array<Pick<Course, 'slug'>> };

export type ScorecardPageNewVariables = Exact<{
  slug: Scalars['String'];
}>;


export type ScorecardPageNew = { courses: Array<(
    Pick<Course, 'slug'>
    & { holes: Array<Pick<Hole, 'number' | 'par'>> }
    & CourseForScorecardPlayerList
  )> };

export const PlayerRoundForChart = gql`
    fragment playerRoundForChart on player_round {
  relativeScore
  player {
    nickname
    id
    img
  }
  round {
    date
    id
  }
}
    `;
export const _LeaderboardCardCourse = gql`
    fragment _leaderboardCardCourse on course {
  slug
}
    `;
export const _LeaderboardCardPlayerRound = gql`
    fragment _leaderboardCardPlayerRound on player_round {
  playerId
  roundId
  player {
    nickname
    slug
  }
  relativeScore
  round {
    date
  }
}
    `;
export const HoleForScoresHeader = gql`
    fragment holeForScoresHeader on hole {
  nickname
  number
  par
}
    `;
export const RoundForTable = gql`
    fragment roundForTable on round {
  id
  date
  name
  course {
    slug
    holes(order_by: {number: asc}) {
      ...holeForScoresHeader
    }
  }
  playerRounds(order_by: {relativeScore: asc}) {
    relativeScore
    roundBountyWinner
    totalWinnings
    player {
      nickname
      id
      slug
    }
    skins {
      holeNumber
      won
    }
    scores {
      holeNumber
      score
    }
  }
}
    ${HoleForScoresHeader}`;
export const RoundForRoundCard = gql`
    fragment roundForRoundCard on round {
  ...roundForTable
  date
  name
  skinsHoleBounty
  roundBounty
}
    ${RoundForTable}`;
export const CourseForScorecardPlayerList = gql`
    fragment courseForScorecardPlayerList on course {
  id
  holes {
    number
    par
  }
}
    `;
export const CoursePlayerForPlayerPage = gql`
    fragment coursePlayerForPlayerPage on course_player {
  courseId
  playerId
  player {
    fullName
    img
  }
  course {
    name
  }
}
    `;
export const CourseForIndexPage = gql`
    fragment courseForIndexPage on course {
  id
  name
  img
}
    `;
export const CourseForRoundsPage = gql`
    fragment courseForRoundsPage on course {
  id
  slug
  name
  img
}
    `;
export const LeaderboardCardDocument = gql`
    query leaderboardCard($courseId: Int!, $rankLimit: bigint!) {
  course(id: $courseId) {
    ..._leaderboardCardCourse
    playerRounds(where: {courseRank: {_lte: $rankLimit}}) {
      ..._leaderboardCardPlayerRound
      rank: courseRank
    }
  }
}
    ${_LeaderboardCardCourse}
${_LeaderboardCardPlayerRound}`;
export const LeaderboardCardForPlayerDocument = gql`
    query leaderboardCardForPlayer($courseId: Int!, $playerId: Int, $rankLimit: bigint!) {
  course(id: $courseId) {
    ..._leaderboardCardCourse
    playerRounds(
      where: {playerId: {_eq: $playerId}, playerCourseRank: {_lte: $rankLimit}}
    ) {
      ..._leaderboardCardPlayerRound
      rank: playerCourseRank
    }
  }
}
    ${_LeaderboardCardCourse}
${_LeaderboardCardPlayerRound}`;
export const ParticipationStatsCardDocument = gql`
    query participationStatsCard($courseId: Int!) {
  course(id: $courseId) {
    slug
    coursePlayers(order_by: {playerRounds_aggregate: {count: desc}}) {
      player {
        id
        slug
        nickname
      }
      playerRoundsStats: playerRounds_aggregate {
        aggregate {
          count
          avg {
            relativeScore
          }
          sum {
            totalWinnings
          }
        }
      }
      winningStats: playerRounds_aggregate(where: {winner: {_eq: true}}) {
        aggregate {
          count
        }
      }
    }
  }
}
    `;
export const RoundCardListDocument = gql`
    query roundCardList($courseId: Int, $playerId: Int, $limit: Int) {
  rounds(
    where: {courseId: {_eq: $courseId}, playerRounds: {playerId: {_eq: $playerId}}}
    order_by: {date: desc}
    limit: $limit
  ) {
    id
    course {
      slug
    }
    ...roundForRoundCard
  }
}
    ${RoundForRoundCard}`;
export const ScoringStatsCardDocument = gql`
    query scoringStatsCard($courseId: Int!) {
  course(id: $courseId) {
    slug
    holes(order_by: {number: asc}) {
      ...holeForScoresHeader
    }
    coursePlayers(order_by: {scores_aggregate: {count: desc}}) {
      player {
        id
        slug
        nickname
      }
      scoringInfo(order_by: {holeNumber: asc, date: desc}, distinct_on: holeNumber) {
        holeNumber
        trailingCount
        trailingAvgScore
        lifetimeAvgScore
        scoreTrend
      }
    }
  }
}
    ${HoleForScoresHeader}`;
export const AverageScoreStatCardDocument = gql`
    query averageScoreStatCard($courseId: Int, $playerId: Int) {
  playerRoundStats(
    where: {courseId: {_eq: $courseId}, playerId: {_eq: $playerId}}
  ) {
    aggregate {
      avg {
        relativeScore
      }
    }
  }
}
    `;
export const RoundsPlayedStatCardDocument = gql`
    query roundsPlayedStatCard($courseId: Int!) {
  scope: course(id: $courseId) {
    roundStats: rounds_aggregate {
      aggregate {
        count
      }
    }
  }
}
    `;
export const RoundsPlayedStatCardForPlayerDocument = gql`
    query roundsPlayedStatCardForPlayer($courseId: Int!, $playerId: Int!) {
  scope: player(id: $playerId) {
    roundStats: playerRounds_aggregate(where: {courseId: {_eq: $courseId}}) {
      aggregate {
        count
      }
    }
  }
}
    `;
export const RoundsWonStatCardDocument = gql`
    query roundsWonStatCard($courseId: Int!, $playerId: Int!) {
  playerRoundStats(
    where: {courseId: {_eq: $courseId}, playerId: {_eq: $playerId}, winner: {_eq: true}}
  ) {
    aggregate {
      count
    }
  }
}
    `;
export const ScoreCountStatCardDocument = gql`
    query scoreCountStatCard($courseId: Int, $playerId: Int, $relativeScoreCutoff: Int) {
  scoringStats(
    where: {courseId: {_eq: $courseId}, playerId: {_eq: $playerId}, relativeScore: {_lte: $relativeScoreCutoff}}
  ) {
    aggregate {
      count
    }
  }
}
    `;
export const WinningsStatCardDocument = gql`
    query winningsStatCard($courseId: Int!, $playerId: Int!) {
  playerRoundStats(
    where: {courseId: {_eq: $courseId}, playerId: {_eq: $playerId}}
  ) {
    aggregate {
      sum {
        totalWinnings
      }
    }
  }
}
    `;
export const HoleInputDocument = gql`
    query holeInput($holeNumber: Int!, $playerId: Int!, $roundId: Int!) {
  score(holeNumber: $holeNumber, playerId: $playerId, roundId: $roundId) {
    score
    putts
  }
}
    `;
export const HoleInputInsertDocument = gql`
    mutation holeInputInsert($score: score_insert_input!) {
  insertScore(object: $score) {
    roundId
  }
}
    `;
export const HoleInputUpdateDocument = gql`
    mutation holeInputUpdate($scoreKey: score_pk_columns_input!, $scoreUpdate: score_set_input!) {
  updateScore(pk_columns: $scoreKey, _set: $scoreUpdate) {
    roundId
  }
}
    `;
export const HoleInputDeleteDocument = gql`
    mutation holeInputDelete($holeNumber: Int!, $playerId: Int!, $roundId: Int!) {
  deleteScore(holeNumber: $holeNumber, playerId: $playerId, roundId: $roundId) {
    roundId
  }
}
    `;
export const NewRoundButtonInsertDocument = gql`
    mutation newRoundButtonInsert($courseId: Int!, $date: timestamp!) {
  insertRound(object: {courseId: $courseId, date: $date}) {
    roundId: id
  }
}
    `;
export const ScorecardPlayerInfoDocument = gql`
    query scorecardPlayerInfo($courseId: Int!, $playerId: Int!) {
  player(id: $playerId) {
    id
    img
    firstName
    lastName
    fullName
    scoringInfo(
      where: {courseId: {_eq: $courseId}}
      order_by: {holeNumber: asc, date: desc}
      distinct_on: holeNumber
    ) {
      trailingAvgScore
      lifetimeAvgScore
      scoreTrend
      holeNumber
    }
  }
}
    `;
export const OfflineRoundScoresDocument = gql`
    query offlineRoundScores($roundId: Int!) {
  scores(where: {roundId: {_eq: $roundId}}) {
    playerId
    holeNumber
    roundId
    score
    putts
  }
}
    `;
export const OfflineRoundScoresInsertDocument = gql`
    mutation offlineRoundScoresInsert($score: score_insert_input!) {
  insertScore(object: $score) {
    roundId
  }
}
    `;
export const OfflineRoundScoresUpdateDocument = gql`
    mutation offlineRoundScoresUpdate($scoreKey: score_pk_columns_input!, $scoreUpdate: score_set_input!) {
  updateScore(pk_columns: $scoreKey, _set: $scoreUpdate) {
    roundId
  }
}
    `;
export const OfflineRoundScoresDeleteDocument = gql`
    mutation offlineRoundScoresDelete($holeNumber: Int!, $playerId: Int!, $roundId: Int!) {
  deleteScore(holeNumber: $holeNumber, playerId: $playerId, roundId: $roundId) {
    roundId
  }
}
    `;
export const LayoutDocument = gql`
    query layout {
  courses(order_by: {scores_aggregate: {count: desc}}) {
    id
    name
    slug
    coursePlayers(order_by: {scores_aggregate: {count: desc}}) {
      player {
        id
        fullName
        img
        slug
      }
    }
  }
}
    `;
export const CoursePlayerPageDocument = gql`
    query coursePlayerPage($courseSlug: String!, $playerSlug: String!) {
  coursePlayers(
    where: {course: {slug: {_eq: $courseSlug}}, player: {slug: {_eq: $playerSlug}}}
  ) {
    ...coursePlayerForPlayerPage
  }
}
    ${CoursePlayerForPlayerPage}`;
export const CoursePlayerStaticListingDocument = gql`
    query coursePlayerStaticListing {
  coursePlayers {
    course {
      slug
    }
    player {
      slug
    }
  }
}
    `;
export const CourseIndexPageDocument = gql`
    query courseIndexPage($slug: String!) {
  courses(where: {slug: {_eq: $slug}}) {
    ...courseForIndexPage
  }
}
    ${CourseForIndexPage}`;
export const CourseSlugStaticListingDocument = gql`
    query courseSlugStaticListing {
  courses {
    slug
  }
}
    `;
export const CourseRoundsPageDocument = gql`
    query courseRoundsPage($slug: String!) {
  courses(where: {slug: {_eq: $slug}}) {
    ...courseForRoundsPage
  }
}
    ${CourseForRoundsPage}`;
export const CourseRoundsPagePathsDocument = gql`
    query courseRoundsPagePaths {
  courses {
    slug
  }
}
    `;
export const ScorecardPageNewDocument = gql`
    query scorecardPageNEW($slug: String!) {
  courses(where: {slug: {_eq: $slug}}) {
    slug
    holes {
      number
      par
    }
    ...courseForScorecardPlayerList
  }
}
    ${CourseForScorecardPlayerList}`;

export type SdkFunctionWrapper = <T>(action: () => Promise<T>) => Promise<T>;


const defaultWrapper: SdkFunctionWrapper = sdkFunction => sdkFunction();
export function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {
  return {
    leaderboardCard(variables: LeaderboardCardVariables): Promise<LeaderboardCard> {
      return withWrapper(() => client.request<LeaderboardCard>(print(LeaderboardCardDocument), variables));
    },
    leaderboardCardForPlayer(variables: LeaderboardCardForPlayerVariables): Promise<LeaderboardCardForPlayer> {
      return withWrapper(() => client.request<LeaderboardCardForPlayer>(print(LeaderboardCardForPlayerDocument), variables));
    },
    participationStatsCard(variables: ParticipationStatsCardVariables): Promise<ParticipationStatsCard> {
      return withWrapper(() => client.request<ParticipationStatsCard>(print(ParticipationStatsCardDocument), variables));
    },
    roundCardList(variables?: RoundCardListVariables): Promise<RoundCardList> {
      return withWrapper(() => client.request<RoundCardList>(print(RoundCardListDocument), variables));
    },
    scoringStatsCard(variables: ScoringStatsCardVariables): Promise<ScoringStatsCard> {
      return withWrapper(() => client.request<ScoringStatsCard>(print(ScoringStatsCardDocument), variables));
    },
    averageScoreStatCard(variables?: AverageScoreStatCardVariables): Promise<AverageScoreStatCard> {
      return withWrapper(() => client.request<AverageScoreStatCard>(print(AverageScoreStatCardDocument), variables));
    },
    roundsPlayedStatCard(variables: RoundsPlayedStatCardVariables): Promise<RoundsPlayedStatCard> {
      return withWrapper(() => client.request<RoundsPlayedStatCard>(print(RoundsPlayedStatCardDocument), variables));
    },
    roundsPlayedStatCardForPlayer(variables: RoundsPlayedStatCardForPlayerVariables): Promise<RoundsPlayedStatCardForPlayer> {
      return withWrapper(() => client.request<RoundsPlayedStatCardForPlayer>(print(RoundsPlayedStatCardForPlayerDocument), variables));
    },
    roundsWonStatCard(variables: RoundsWonStatCardVariables): Promise<RoundsWonStatCard> {
      return withWrapper(() => client.request<RoundsWonStatCard>(print(RoundsWonStatCardDocument), variables));
    },
    scoreCountStatCard(variables?: ScoreCountStatCardVariables): Promise<ScoreCountStatCard> {
      return withWrapper(() => client.request<ScoreCountStatCard>(print(ScoreCountStatCardDocument), variables));
    },
    winningsStatCard(variables: WinningsStatCardVariables): Promise<WinningsStatCard> {
      return withWrapper(() => client.request<WinningsStatCard>(print(WinningsStatCardDocument), variables));
    },
    holeInput(variables: HoleInputVariables): Promise<HoleInput> {
      return withWrapper(() => client.request<HoleInput>(print(HoleInputDocument), variables));
    },
    holeInputInsert(variables: HoleInputInsertVariables): Promise<HoleInputInsert> {
      return withWrapper(() => client.request<HoleInputInsert>(print(HoleInputInsertDocument), variables));
    },
    holeInputUpdate(variables: HoleInputUpdateVariables): Promise<HoleInputUpdate> {
      return withWrapper(() => client.request<HoleInputUpdate>(print(HoleInputUpdateDocument), variables));
    },
    holeInputDelete(variables: HoleInputDeleteVariables): Promise<HoleInputDelete> {
      return withWrapper(() => client.request<HoleInputDelete>(print(HoleInputDeleteDocument), variables));
    },
    newRoundButtonInsert(variables: NewRoundButtonInsertVariables): Promise<NewRoundButtonInsert> {
      return withWrapper(() => client.request<NewRoundButtonInsert>(print(NewRoundButtonInsertDocument), variables));
    },
    scorecardPlayerInfo(variables: ScorecardPlayerInfoVariables): Promise<ScorecardPlayerInfo> {
      return withWrapper(() => client.request<ScorecardPlayerInfo>(print(ScorecardPlayerInfoDocument), variables));
    },
    offlineRoundScores(variables: OfflineRoundScoresVariables): Promise<OfflineRoundScores> {
      return withWrapper(() => client.request<OfflineRoundScores>(print(OfflineRoundScoresDocument), variables));
    },
    offlineRoundScoresInsert(variables: OfflineRoundScoresInsertVariables): Promise<OfflineRoundScoresInsert> {
      return withWrapper(() => client.request<OfflineRoundScoresInsert>(print(OfflineRoundScoresInsertDocument), variables));
    },
    offlineRoundScoresUpdate(variables: OfflineRoundScoresUpdateVariables): Promise<OfflineRoundScoresUpdate> {
      return withWrapper(() => client.request<OfflineRoundScoresUpdate>(print(OfflineRoundScoresUpdateDocument), variables));
    },
    offlineRoundScoresDelete(variables: OfflineRoundScoresDeleteVariables): Promise<OfflineRoundScoresDelete> {
      return withWrapper(() => client.request<OfflineRoundScoresDelete>(print(OfflineRoundScoresDeleteDocument), variables));
    },
    layout(variables?: LayoutVariables): Promise<Layout> {
      return withWrapper(() => client.request<Layout>(print(LayoutDocument), variables));
    },
    coursePlayerPage(variables: CoursePlayerPageVariables): Promise<CoursePlayerPage> {
      return withWrapper(() => client.request<CoursePlayerPage>(print(CoursePlayerPageDocument), variables));
    },
    coursePlayerStaticListing(variables?: CoursePlayerStaticListingVariables): Promise<CoursePlayerStaticListing> {
      return withWrapper(() => client.request<CoursePlayerStaticListing>(print(CoursePlayerStaticListingDocument), variables));
    },
    courseIndexPage(variables: CourseIndexPageVariables): Promise<CourseIndexPage> {
      return withWrapper(() => client.request<CourseIndexPage>(print(CourseIndexPageDocument), variables));
    },
    courseSlugStaticListing(variables?: CourseSlugStaticListingVariables): Promise<CourseSlugStaticListing> {
      return withWrapper(() => client.request<CourseSlugStaticListing>(print(CourseSlugStaticListingDocument), variables));
    },
    courseRoundsPage(variables: CourseRoundsPageVariables): Promise<CourseRoundsPage> {
      return withWrapper(() => client.request<CourseRoundsPage>(print(CourseRoundsPageDocument), variables));
    },
    courseRoundsPagePaths(variables?: CourseRoundsPagePathsVariables): Promise<CourseRoundsPagePaths> {
      return withWrapper(() => client.request<CourseRoundsPagePaths>(print(CourseRoundsPagePathsDocument), variables));
    },
    scorecardPageNEW(variables: ScorecardPageNewVariables): Promise<ScorecardPageNew> {
      return withWrapper(() => client.request<ScorecardPageNew>(print(ScorecardPageNewDocument), variables));
    }
  };
}
export type Sdk = ReturnType<typeof getSdk>;